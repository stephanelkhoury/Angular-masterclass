{"ast":null,"code":"import { map, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass FakeStoreApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://fakestoreapi.com';\n  }\n  // Get all products from Fake Store API\n  getProducts(options = {}) {\n    let url = `${this.baseUrl}/products`;\n    // Handle category filtering\n    if (options.category && options.category !== 'all') {\n      url = `${this.baseUrl}/products/category/${encodeURIComponent(options.category)}`;\n    }\n    // Add query parameters\n    const params = new URLSearchParams();\n    if (options.limit) {\n      params.append('limit', options.limit.toString());\n    }\n    if (options.sortBy) {\n      params.append('sort', options.order || 'asc');\n    }\n    const queryString = params.toString();\n    if (queryString) {\n      url += `?${queryString}`;\n    }\n    console.log('FakeStoreApiService: Making request to:', url);\n    return this.http.get(url).pipe(map(products => {\n      console.log('FakeStoreApiService: Received response:', products);\n      return this.transformToAppProducts(products, options);\n    }), catchError(error => {\n      console.error('FakeStoreApiService: Error fetching products:', error);\n      return of(this.getEmptyResponse());\n    }));\n  }\n  // Get product by ID\n  getProductById(id) {\n    const url = `${this.baseUrl}/products/${id}`;\n    console.log('FakeStoreApiService: Getting product by ID from:', url);\n    return this.http.get(url).pipe(map(product => {\n      console.log('FakeStoreApiService: Received product:', product);\n      return this.transformSingleProduct(product);\n    }), catchError(error => {\n      console.error('FakeStoreApiService: Error fetching product by ID:', error);\n      return of(null);\n    }));\n  }\n  // Get all categories\n  getCategories() {\n    return this.http.get(`${this.baseUrl}/products/categories`).pipe(map(categories => this.transformToAppCategories(categories)), catchError(error => {\n      console.error('Error fetching categories:', error);\n      return of([]);\n    }));\n  }\n  // Get products in a specific category\n  getProductsByCategory(categoryName, limit) {\n    let url = `${this.baseUrl}/products/category/${encodeURIComponent(categoryName)}`;\n    if (limit) {\n      url += `?limit=${limit}`;\n    }\n    return this.http.get(url).pipe(map(products => products.map(p => this.transformSingleProduct(p))), catchError(error => {\n      console.error('Error fetching products by category:', error);\n      return of([]);\n    }));\n  }\n  // Transform Fake Store API product to your app's Product interface\n  transformSingleProduct(fakeProduct) {\n    return {\n      id: fakeProduct.id.toString(),\n      name: fakeProduct.title,\n      description: fakeProduct.description,\n      price: fakeProduct.price,\n      imageUrl: fakeProduct.image,\n      images: [{\n        id: '1',\n        url: fakeProduct.image,\n        altText: fakeProduct.title\n      }],\n      category: {\n        id: fakeProduct.category,\n        name: this.capitalizeCategory(fakeProduct.category)\n      },\n      categoryId: fakeProduct.category,\n      stock: Math.floor(Math.random() * 100) + 1,\n      stockQuantity: Math.floor(Math.random() * 100) + 1,\n      rating: fakeProduct.rating.rate,\n      brand: this.generateBrandFromCategory(fakeProduct.category),\n      sku: `FS-${fakeProduct.id}`,\n      createdAt: new Date(),\n      featured: Math.random() > 0.7,\n      regularPrice: fakeProduct.price * 1.2,\n      discountPrice: Math.random() > 0.5 ? fakeProduct.price : undefined,\n      availabilityStatus: 'in-stock',\n      freeShipping: Math.random() > 0.6,\n      fastDelivery: Math.random() > 0.7,\n      reviews: this.generateMockReviews(fakeProduct.id.toString(), fakeProduct.rating.count)\n    };\n  }\n  // Transform multiple products\n  transformToAppProducts(fakeProducts, options) {\n    let products = fakeProducts.map(p => this.transformSingleProduct(p));\n    // Apply search filter if provided\n    if (options.search) {\n      const searchTerm = options.search.toLowerCase();\n      products = products.filter(p => p.name.toLowerCase().includes(searchTerm) || p.description.toLowerCase().includes(searchTerm) || p.category?.name.toLowerCase().includes(searchTerm));\n    }\n    // Calculate pagination\n    const page = options.page || 1;\n    const limit = options.limit || products.length;\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedProducts = products.slice(startIndex, endIndex);\n    return {\n      items: paginatedProducts,\n      totalCount: products.length,\n      page: page,\n      limit: limit,\n      totalPages: Math.ceil(products.length / limit)\n    };\n  }\n  // Transform categories\n  transformToAppCategories(categories) {\n    return categories.map(cat => ({\n      id: cat,\n      name: this.capitalizeCategory(cat),\n      featured: Math.random() > 0.5 // Randomly mark some as featured\n    }));\n  }\n  // Helper methods\n  capitalizeCategory(category) {\n    return category.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  }\n  generateBrandFromCategory(category) {\n    const brandMap = {\n      'electronics': ['Apple', 'Samsung', 'Sony', 'LG', 'Microsoft'],\n      'jewelery': ['Tiffany & Co.', 'Cartier', 'Pandora', 'Swarovski'],\n      \"men's clothing\": ['Nike', 'Adidas', 'Levi\\'s', 'Calvin Klein', 'Tommy Hilfiger'],\n      \"women's clothing\": ['Zara', 'H&M', 'Forever 21', 'ASOS', 'Mango']\n    };\n    const brands = brandMap[category] || ['Generic Brand'];\n    return brands[Math.floor(Math.random() * brands.length)];\n  }\n  generateMockReviews(productId, count) {\n    // Generate a few mock reviews based on the count\n    const maxReviews = Math.min(count, 5);\n    const reviews = [];\n    for (let i = 0; i < maxReviews; i++) {\n      reviews.push({\n        id: `${productId}-review-${i}`,\n        productId: productId,\n        userId: `user-${i}`,\n        userName: `Customer ${i + 1}`,\n        rating: Math.floor(Math.random() * 5) + 1,\n        comment: 'Great product! Highly recommended.',\n        createdAt: new Date()\n      });\n    }\n    return reviews;\n  }\n  getEmptyResponse() {\n    return {\n      items: [],\n      totalCount: 0,\n      page: 1,\n      limit: 10,\n      totalPages: 0\n    };\n  }\n  static {\n    this.ɵfac = function FakeStoreApiService_Factory(t) {\n      return new (t || FakeStoreApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FakeStoreApiService,\n      factory: FakeStoreApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { FakeStoreApiService };","map":{"version":3,"names":["map","of","catchError","FakeStoreApiService","constructor","http","baseUrl","getProducts","options","url","category","encodeURIComponent","params","URLSearchParams","limit","append","toString","sortBy","order","queryString","console","log","get","pipe","products","transformToAppProducts","error","getEmptyResponse","getProductById","id","product","transformSingleProduct","getCategories","categories","transformToAppCategories","getProductsByCategory","categoryName","p","fakeProduct","name","title","description","price","imageUrl","image","images","altText","capitalizeCategory","categoryId","stock","Math","floor","random","stockQuantity","rating","rate","brand","generateBrandFromCategory","sku","createdAt","Date","featured","regularPrice","discountPrice","undefined","availabilityStatus","freeShipping","fastDelivery","reviews","generateMockReviews","count","fakeProducts","search","searchTerm","toLowerCase","filter","includes","page","length","startIndex","endIndex","paginatedProducts","slice","items","totalCount","totalPages","ceil","cat","split","word","charAt","toUpperCase","join","brandMap","brands","productId","maxReviews","min","i","push","userId","userName","comment","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/fake-store-api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map, forkJoin, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Product, Category, PaginatedResponse } from '../models/product.model';\n\n// Fake Store API interfaces\nexport interface FakeStoreProduct {\n  id: number;\n  title: string;\n  price: number;\n  description: string;\n  category: string;\n  image: string;\n  rating: {\n    rate: number;\n    count: number;\n  };\n}\n\nexport interface FakeStoreCategory {\n  name: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FakeStoreApiService {\n  private baseUrl = 'https://fakestoreapi.com';\n\n  constructor(private http: HttpClient) {}\n\n  // Get all products from Fake Store API\n  getProducts(options: {\n    page?: number;\n    limit?: number;\n    sortBy?: string;\n    order?: 'asc' | 'desc';\n    category?: string;\n    search?: string;\n  } = {}): Observable<PaginatedResponse<Product>> {\n    \n    let url = `${this.baseUrl}/products`;\n    \n    // Handle category filtering\n    if (options.category && options.category !== 'all') {\n      url = `${this.baseUrl}/products/category/${encodeURIComponent(options.category)}`;\n    }\n    \n    // Add query parameters\n    const params = new URLSearchParams();\n    if (options.limit) {\n      params.append('limit', options.limit.toString());\n    }\n    if (options.sortBy) {\n      params.append('sort', options.order || 'asc');\n    }\n    \n    const queryString = params.toString();\n    if (queryString) {\n      url += `?${queryString}`;\n    }\n\n    console.log('FakeStoreApiService: Making request to:', url);\n\n    return this.http.get<FakeStoreProduct[]>(url).pipe(\n      map(products => {\n        console.log('FakeStoreApiService: Received response:', products);\n        return this.transformToAppProducts(products, options);\n      }),\n      catchError(error => {\n        console.error('FakeStoreApiService: Error fetching products:', error);\n        return of(this.getEmptyResponse());\n      })\n    );\n  }\n\n  // Get product by ID\n  getProductById(id: string): Observable<Product | null> {\n    const url = `${this.baseUrl}/products/${id}`;\n    console.log('FakeStoreApiService: Getting product by ID from:', url);\n    \n    return this.http.get<FakeStoreProduct>(url).pipe(\n      map(product => {\n        console.log('FakeStoreApiService: Received product:', product);\n        return this.transformSingleProduct(product);\n      }),\n      catchError(error => {\n        console.error('FakeStoreApiService: Error fetching product by ID:', error);\n        return of(null);\n      })\n    );\n  }\n\n  // Get all categories\n  getCategories(): Observable<Category[]> {\n    return this.http.get<string[]>(`${this.baseUrl}/products/categories`).pipe(\n      map(categories => this.transformToAppCategories(categories)),\n      catchError(error => {\n        console.error('Error fetching categories:', error);\n        return of([]);\n      })\n    );\n  }\n\n  // Get products in a specific category\n  getProductsByCategory(categoryName: string, limit?: number): Observable<Product[]> {\n    let url = `${this.baseUrl}/products/category/${encodeURIComponent(categoryName)}`;\n    if (limit) {\n      url += `?limit=${limit}`;\n    }\n\n    return this.http.get<FakeStoreProduct[]>(url).pipe(\n      map(products => products.map(p => this.transformSingleProduct(p))),\n      catchError(error => {\n        console.error('Error fetching products by category:', error);\n        return of([]);\n      })\n    );\n  }\n\n  // Transform Fake Store API product to your app's Product interface\n  private transformSingleProduct(fakeProduct: FakeStoreProduct): Product {\n    return {\n      id: fakeProduct.id.toString(),\n      name: fakeProduct.title,\n      description: fakeProduct.description,\n      price: fakeProduct.price,\n      imageUrl: fakeProduct.image,\n      images: [{ id: '1', url: fakeProduct.image, altText: fakeProduct.title }],\n      category: {\n        id: fakeProduct.category,\n        name: this.capitalizeCategory(fakeProduct.category)\n      },\n      categoryId: fakeProduct.category,\n      stock: Math.floor(Math.random() * 100) + 1, // Random stock since API doesn't provide\n      stockQuantity: Math.floor(Math.random() * 100) + 1,\n      rating: fakeProduct.rating.rate,\n      brand: this.generateBrandFromCategory(fakeProduct.category),\n      sku: `FS-${fakeProduct.id}`,\n      createdAt: new Date(),\n      featured: Math.random() > 0.7, // Randomly mark some as featured\n      regularPrice: fakeProduct.price * 1.2, // Simulate original price\n      discountPrice: Math.random() > 0.5 ? fakeProduct.price : undefined,\n      availabilityStatus: 'in-stock' as const,\n      freeShipping: Math.random() > 0.6,\n      fastDelivery: Math.random() > 0.7,\n      reviews: this.generateMockReviews(fakeProduct.id.toString(), fakeProduct.rating.count)\n    };\n  }\n\n  // Transform multiple products\n  private transformToAppProducts(\n    fakeProducts: FakeStoreProduct[], \n    options: any\n  ): PaginatedResponse<Product> {\n    let products = fakeProducts.map(p => this.transformSingleProduct(p));\n    \n    // Apply search filter if provided\n    if (options.search) {\n      const searchTerm = options.search.toLowerCase();\n      products = products.filter(p => \n        p.name.toLowerCase().includes(searchTerm) ||\n        p.description.toLowerCase().includes(searchTerm) ||\n        p.category?.name.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    // Calculate pagination\n    const page = options.page || 1;\n    const limit = options.limit || products.length;\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedProducts = products.slice(startIndex, endIndex);\n\n    return {\n      items: paginatedProducts,\n      totalCount: products.length,\n      page: page,\n      limit: limit,\n      totalPages: Math.ceil(products.length / limit)\n    };\n  }\n\n  // Transform categories\n  private transformToAppCategories(categories: string[]): Category[] {\n    return categories.map(cat => ({\n      id: cat,\n      name: this.capitalizeCategory(cat),\n      featured: Math.random() > 0.5 // Randomly mark some as featured\n    }));\n  }\n\n  // Helper methods\n  private capitalizeCategory(category: string): string {\n    return category\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  private generateBrandFromCategory(category: string): string {\n    const brandMap: { [key: string]: string[] } = {\n      'electronics': ['Apple', 'Samsung', 'Sony', 'LG', 'Microsoft'],\n      'jewelery': ['Tiffany & Co.', 'Cartier', 'Pandora', 'Swarovski'],\n      \"men's clothing\": ['Nike', 'Adidas', 'Levi\\'s', 'Calvin Klein', 'Tommy Hilfiger'],\n      \"women's clothing\": ['Zara', 'H&M', 'Forever 21', 'ASOS', 'Mango']\n    };\n\n    const brands = brandMap[category] || ['Generic Brand'];\n    return brands[Math.floor(Math.random() * brands.length)];\n  }\n\n  private generateMockReviews(productId: string, count: number): any[] {\n    // Generate a few mock reviews based on the count\n    const maxReviews = Math.min(count, 5);\n    const reviews = [];\n    \n    for (let i = 0; i < maxReviews; i++) {\n      reviews.push({\n        id: `${productId}-review-${i}`,\n        productId: productId,\n        userId: `user-${i}`,\n        userName: `Customer ${i + 1}`,\n        rating: Math.floor(Math.random() * 5) + 1,\n        comment: 'Great product! Highly recommended.',\n        createdAt: new Date()\n      });\n    }\n    \n    return reviews;\n  }\n\n  private getEmptyResponse(): PaginatedResponse<Product> {\n    return {\n      items: [],\n      totalCount: 0,\n      page: 1,\n      limit: 10,\n      totalPages: 0\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}