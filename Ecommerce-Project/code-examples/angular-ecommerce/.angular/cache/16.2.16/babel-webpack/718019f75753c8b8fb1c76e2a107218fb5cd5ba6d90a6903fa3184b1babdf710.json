{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as CartActions from '../actions/cart.actions';\nexport const initialState = {\n  items: [],\n  total: 0,\n  loading: false,\n  error: null\n};\nexport const reducer = createReducer(initialState,\n// Add to cart\non(CartActions.addToCart, (state, {\n  item\n}) => {\n  const existingItemIndex = state.items.findIndex(cartItem => cartItem.productId === item.productId);\n  let updatedItems;\n  if (existingItemIndex >= 0) {\n    // Item exists, update quantity\n    updatedItems = state.items.map((cartItem, index) => index === existingItemIndex ? {\n      ...cartItem,\n      quantity: cartItem.quantity + item.quantity\n    } : cartItem);\n  } else {\n    // New item, add to cart\n    updatedItems = [...state.items, item];\n  }\n  const newState = {\n    ...state,\n    items: updatedItems,\n    total: calculateTotal(updatedItems)\n  };\n  return newState;\n}),\n// Remove from cart\non(CartActions.removeFromCart, (state, {\n  productId\n}) => {\n  const updatedItems = state.items.filter(item => item.productId !== productId);\n  return {\n    ...state,\n    items: updatedItems,\n    total: calculateTotal(updatedItems)\n  };\n}),\n// Update cart item quantity\non(CartActions.updateCartItemQuantity, (state, {\n  productId,\n  quantity\n}) => {\n  const updatedItems = state.items.map(item => item.productId === productId ? {\n    ...item,\n    quantity\n  } : item);\n  return {\n    ...state,\n    items: updatedItems,\n    total: calculateTotal(updatedItems)\n  };\n}),\n// Clear cart\non(CartActions.clearCart, () => initialState),\n// Load cart\non(CartActions.loadCart, state => ({\n  ...state,\n  loading: true,\n  error: null\n})),\n// Load cart success\non(CartActions.loadCartSuccess, (state, {\n  items\n}) => ({\n  ...state,\n  items,\n  total: calculateTotal(items),\n  loading: false,\n  error: null\n})),\n// Load cart failure\non(CartActions.loadCartFailure, (state, {\n  error\n}) => ({\n  ...state,\n  loading: false,\n  error: typeof error === 'string' ? error : 'Failed to load cart'\n})));\n// Helper function to calculate total\nfunction calculateTotal(items) {\n  return items.reduce((total, item) => total + item.price * item.quantity, 0);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}