{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./notification.service\";\nlet OrderService = /*#__PURE__*/(() => {\n  class OrderService {\n    constructor(http, notificationService) {\n      this.http = http;\n      this.notificationService = notificationService;\n      this.apiUrl = `${environment.apiUrl}/orders`;\n    }\n    getOrders(page = 1, limit = 10) {\n      return this.http.get(`${this.apiUrl}?page=${page}&limit=${limit}`).pipe(catchError(error => {\n        this.notificationService.error('Failed to load your orders. Please try again.');\n        return throwError(() => error);\n      }));\n    }\n    getOrderById(id) {\n      return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n        this.notificationService.error('Failed to load order details. Please try again.');\n        return throwError(() => error);\n      }));\n    }\n    createOrder(orderData) {\n      return this.http.post(this.apiUrl, orderData).pipe(tap(() => {\n        this.notificationService.success('Order placed successfully!');\n      }), catchError(error => {\n        this.notificationService.error('Failed to place your order. Please try again.');\n        return throwError(() => error);\n      }));\n    }\n    cancelOrder(orderId, reason) {\n      return this.http.post(`${this.apiUrl}/${orderId}/cancel`, {\n        reason\n      }).pipe(tap(() => {\n        this.notificationService.success('Order cancelled successfully.');\n      }), catchError(error => {\n        this.notificationService.error('Failed to cancel your order. Please try again.');\n        return throwError(() => error);\n      }));\n    }\n    static {\n      this.ɵfac = function OrderService_Factory(t) {\n        return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: OrderService,\n        factory: OrderService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return OrderService;\n})();\nexport { OrderService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}