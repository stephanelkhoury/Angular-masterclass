{"ast":null,"code":"import { of, throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./storage.service\";\nimport * as i3 from \"./notification.service\";\nclass AuthService {\n  constructor(http, storageService, notificationService) {\n    this.http = http;\n    this.storageService = storageService;\n    this.notificationService = notificationService;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.userSubject = new BehaviorSubject(null);\n    this.user$ = this.userSubject.asObservable();\n    this.autoLogin();\n  }\n  signup(email, password, name) {\n    return this.http.post(`${this.apiUrl}/signup`, {\n      email,\n      password,\n      name\n    }).pipe(tap(response => this.handleAuthentication(response)), catchError(error => {\n      this.notificationService.error('Registration failed. Please try again.');\n      return throwError(() => error);\n    }));\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => this.handleAuthentication(response)), catchError(error => {\n      this.notificationService.error('Login failed. Please check your credentials and try again.');\n      return throwError(() => error);\n    }));\n  }\n  register(name, email, password) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      name,\n      email,\n      password\n    }).pipe(tap(response => {\n      this.handleAuthentication(response);\n    }), catchError(error => {\n      let errorMessage = 'Registration failed';\n      if (error.error && error.error.message) {\n        errorMessage = error.error.message;\n      }\n      this.notificationService.showError(errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  logout() {\n    this.userSubject.next(null);\n    this.storageService.removeItem('userData');\n    this.storageService.removeItem('token');\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n  autoLogin() {\n    const userData = this.storageService.getItem('userData');\n    if (!userData) {\n      return of(false);\n    }\n    try {\n      const loadedUser = userData.user;\n      const tokenExpirationDate = new Date(userData.tokenExpirationDate);\n      if (tokenExpirationDate <= new Date()) {\n        this.logout();\n        return of(false);\n      }\n      this.userSubject.next(loadedUser);\n      this.setAutoLogoutTimer(tokenExpirationDate.getTime() - new Date().getTime());\n      return of(true);\n    } catch (error) {\n      console.error('Error parsing user data', error);\n      this.logout();\n      return of(false);\n    }\n  }\n  getCurrentUser() {\n    return this.user$;\n  }\n  getToken() {\n    const userData = this.storageService.getItem('userData');\n    if (!userData) {\n      return null;\n    }\n    try {\n      const parsedData = JSON.parse(userData);\n      return parsedData.token;\n    } catch (error) {\n      console.error('Error parsing user data', error);\n      return null;\n    }\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  handleAuthentication(response) {\n    const {\n      user,\n      token,\n      expiresIn\n    } = response;\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const userData = {\n      user,\n      token,\n      tokenExpirationDate: expirationDate.toISOString()\n    };\n    this.storageService.setItem('userData', JSON.stringify(userData));\n    this.userSubject.next(user);\n    this.setAutoLogoutTimer(expiresIn * 1000);\n  }\n  setAutoLogoutTimer(expirationDuration) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService), i0.ɵɵinject(i3.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["of","throwError","BehaviorSubject","catchError","tap","environment","AuthService","constructor","http","storageService","notificationService","apiUrl","userSubject","user$","asObservable","autoLogin","signup","email","password","name","post","pipe","response","handleAuthentication","error","login","register","errorMessage","message","showError","Error","logout","next","removeItem","tokenExpirationTimer","clearTimeout","userData","getItem","loadedUser","user","tokenExpirationDate","Date","setAutoLogoutTimer","getTime","console","getCurrentUser","getToken","parsedData","JSON","parse","token","isAuthenticated","expiresIn","expirationDate","toISOString","setItem","stringify","expirationDuration","setTimeout","i0","ɵɵinject","i1","HttpClient","i2","StorageService","i3","NotificationService","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\n\nimport { environment } from '../../../environments/environment';\nimport { StorageService } from './storage.service';\nimport { NotificationService } from './notification.service';\nimport { User } from '../models/user.model';\n\nexport interface AuthResponse {\n  user: User;\n  token: string;\n  expiresIn: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private tokenExpirationTimer: any;\n  private userSubject = new BehaviorSubject<User | null>(null);\n\n  user$ = this.userSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService,\n    private notificationService: NotificationService\n  ) {\n    this.autoLogin();\n  }\n\n  signup(email: string, password: string, name: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/signup`, { email, password, name })\n      .pipe(\n        tap(response => this.handleAuthentication(response)),\n        catchError(error => {\n          this.notificationService.error('Registration failed. Please try again.');\n          return throwError(() => error);\n        })\n      );\n  }\n\n  login(email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, { email, password })\n      .pipe(\n        tap(response => this.handleAuthentication(response)),\n        catchError(error => {\n          this.notificationService.error('Login failed. Please check your credentials and try again.');\n          return throwError(() => error);\n        })\n      );\n  }\n\n  register(name: string, email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, {\n      name,\n      email,\n      password\n    }).pipe(\n      tap(response => {\n        this.handleAuthentication(response);\n      }),\n      catchError(error => {\n        let errorMessage = 'Registration failed';\n        if (error.error && error.error.message) {\n          errorMessage = error.error.message;\n        }\n        this.notificationService.showError(errorMessage);\n        return throwError(() => new Error(errorMessage));\n      })\n    );\n  }\n\n  logout(): void {\n    this.userSubject.next(null);\n    this.storageService.removeItem('userData');\n    this.storageService.removeItem('token');\n    \n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n\n  autoLogin(): Observable<boolean> {\n    const userData = this.storageService.getItem<any>('userData');\n    if (!userData) {\n      return of(false);\n    }\n\n    try {\n      const loadedUser = userData.user;\n      const tokenExpirationDate = new Date(userData.tokenExpirationDate);\n\n      if (tokenExpirationDate <= new Date()) {\n        this.logout();\n        return of(false);\n      }\n\n      this.userSubject.next(loadedUser);\n      this.setAutoLogoutTimer(tokenExpirationDate.getTime() - new Date().getTime());\n      return of(true);\n    } catch (error) {\n      console.error('Error parsing user data', error);\n      this.logout();\n      return of(false);\n    }\n  }\n\n  getCurrentUser(): Observable<User | null> {\n    return this.user$;\n  }\n\n  getToken(): string | null {\n    const userData = this.storageService.getItem('userData');\n    \n    if (!userData) {\n      return null;\n    }\n    \n    try {\n      const parsedData = JSON.parse(userData);\n      return parsedData.token;\n    } catch (error) {\n      console.error('Error parsing user data', error);\n      return null;\n    }\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  private handleAuthentication(response: AuthResponse): void {\n    const { user, token, expiresIn } = response;\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    \n    const userData = {\n      user,\n      token,\n      tokenExpirationDate: expirationDate.toISOString()\n    };\n    \n    this.storageService.setItem('userData', JSON.stringify(userData));\n    this.userSubject.next(user);\n    this.setAutoLogoutTimer(expiresIn * 1000);\n  }\n\n  private setAutoLogoutTimer(expirationDuration: number): void {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}