{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"./storage.service\";\nimport * as i4 from \"./notification.service\";\nclass CartService {\n  constructor(http, authService, storageService, notificationService) {\n    this.http = http;\n    this.authService = authService;\n    this.storageService = storageService;\n    this.notificationService = notificationService;\n    this.apiUrl = `${environment.apiUrl}/cart`;\n    this.cartSubject = new BehaviorSubject(null);\n    this.cart$ = this.cartSubject.asObservable();\n    this.initCart();\n  }\n  initCart() {\n    // If user is logged in, get cart from API, otherwise from localStorage\n    if (this.authService.isAuthenticated()) {\n      this.getCartFromApi().subscribe();\n    } else {\n      const savedCart = this.storageService.getItem('cart');\n      if (savedCart) {\n        this.cartSubject.next(savedCart);\n      } else {\n        this.createEmptyCart();\n      }\n    }\n  }\n  getCartFromApi() {\n    return this.http.get(this.apiUrl).pipe(tap(cart => this.cartSubject.next(cart)), catchError(error => {\n      this.notificationService.error('Failed to load your cart. Please try again.');\n      return throwError(() => error);\n    }));\n  }\n  addItem(request) {\n    if (this.authService.isAuthenticated()) {\n      return this.http.post(`${this.apiUrl}/items`, request).pipe(tap(cart => {\n        this.cartSubject.next(cart);\n        this.notificationService.success('Item added to cart');\n      }), catchError(error => {\n        this.notificationService.error('Failed to add item to cart. Please try again.');\n        return throwError(() => error);\n      }));\n    } else {\n      // Handle guest cart in local storage\n      return this.addItemToLocalCart(request);\n    }\n  }\n  updateItem(request) {\n    if (this.authService.isAuthenticated()) {\n      return this.http.put(`${this.apiUrl}/items/${request.itemId}`, {\n        quantity: request.quantity\n      }).pipe(tap(cart => {\n        this.cartSubject.next(cart);\n        this.notificationService.success('Cart updated');\n      }), catchError(error => {\n        this.notificationService.error('Failed to update cart. Please try again.');\n        return throwError(() => error);\n      }));\n    } else {\n      // Handle guest cart in local storage\n      return this.updateItemInLocalCart(request);\n    }\n  }\n  removeItem(itemId) {\n    if (this.authService.isAuthenticated()) {\n      return this.http.delete(`${this.apiUrl}/items/${itemId}`).pipe(tap(cart => {\n        this.cartSubject.next(cart);\n        this.notificationService.success('Item removed from cart');\n      }), catchError(error => {\n        this.notificationService.error('Failed to remove item from cart. Please try again.');\n        return throwError(() => error);\n      }));\n    } else {\n      // Handle guest cart in local storage\n      return this.removeItemFromLocalCart(itemId);\n    }\n  }\n  clearCart() {\n    if (this.authService.isAuthenticated()) {\n      return this.http.delete(this.apiUrl).pipe(tap(cart => {\n        this.cartSubject.next(cart);\n        this.notificationService.success('Cart cleared');\n      }), catchError(error => {\n        this.notificationService.error('Failed to clear cart. Please try again.');\n        return throwError(() => error);\n      }));\n    } else {\n      // Handle guest cart in local storage\n      return this.clearLocalCart();\n    }\n  }\n  syncLocalCartToServer() {\n    const localCart = this.cartSubject.value;\n    if (!localCart || localCart.items.length === 0) {\n      return this.getCartFromApi();\n    }\n    // Send all local cart items to the server\n    const items = localCart.items.map(item => ({\n      productId: item.productId,\n      quantity: item.quantity\n    }));\n    return this.http.post(`${this.apiUrl}/sync`, {\n      items\n    }).pipe(tap(cart => {\n      this.cartSubject.next(cart);\n      this.storageService.removeItem('cart');\n    }), catchError(error => {\n      this.notificationService.error('Failed to sync your cart. Please try again.');\n      return throwError(() => error);\n    }));\n  }\n  createEmptyCart() {\n    const emptyCart = {\n      id: `local-${new Date().getTime()}`,\n      items: [],\n      itemCount: 0,\n      subtotal: 0,\n      discount: 0,\n      total: 0,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    this.cartSubject.next(emptyCart);\n    this.storageService.setItem('cart', emptyCart);\n  }\n  addItemToLocalCart(request) {\n    let cart = this.cartSubject.value;\n    if (!cart) {\n      this.createEmptyCart();\n      cart = this.cartSubject.value;\n    }\n    if (!cart) {\n      return throwError(() => new Error('Failed to initialize cart'));\n    }\n    // Check if the item already exists in the cart\n    const existingItemIndex = cart.items.findIndex(item => item.productId === request.productId);\n    if (existingItemIndex >= 0) {\n      // Update quantity if item already exists\n      const updatedItems = [...cart.items];\n      updatedItems[existingItemIndex] = {\n        ...updatedItems[existingItemIndex],\n        quantity: updatedItems[existingItemIndex].quantity + request.quantity\n      };\n      return this.updateLocalCart({\n        ...cart,\n        items: updatedItems\n      });\n    } else {\n      // Add new item\n      const newItem = {\n        id: `local-item-${new Date().getTime()}`,\n        productId: request.productId,\n        quantity: request.quantity\n      };\n      return this.updateLocalCart({\n        ...cart,\n        items: [...cart.items, newItem]\n      });\n    }\n  }\n  updateItemInLocalCart(request) {\n    const cart = this.cartSubject.value;\n    if (!cart) {\n      return throwError(() => new Error('Cart not initialized'));\n    }\n    const itemIndex = cart.items.findIndex(item => item.id === request.itemId);\n    if (itemIndex < 0) {\n      return throwError(() => new Error('Item not found in cart'));\n    }\n    const updatedItems = [...cart.items];\n    if (request.quantity <= 0) {\n      // Remove the item if quantity is 0 or less\n      updatedItems.splice(itemIndex, 1);\n    } else {\n      // Update the quantity\n      updatedItems[itemIndex] = {\n        ...updatedItems[itemIndex],\n        quantity: request.quantity\n      };\n    }\n    return this.updateLocalCart({\n      ...cart,\n      items: updatedItems\n    });\n  }\n  removeItemFromLocalCart(itemId) {\n    const cart = this.cartSubject.value;\n    if (!cart) {\n      return throwError(() => new Error('Cart not initialized'));\n    }\n    const updatedItems = cart.items.filter(item => item.id !== itemId);\n    return this.updateLocalCart({\n      ...cart,\n      items: updatedItems\n    });\n  }\n  clearLocalCart() {\n    this.createEmptyCart();\n    return this.cart$;\n  }\n  updateLocalCart(cart) {\n    // Recalculate totals (in a real app, we would probably fetch product details first)\n    const updatedCart = {\n      ...cart,\n      itemCount: cart.items.reduce((count, item) => count + item.quantity, 0),\n      updatedAt: new Date().toISOString()\n    };\n    this.cartSubject.next(updatedCart);\n    this.storageService.setItem('cart', updatedCart);\n    this.notificationService.success('Cart updated');\n    return this.cart$.pipe(map(currentCart => {\n      if (!currentCart) {\n        throw new Error('Cart not available');\n      }\n      return currentCart;\n    }));\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.StorageService), i0.ɵɵinject(i4.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { CartService };","map":{"version":3,"names":["BehaviorSubject","throwError","map","catchError","tap","environment","CartService","constructor","http","authService","storageService","notificationService","apiUrl","cartSubject","cart$","asObservable","initCart","isAuthenticated","getCartFromApi","subscribe","savedCart","getItem","next","createEmptyCart","get","pipe","cart","error","addItem","request","post","success","addItemToLocalCart","updateItem","put","itemId","quantity","updateItemInLocalCart","removeItem","delete","removeItemFromLocalCart","clearCart","clearLocalCart","syncLocalCartToServer","localCart","value","items","length","item","productId","emptyCart","id","Date","getTime","itemCount","subtotal","discount","total","createdAt","toISOString","updatedAt","setItem","Error","existingItemIndex","findIndex","updatedItems","updateLocalCart","newItem","itemIndex","splice","filter","updatedCart","reduce","count","currentCart","i0","ɵɵinject","i1","HttpClient","i2","AuthService","i3","StorageService","i4","NotificationService","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\nimport { environment } from '../../../environments/environment';\nimport { Cart, CartItem, CartAddItemRequest, CartUpdateItemRequest } from '../models/cart.model';\nimport { NotificationService } from './notification.service';\nimport { StorageService } from './storage.service';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private apiUrl = `${environment.apiUrl}/cart`;\n  private cartSubject = new BehaviorSubject<Cart | null>(null);\n  \n  cart$ = this.cartSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService,\n    private storageService: StorageService,\n    private notificationService: NotificationService\n  ) {\n    this.initCart();\n  }\n\n  private initCart(): void {\n    // If user is logged in, get cart from API, otherwise from localStorage\n    if (this.authService.isAuthenticated()) {\n      this.getCartFromApi().subscribe();\n    } else {\n      const savedCart = this.storageService.getItem<Cart>('cart');\n      if (savedCart) {\n        this.cartSubject.next(savedCart);\n      } else {\n        this.createEmptyCart();\n      }\n    }\n  }\n\n  getCartFromApi(): Observable<Cart> {\n    return this.http.get<Cart>(this.apiUrl).pipe(\n      tap(cart => this.cartSubject.next(cart)),\n      catchError(error => {\n        this.notificationService.error('Failed to load your cart. Please try again.');\n        return throwError(() => error);\n      })\n    );\n  }\n\n  addItem(request: CartAddItemRequest): Observable<Cart> {\n    if (this.authService.isAuthenticated()) {\n      return this.http.post<Cart>(`${this.apiUrl}/items`, request).pipe(\n        tap(cart => {\n          this.cartSubject.next(cart);\n          this.notificationService.success('Item added to cart');\n        }),\n        catchError(error => {\n          this.notificationService.error('Failed to add item to cart. Please try again.');\n          return throwError(() => error);\n        })\n      );\n    } else {\n      // Handle guest cart in local storage\n      return this.addItemToLocalCart(request);\n    }\n  }\n\n  updateItem(request: CartUpdateItemRequest): Observable<Cart> {\n    if (this.authService.isAuthenticated()) {\n      return this.http.put<Cart>(`${this.apiUrl}/items/${request.itemId}`, { quantity: request.quantity }).pipe(\n        tap(cart => {\n          this.cartSubject.next(cart);\n          this.notificationService.success('Cart updated');\n        }),\n        catchError(error => {\n          this.notificationService.error('Failed to update cart. Please try again.');\n          return throwError(() => error);\n        })\n      );\n    } else {\n      // Handle guest cart in local storage\n      return this.updateItemInLocalCart(request);\n    }\n  }\n\n  removeItem(itemId: string): Observable<Cart> {\n    if (this.authService.isAuthenticated()) {\n      return this.http.delete<Cart>(`${this.apiUrl}/items/${itemId}`).pipe(\n        tap(cart => {\n          this.cartSubject.next(cart);\n          this.notificationService.success('Item removed from cart');\n        }),\n        catchError(error => {\n          this.notificationService.error('Failed to remove item from cart. Please try again.');\n          return throwError(() => error);\n        })\n      );\n    } else {\n      // Handle guest cart in local storage\n      return this.removeItemFromLocalCart(itemId);\n    }\n  }\n\n  clearCart(): Observable<Cart> {\n    if (this.authService.isAuthenticated()) {\n      return this.http.delete<Cart>(this.apiUrl).pipe(\n        tap(cart => {\n          this.cartSubject.next(cart);\n          this.notificationService.success('Cart cleared');\n        }),\n        catchError(error => {\n          this.notificationService.error('Failed to clear cart. Please try again.');\n          return throwError(() => error);\n        })\n      );\n    } else {\n      // Handle guest cart in local storage\n      return this.clearLocalCart();\n    }\n  }\n\n  syncLocalCartToServer(): Observable<Cart> {\n    const localCart = this.cartSubject.value;\n    \n    if (!localCart || localCart.items.length === 0) {\n      return this.getCartFromApi();\n    }\n\n    // Send all local cart items to the server\n    const items = localCart.items.map(item => ({\n      productId: item.productId,\n      quantity: item.quantity\n    }));\n\n    return this.http.post<Cart>(`${this.apiUrl}/sync`, { items }).pipe(\n      tap(cart => {\n        this.cartSubject.next(cart);\n        this.storageService.removeItem('cart');\n      }),\n      catchError(error => {\n        this.notificationService.error('Failed to sync your cart. Please try again.');\n        return throwError(() => error);\n      })\n    );\n  }\n\n  private createEmptyCart(): void {\n    const emptyCart: Cart = {\n      id: `local-${new Date().getTime()}`,\n      items: [],\n      itemCount: 0,\n      subtotal: 0,\n      discount: 0,\n      total: 0,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    this.cartSubject.next(emptyCart);\n    this.storageService.setItem('cart', emptyCart);\n  }\n\n  private addItemToLocalCart(request: CartAddItemRequest): Observable<Cart> {\n    let cart = this.cartSubject.value;\n    \n    if (!cart) {\n      this.createEmptyCart();\n      cart = this.cartSubject.value;\n    }\n    \n    if (!cart) {\n      return throwError(() => new Error('Failed to initialize cart'));\n    }\n\n    // Check if the item already exists in the cart\n    const existingItemIndex = cart.items.findIndex(item => item.productId === request.productId);\n    \n    if (existingItemIndex >= 0) {\n      // Update quantity if item already exists\n      const updatedItems = [...cart.items];\n      updatedItems[existingItemIndex] = {\n        ...updatedItems[existingItemIndex],\n        quantity: updatedItems[existingItemIndex].quantity + request.quantity\n      };\n      \n      return this.updateLocalCart({\n        ...cart,\n        items: updatedItems\n      });\n    } else {\n      // Add new item\n      const newItem: CartItem = {\n        id: `local-item-${new Date().getTime()}`,\n        productId: request.productId,\n        quantity: request.quantity\n      };\n      \n      return this.updateLocalCart({\n        ...cart,\n        items: [...cart.items, newItem]\n      });\n    }\n  }\n\n  private updateItemInLocalCart(request: CartUpdateItemRequest): Observable<Cart> {\n    const cart = this.cartSubject.value;\n    \n    if (!cart) {\n      return throwError(() => new Error('Cart not initialized'));\n    }\n    \n    const itemIndex = cart.items.findIndex(item => item.id === request.itemId);\n    \n    if (itemIndex < 0) {\n      return throwError(() => new Error('Item not found in cart'));\n    }\n    \n    const updatedItems = [...cart.items];\n    \n    if (request.quantity <= 0) {\n      // Remove the item if quantity is 0 or less\n      updatedItems.splice(itemIndex, 1);\n    } else {\n      // Update the quantity\n      updatedItems[itemIndex] = {\n        ...updatedItems[itemIndex],\n        quantity: request.quantity\n      };\n    }\n    \n    return this.updateLocalCart({\n      ...cart,\n      items: updatedItems\n    });\n  }\n\n  private removeItemFromLocalCart(itemId: string): Observable<Cart> {\n    const cart = this.cartSubject.value;\n    \n    if (!cart) {\n      return throwError(() => new Error('Cart not initialized'));\n    }\n    \n    const updatedItems = cart.items.filter(item => item.id !== itemId);\n    \n    return this.updateLocalCart({\n      ...cart,\n      items: updatedItems\n    });\n  }\n\n  private clearLocalCart(): Observable<Cart> {\n    this.createEmptyCart();\n    return this.cart$;\n  }\n\n  private updateLocalCart(cart: Cart): Observable<Cart> {\n    // Recalculate totals (in a real app, we would probably fetch product details first)\n    const updatedCart: Cart = {\n      ...cart,\n      itemCount: cart.items.reduce((count, item) => count + item.quantity, 0),\n      updatedAt: new Date().toISOString()\n    };\n    \n    this.cartSubject.next(updatedCart);\n    this.storageService.setItem('cart', updatedCart);\n    this.notificationService.success('Cart updated');\n    \n    return this.cart$.pipe(\n      map(currentCart => {\n        if (!currentCart) {\n          throw new Error('Cart not available');\n        }\n        return currentCart;\n      })\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}