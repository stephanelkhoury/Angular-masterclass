{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass StorageService {\n  constructor() {\n    this.prefix = 'angular-ecommerce_';\n  }\n  setItem(key, value) {\n    const storageKey = this.prefix + key;\n    localStorage.setItem(storageKey, JSON.stringify(value));\n  }\n  getItem(key) {\n    const storageKey = this.prefix + key;\n    const item = localStorage.getItem(storageKey);\n    if (!item) {\n      return null;\n    }\n    try {\n      return JSON.parse(item);\n    } catch (error) {\n      console.error(`Error parsing stored item with key ${key}:`, error);\n      return null;\n    }\n  }\n  removeItem(key) {\n    const storageKey = this.prefix + key;\n    localStorage.removeItem(storageKey);\n  }\n  clear() {\n    // Only clear items with our prefix\n    Object.keys(localStorage).filter(key => key.startsWith(this.prefix)).forEach(key => localStorage.removeItem(key));\n  }\n  static {\n    this.ɵfac = function StorageService_Factory(t) {\n      return new (t || StorageService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: StorageService,\n      factory: StorageService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { StorageService };","map":{"version":3,"names":["StorageService","constructor","prefix","setItem","key","value","storageKey","localStorage","JSON","stringify","getItem","item","parse","error","console","removeItem","clear","Object","keys","filter","startsWith","forEach","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/storage.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n  private prefix = 'angular-ecommerce_';\n\n  constructor() {}\n\n  setItem<T>(key: string, value: T): void {\n    const storageKey = this.prefix + key;\n    localStorage.setItem(storageKey, JSON.stringify(value));\n  }\n\n  getItem<T>(key: string): T | null {\n    const storageKey = this.prefix + key;\n    const item = localStorage.getItem(storageKey);\n    \n    if (!item) {\n      return null;\n    }\n    \n    try {\n      return JSON.parse(item) as T;\n    } catch (error) {\n      console.error(`Error parsing stored item with key ${key}:`, error);\n      return null;\n    }\n  }\n\n  removeItem(key: string): void {\n    const storageKey = this.prefix + key;\n    localStorage.removeItem(storageKey);\n  }\n\n  clear(): void {\n    // Only clear items with our prefix\n    Object.keys(localStorage)\n      .filter(key => key.startsWith(this.prefix))\n      .forEach(key => localStorage.removeItem(key));\n  }\n}\n"],"mappings":";AAEA,MAGaA,cAAc;EAGzBC,YAAA;IAFQ,KAAAC,MAAM,GAAG,oBAAoB;EAEtB;EAEfC,OAAOA,CAAIC,GAAW,EAAEC,KAAQ;IAC9B,MAAMC,UAAU,GAAG,IAAI,CAACJ,MAAM,GAAGE,GAAG;IACpCG,YAAY,CAACJ,OAAO,CAACG,UAAU,EAAEE,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;EACzD;EAEAK,OAAOA,CAAIN,GAAW;IACpB,MAAME,UAAU,GAAG,IAAI,CAACJ,MAAM,GAAGE,GAAG;IACpC,MAAMO,IAAI,GAAGJ,YAAY,CAACG,OAAO,CAACJ,UAAU,CAAC;IAE7C,IAAI,CAACK,IAAI,EAAE;MACT,OAAO,IAAI;;IAGb,IAAI;MACF,OAAOH,IAAI,CAACI,KAAK,CAACD,IAAI,CAAM;KAC7B,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sCAAsCT,GAAG,GAAG,EAAES,KAAK,CAAC;MAClE,OAAO,IAAI;;EAEf;EAEAE,UAAUA,CAACX,GAAW;IACpB,MAAME,UAAU,GAAG,IAAI,CAACJ,MAAM,GAAGE,GAAG;IACpCG,YAAY,CAACQ,UAAU,CAACT,UAAU,CAAC;EACrC;EAEAU,KAAKA,CAAA;IACH;IACAC,MAAM,CAACC,IAAI,CAACX,YAAY,CAAC,CACtBY,MAAM,CAACf,GAAG,IAAIA,GAAG,CAACgB,UAAU,CAAC,IAAI,CAAClB,MAAM,CAAC,CAAC,CAC1CmB,OAAO,CAACjB,GAAG,IAAIG,YAAY,CAACQ,UAAU,CAACX,GAAG,CAAC,CAAC;EACjD;;;uBApCWJ,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAsB,OAAA,EAAdtB,cAAc,CAAAuB,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;SAEPxB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}