{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nclass CacheInterceptor {\n  constructor() {\n    this.cache = new Map();\n    this.CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds\n  }\n\n  intercept(request, next) {\n    // Only cache GET requests\n    if (request.method !== 'GET') {\n      return next.handle(request);\n    }\n    // Don't cache requests with 'no-cache' header\n    if (request.headers.get('no-cache')) {\n      return next.handle(request);\n    }\n    // Don't cache authentication requests\n    if (request.url.includes('/auth/')) {\n      return next.handle(request);\n    }\n    // Create a cache key from the request URL\n    const cacheKey = request.url;\n    // Check if we have a cached response and it's still valid\n    const cachedEntry = this.cache.get(cacheKey);\n    if (cachedEntry) {\n      const now = Date.now();\n      if (now - cachedEntry.timestamp < this.CACHE_DURATION) {\n        // Return the cached response\n        return of(cachedEntry.response);\n      } else {\n        // Cache expired, remove it\n        this.cache.delete(cacheKey);\n      }\n    }\n    // No cache hit or expired cache, forward the request\n    return next.handle(request).pipe(tap(event => {\n      if (event instanceof HttpResponse) {\n        // Cache the response\n        this.cache.set(cacheKey, {\n          response: event,\n          timestamp: Date.now()\n        });\n      }\n    }),\n    // Use shareReplay to handle multiple subscribers requesting the same API\n    shareReplay(1));\n  }\n  // Method to clear the cache\n  clearCache() {\n    this.cache.clear();\n  }\n  // Method to remove a specific entry from the cache\n  removeFromCache(url) {\n    this.cache.delete(url);\n  }\n  static {\n    this.ɵfac = function CacheInterceptor_Factory(t) {\n      return new (t || CacheInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CacheInterceptor,\n      factory: CacheInterceptor.ɵfac\n    });\n  }\n}\nexport { CacheInterceptor };","map":{"version":3,"names":["HttpResponse","of","tap","shareReplay","CacheInterceptor","constructor","cache","Map","CACHE_DURATION","intercept","request","next","method","handle","headers","get","url","includes","cacheKey","cachedEntry","now","Date","timestamp","response","delete","pipe","event","set","clearCache","clear","removeFromCache","factory","ɵfac"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/interceptors/cache.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse\n} from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { tap, shareReplay } from 'rxjs/operators';\n\ninterface CacheEntry {\n  response: HttpResponse<any>;\n  timestamp: number;\n}\n\n@Injectable()\nexport class CacheInterceptor implements HttpInterceptor {\n  private cache = new Map<string, CacheEntry>();\n  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds\n  \n  constructor() {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    // Only cache GET requests\n    if (request.method !== 'GET') {\n      return next.handle(request);\n    }\n    \n    // Don't cache requests with 'no-cache' header\n    if (request.headers.get('no-cache')) {\n      return next.handle(request);\n    }\n    \n    // Don't cache authentication requests\n    if (request.url.includes('/auth/')) {\n      return next.handle(request);\n    }\n    \n    // Create a cache key from the request URL\n    const cacheKey = request.url;\n    \n    // Check if we have a cached response and it's still valid\n    const cachedEntry = this.cache.get(cacheKey);\n    if (cachedEntry) {\n      const now = Date.now();\n      if (now - cachedEntry.timestamp < this.CACHE_DURATION) {\n        // Return the cached response\n        return of(cachedEntry.response);\n      } else {\n        // Cache expired, remove it\n        this.cache.delete(cacheKey);\n      }\n    }\n    \n    // No cache hit or expired cache, forward the request\n    return next.handle(request).pipe(\n      tap(event => {\n        if (event instanceof HttpResponse) {\n          // Cache the response\n          this.cache.set(cacheKey, {\n            response: event,\n            timestamp: Date.now()\n          });\n        }\n      }),\n      // Use shareReplay to handle multiple subscribers requesting the same API\n      shareReplay(1)\n    );\n  }\n  \n  // Method to clear the cache\n  clearCache(): void {\n    this.cache.clear();\n  }\n  \n  // Method to remove a specific entry from the cache\n  removeFromCache(url: string): void {\n    this.cache.delete(url);\n  }\n}"],"mappings":"AACA,SAKEA,YAAY,QACP,sBAAsB;AAC7B,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,EAAEC,WAAW,QAAQ,gBAAgB;;AAOjD,MACaC,gBAAgB;EAI3BC,YAAA;IAHQ,KAAAC,KAAK,GAAG,IAAIC,GAAG,EAAsB;IAC5B,KAAAC,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;EAElC;;EAEfC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,IAAID,OAAO,CAACE,MAAM,KAAK,KAAK,EAAE;MAC5B,OAAOD,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC;;IAG7B;IACA,IAAIA,OAAO,CAACI,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC,EAAE;MACnC,OAAOJ,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC;;IAG7B;IACA,IAAIA,OAAO,CAACM,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAClC,OAAON,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC;;IAG7B;IACA,MAAMQ,QAAQ,GAAGR,OAAO,CAACM,GAAG;IAE5B;IACA,MAAMG,WAAW,GAAG,IAAI,CAACb,KAAK,CAACS,GAAG,CAACG,QAAQ,CAAC;IAC5C,IAAIC,WAAW,EAAE;MACf,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,EAAE;MACtB,IAAIA,GAAG,GAAGD,WAAW,CAACG,SAAS,GAAG,IAAI,CAACd,cAAc,EAAE;QACrD;QACA,OAAOP,EAAE,CAACkB,WAAW,CAACI,QAAQ,CAAC;OAChC,MAAM;QACL;QACA,IAAI,CAACjB,KAAK,CAACkB,MAAM,CAACN,QAAQ,CAAC;;;IAI/B;IACA,OAAOP,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC,CAACe,IAAI,CAC9BvB,GAAG,CAACwB,KAAK,IAAG;MACV,IAAIA,KAAK,YAAY1B,YAAY,EAAE;QACjC;QACA,IAAI,CAACM,KAAK,CAACqB,GAAG,CAACT,QAAQ,EAAE;UACvBK,QAAQ,EAAEG,KAAK;UACfJ,SAAS,EAAED,IAAI,CAACD,GAAG;SACpB,CAAC;;IAEN,CAAC,CAAC;IACF;IACAjB,WAAW,CAAC,CAAC,CAAC,CACf;EACH;EAEA;EACAyB,UAAUA,CAAA;IACR,IAAI,CAACtB,KAAK,CAACuB,KAAK,EAAE;EACpB;EAEA;EACAC,eAAeA,CAACd,GAAW;IACzB,IAAI,CAACV,KAAK,CAACkB,MAAM,CAACR,GAAG,CAAC;EACxB;;;uBA9DWZ,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAA2B,OAAA,EAAhB3B,gBAAgB,CAAA4B;IAAA;EAAA;;SAAhB5B,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}