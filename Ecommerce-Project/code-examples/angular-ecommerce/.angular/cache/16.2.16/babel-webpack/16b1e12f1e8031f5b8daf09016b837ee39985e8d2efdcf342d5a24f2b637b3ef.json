{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, catchError, exhaustMap, tap, withLatestFrom } from 'rxjs/operators';\nimport * as CartActions from '../actions/cart.actions';\nimport { selectCartItems } from '../selectors/cart.selectors';\nimport { selectIsAuthenticated } from '../selectors/auth.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/cart.service\";\nimport * as i3 from \"../../core/services/storage.service\";\nimport * as i4 from \"../../core/services/notification.service\";\nimport * as i5 from \"@ngrx/store\";\nclass CartEffects {\n  constructor(actions$, cartService, storageService, notificationService, store) {\n    this.actions$ = actions$;\n    this.cartService = cartService;\n    this.storageService = storageService;\n    this.notificationService = notificationService;\n    this.store = store;\n    this.loadCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.loadCart), withLatestFrom(this.store.select(selectIsAuthenticated)), exhaustMap(([_, isAuthenticated]) => {\n      if (isAuthenticated) {\n        return this.cartService.getCart().pipe(map(items => CartActions.loadCartSuccess({\n          items\n        })), catchError(error => of(CartActions.loadCartFailure({\n          error\n        }))));\n      } else {\n        const localCart = this.storageService.getItem('cart') || '[]';\n        try {\n          const items = JSON.parse(localCart);\n          return of(CartActions.loadCartSuccess({\n            items\n          }));\n        } catch (error) {\n          return of(CartActions.loadCartFailure({\n            error: 'Failed to parse cart data'\n          }));\n        }\n      }\n    })));\n    this.addToCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.addToCart), withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)), tap(([{\n      product,\n      quantity\n    }, _, __]) => {\n      this.notificationService.showSuccess(`${product.name} added to cart`);\n    }), exhaustMap(([{\n      product,\n      quantity\n    }, currentItems, isAuthenticated]) => {\n      const cartItem = {\n        productId: product.id,\n        name: product.name,\n        price: product.price,\n        image: product.imageUrl || '',\n        quantity\n      };\n      const updatedItems = [...currentItems];\n      const existingItemIndex = updatedItems.findIndex(item => item.productId === product.id);\n      if (existingItemIndex >= 0) {\n        updatedItems[existingItemIndex] = {\n          ...updatedItems[existingItemIndex],\n          quantity: updatedItems[existingItemIndex].quantity + quantity\n        };\n      } else {\n        updatedItems.push(cartItem);\n      }\n      this.storageService.setItem('cart', JSON.stringify(updatedItems));\n      if (isAuthenticated) {\n        return this.cartService.syncCart(updatedItems).pipe(map(() => CartActions.syncCartWithServerSuccess()), catchError(error => of(CartActions.syncCartWithServerFailure({\n          error\n        }))));\n      }\n      return of(CartActions.syncCartWithServerSuccess());\n    })));\n    this.removeFromCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.removeFromCart), withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)), tap(([{\n      productId\n    }, currentItems, _]) => {\n      const item = currentItems.find(item => item.productId === productId);\n      if (item) {\n        this.notificationService.showInfo(`${item.name} removed from cart`);\n      }\n    }), exhaustMap(([{\n      productId\n    }, currentItems, isAuthenticated]) => {\n      const updatedItems = currentItems.filter(item => item.productId !== productId);\n      this.storageService.setItem('cart', JSON.stringify(updatedItems));\n      if (isAuthenticated) {\n        return this.cartService.syncCart(updatedItems).pipe(map(() => CartActions.syncCartWithServerSuccess()), catchError(error => of(CartActions.syncCartWithServerFailure({\n          error\n        }))));\n      }\n      return of(CartActions.syncCartWithServerSuccess());\n    })));\n    this.updateCartItemQuantity$ = createEffect(() => this.actions$.pipe(ofType(CartActions.updateCartItemQuantity), withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)), exhaustMap(([{\n      productId,\n      quantity\n    }, currentItems, isAuthenticated]) => {\n      const updatedItems = currentItems.map(item => item.productId === productId ? {\n        ...item,\n        quantity\n      } : item);\n      this.storageService.setItem('cart', JSON.stringify(updatedItems));\n      if (isAuthenticated) {\n        return this.cartService.syncCart(updatedItems).pipe(map(() => CartActions.syncCartWithServerSuccess()), catchError(error => of(CartActions.syncCartWithServerFailure({\n          error\n        }))));\n      }\n      return of(CartActions.syncCartWithServerSuccess());\n    })));\n    this.clearCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.clearCart), withLatestFrom(this.store.select(selectIsAuthenticated)), exhaustMap(([_, isAuthenticated]) => {\n      this.storageService.removeItem('cart');\n      if (isAuthenticated) {\n        return this.cartService.clearCart().pipe(map(() => CartActions.syncCartWithServerSuccess()), catchError(error => of(CartActions.syncCartWithServerFailure({\n          error\n        }))));\n      }\n      return of(CartActions.syncCartWithServerSuccess());\n    })));\n  }\n  static {\n    this.ɵfac = function CartEffects_Factory(t) {\n      return new (t || CartEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.CartService), i0.ɵɵinject(i3.StorageService), i0.ɵɵinject(i4.NotificationService), i0.ɵɵinject(i5.Store));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartEffects,\n      factory: CartEffects.ɵfac\n    });\n  }\n}\nexport { CartEffects };","map":{"version":3,"names":["createEffect","ofType","of","map","catchError","exhaustMap","tap","withLatestFrom","CartActions","selectCartItems","selectIsAuthenticated","CartEffects","constructor","actions$","cartService","storageService","notificationService","store","loadCart$","pipe","loadCart","select","_","isAuthenticated","getCart","items","loadCartSuccess","error","loadCartFailure","localCart","getItem","JSON","parse","addToCart$","addToCart","product","quantity","__","showSuccess","name","currentItems","cartItem","productId","id","price","image","imageUrl","updatedItems","existingItemIndex","findIndex","item","push","setItem","stringify","syncCart","syncCartWithServerSuccess","syncCartWithServerFailure","removeFromCart$","removeFromCart","find","showInfo","filter","updateCartItemQuantity$","updateCartItemQuantity","clearCart$","clearCart","removeItem","i0","ɵɵinject","i1","Actions","i2","CartService","i3","StorageService","i4","NotificationService","i5","Store","factory","ɵfac"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/store/effects/cart.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { map, catchError, exhaustMap, tap, withLatestFrom } from 'rxjs/operators';\n\nimport { CartService } from '../../core/services/cart.service';\nimport { NotificationService } from '../../core/services/notification.service';\nimport { StorageService } from '../../core/services/storage.service';\nimport { CartItem } from '../../core/models/cart.model';\nimport { AppState } from '../index';\nimport * as CartActions from '../actions/cart.actions';\nimport * as UiActions from '../actions/ui.actions';\nimport { selectCartItems } from '../selectors/cart.selectors';\nimport { selectIsAuthenticated } from '../selectors/auth.selectors';\n\n@Injectable()\nexport class CartEffects {\n  loadCart$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.loadCart),\n      withLatestFrom(this.store.select(selectIsAuthenticated)),\n      exhaustMap(([_, isAuthenticated]) => {\n        if (isAuthenticated) {\n          return this.cartService.getCart().pipe(\n            map(items => CartActions.loadCartSuccess({ items })),\n            catchError(error => of(CartActions.loadCartFailure({ error })))\n          );\n        } else {\n          const localCart = this.storageService.getItem<string>('cart') || '[]';\n          try {\n            const items = JSON.parse(localCart);\n            return of(CartActions.loadCartSuccess({ items }));\n          } catch (error) {\n            return of(CartActions.loadCartFailure({ error: 'Failed to parse cart data' }));\n          }\n        }\n      })\n    )\n  );\n\n  addToCart$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.addToCart),\n      withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)),\n      tap(([{ product, quantity }, _, __]) => {\n        this.notificationService.showSuccess(`${product.name} added to cart`);\n      }),\n      exhaustMap(([{ product, quantity }, currentItems, isAuthenticated]) => {\n        const cartItem: CartItem = {\n          productId: product.id,\n          name: product.name,\n          price: product.price,\n          image: product.imageUrl || '',\n          quantity\n        };\n\n        const updatedItems = [...currentItems];\n        const existingItemIndex = updatedItems.findIndex(item => item.productId === product.id);\n\n        if (existingItemIndex >= 0) {\n          updatedItems[existingItemIndex] = {\n            ...updatedItems[existingItemIndex],\n            quantity: updatedItems[existingItemIndex].quantity + quantity\n          };\n        } else {\n          updatedItems.push(cartItem);\n        }\n\n        this.storageService.setItem('cart', JSON.stringify(updatedItems));\n\n        if (isAuthenticated) {\n          return this.cartService.syncCart(updatedItems).pipe(\n            map(() => CartActions.syncCartWithServerSuccess()),\n            catchError(error => of(CartActions.syncCartWithServerFailure({ error })))\n          );\n        }\n        \n        return of(CartActions.syncCartWithServerSuccess());\n      })\n    )\n  );\n\n  removeFromCart$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.removeFromCart),\n      withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)),\n      tap(([{ productId }, currentItems, _]) => {\n        const item = currentItems.find(item => item.productId === productId);\n        if (item) {\n          this.notificationService.showInfo(`${item.name} removed from cart`);\n        }\n      }),\n      exhaustMap(([{ productId }, currentItems, isAuthenticated]) => {\n        const updatedItems = currentItems.filter(item => item.productId !== productId);\n        this.storageService.setItem('cart', JSON.stringify(updatedItems));\n\n        if (isAuthenticated) {\n          return this.cartService.syncCart(updatedItems).pipe(\n            map(() => CartActions.syncCartWithServerSuccess()),\n            catchError(error => of(CartActions.syncCartWithServerFailure({ error })))\n          );\n        }\n        \n        return of(CartActions.syncCartWithServerSuccess());\n      })\n    )\n  );\n\n  updateCartItemQuantity$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.updateCartItemQuantity),\n      withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)),\n      exhaustMap(([{ productId, quantity }, currentItems, isAuthenticated]) => {\n        const updatedItems = currentItems.map(item => \n          item.productId === productId ? { ...item, quantity } : item\n        );\n        \n        this.storageService.setItem('cart', JSON.stringify(updatedItems));\n\n        if (isAuthenticated) {\n          return this.cartService.syncCart(updatedItems).pipe(\n            map(() => CartActions.syncCartWithServerSuccess()),\n            catchError(error => of(CartActions.syncCartWithServerFailure({ error })))\n          );\n        }\n        \n        return of(CartActions.syncCartWithServerSuccess());\n      })\n    )\n  );\n\n  clearCart$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.clearCart),\n      withLatestFrom(this.store.select(selectIsAuthenticated)),\n      exhaustMap(([_, isAuthenticated]) => {\n        this.storageService.removeItem('cart');\n        \n        if (isAuthenticated) {\n          return this.cartService.clearCart().pipe(\n            map(() => CartActions.syncCartWithServerSuccess()),\n            catchError(error => of(CartActions.syncCartWithServerFailure({ error })))\n          );\n        }\n        \n        return of(CartActions.syncCartWithServerSuccess());\n      })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartService: CartService,\n    private storageService: StorageService,\n    private notificationService: NotificationService,\n    private store: Store<AppState>\n  ) {}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}