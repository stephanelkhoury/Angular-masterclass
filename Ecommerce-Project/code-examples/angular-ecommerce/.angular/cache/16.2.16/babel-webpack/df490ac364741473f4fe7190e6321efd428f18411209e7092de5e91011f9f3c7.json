{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./notification.service\";\nclass OrderService {\n  constructor(http, notificationService) {\n    this.http = http;\n    this.notificationService = notificationService;\n    this.apiUrl = `${environment.apiUrl}/orders`;\n  }\n  getOrders(page = 1, limit = 10) {\n    return this.http.get(`${this.apiUrl}?page=${page}&limit=${limit}`).pipe(catchError(error => {\n      this.notificationService.error('Failed to load your orders. Please try again.');\n      return throwError(() => error);\n    }));\n  }\n  getOrderById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      this.notificationService.error('Failed to load order details. Please try again.');\n      return throwError(() => error);\n    }));\n  }\n  createOrder(orderData) {\n    return this.http.post(this.apiUrl, orderData).pipe(tap(() => {\n      this.notificationService.success('Order placed successfully!');\n    }), catchError(error => {\n      this.notificationService.error('Failed to place your order. Please try again.');\n      return throwError(() => error);\n    }));\n  }\n  cancelOrder(orderId, reason) {\n    return this.http.post(`${this.apiUrl}/${orderId}/cancel`, {\n      reason\n    }).pipe(tap(() => {\n      this.notificationService.success('Order cancelled successfully.');\n    }), catchError(error => {\n      this.notificationService.error('Failed to cancel your order. Please try again.');\n      return throwError(() => error);\n    }));\n  }\n  static {\n    this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { OrderService };","map":{"version":3,"names":["throwError","catchError","tap","environment","OrderService","constructor","http","notificationService","apiUrl","getOrders","page","limit","get","pipe","error","getOrderById","id","createOrder","orderData","post","success","cancelOrder","orderId","reason","i0","ɵɵinject","i1","HttpClient","i2","NotificationService","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\nimport { environment } from '../../../environments/environment';\nimport { Order, CreateOrderRequest } from '../models/order.model';\nimport { NotificationService } from './notification.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  private apiUrl = `${environment.apiUrl}/orders`;\n  \n  constructor(\n    private http: HttpClient,\n    private notificationService: NotificationService\n  ) {}\n\n  getOrders(page = 1, limit = 10): Observable<{ orders: Order[], totalCount: number }> {\n    return this.http.get<{ orders: Order[], totalCount: number }>(\n      `${this.apiUrl}?page=${page}&limit=${limit}`\n    ).pipe(\n      catchError(error => {\n        this.notificationService.error('Failed to load your orders. Please try again.');\n        return throwError(() => error);\n      })\n    );\n  }\n\n  getOrderById(id: string): Observable<Order> {\n    return this.http.get<Order>(`${this.apiUrl}/${id}`).pipe(\n      catchError(error => {\n        this.notificationService.error('Failed to load order details. Please try again.');\n        return throwError(() => error);\n      })\n    );\n  }\n\n  createOrder(orderData: CreateOrderRequest): Observable<Order> {\n    return this.http.post<Order>(this.apiUrl, orderData).pipe(\n      tap(() => {\n        this.notificationService.success('Order placed successfully!');\n      }),\n      catchError(error => {\n        this.notificationService.error('Failed to place your order. Please try again.');\n        return throwError(() => error);\n      })\n    );\n  }\n\n  cancelOrder(orderId: string, reason?: string): Observable<Order> {\n    return this.http.post<Order>(\n      `${this.apiUrl}/${orderId}/cancel`,\n      { reason }\n    ).pipe(\n      tap(() => {\n        this.notificationService.success('Order cancelled successfully.');\n      }),\n      catchError(error => {\n        this.notificationService.error('Failed to cancel your order. Please try again.');\n        return throwError(() => error);\n      })\n    );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,mCAAmC;;;;AAI/D,MAGaC,YAAY;EAGvBC,YACUC,IAAgB,EAChBC,mBAAwC;IADxC,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAJrB,KAAAC,MAAM,GAAG,GAAGL,WAAW,CAACK,MAAM,SAAS;EAK5C;EAEHC,SAASA,CAACC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,EAAE;IAC5B,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAClB,GAAG,IAAI,CAACJ,MAAM,SAASE,IAAI,UAAUC,KAAK,EAAE,CAC7C,CAACE,IAAI,CACJZ,UAAU,CAACa,KAAK,IAAG;MACjB,IAAI,CAACP,mBAAmB,CAACO,KAAK,CAAC,+CAA+C,CAAC;MAC/E,OAAOd,UAAU,CAAC,MAAMc,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEAC,YAAYA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACV,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACJ,MAAM,IAAIQ,EAAE,EAAE,CAAC,CAACH,IAAI,CACtDZ,UAAU,CAACa,KAAK,IAAG;MACjB,IAAI,CAACP,mBAAmB,CAACO,KAAK,CAAC,iDAAiD,CAAC;MACjF,OAAOd,UAAU,CAAC,MAAMc,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEAG,WAAWA,CAACC,SAA6B;IACvC,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAQ,IAAI,CAACX,MAAM,EAAEU,SAAS,CAAC,CAACL,IAAI,CACvDX,GAAG,CAAC,MAAK;MACP,IAAI,CAACK,mBAAmB,CAACa,OAAO,CAAC,4BAA4B,CAAC;IAChE,CAAC,CAAC,EACFnB,UAAU,CAACa,KAAK,IAAG;MACjB,IAAI,CAACP,mBAAmB,CAACO,KAAK,CAAC,+CAA+C,CAAC;MAC/E,OAAOd,UAAU,CAAC,MAAMc,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;EAEAO,WAAWA,CAACC,OAAe,EAAEC,MAAe;IAC1C,OAAO,IAAI,CAACjB,IAAI,CAACa,IAAI,CACnB,GAAG,IAAI,CAACX,MAAM,IAAIc,OAAO,SAAS,EAClC;MAAEC;IAAM,CAAE,CACX,CAACV,IAAI,CACJX,GAAG,CAAC,MAAK;MACP,IAAI,CAACK,mBAAmB,CAACa,OAAO,CAAC,+BAA+B,CAAC;IACnE,CAAC,CAAC,EACFnB,UAAU,CAACa,KAAK,IAAG;MACjB,IAAI,CAACP,mBAAmB,CAACO,KAAK,CAAC,gDAAgD,CAAC;MAChF,OAAOd,UAAU,CAAC,MAAMc,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;;uBArDWV,YAAY,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAAZzB,YAAY;MAAA0B,OAAA,EAAZ1B,YAAY,CAAA2B,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA;;SAEP5B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}