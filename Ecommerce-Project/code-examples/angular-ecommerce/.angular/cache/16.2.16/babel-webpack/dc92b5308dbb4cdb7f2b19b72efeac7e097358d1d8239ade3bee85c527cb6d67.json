{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\n// Services\nimport { AuthService } from './services/auth.service';\nimport { ProductService } from './services/product.service';\nimport { CartService } from './services/cart.service';\nimport { OrderService } from './services/order.service';\nimport { NotificationService } from './services/notification.service';\nimport { StorageService } from './services/storage.service';\n// Guards\nimport { AuthGuard } from './guards/auth.guard';\nimport { AdminGuard } from './guards/admin.guard';\nimport * as i0 from \"@angular/core\";\nclass CoreModule {\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('CoreModule has already been loaded. Import this module in the AppModule only.');\n    }\n  }\n  static {\n    this.ɵfac = function CoreModule_Factory(t) {\n      return new (t || CoreModule)(i0.ɵɵinject(CoreModule, 12));\n    };\n  }\n  static {\n    this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: CoreModule\n    });\n  }\n  static {\n    this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [AuthService, ProductService, CartService, OrderService, NotificationService, StorageService, AuthGuard, AdminGuard],\n      imports: [CommonModule, HttpClientModule, RouterModule]\n    });\n  }\n}\nexport { CoreModule };\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(CoreModule, {\n    imports: [CommonModule, HttpClientModule, RouterModule]\n  });\n})();","map":{"version":3,"names":["CommonModule","HttpClientModule","RouterModule","AuthService","ProductService","CartService","OrderService","NotificationService","StorageService","AuthGuard","AdminGuard","CoreModule","constructor","parentModule","Error","i0","ɵɵinject","imports"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/core.module.ts"],"sourcesContent":["import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\n\n// Services\nimport { AuthService } from './services/auth.service';\nimport { ProductService } from './services/product.service';\nimport { CartService } from './services/cart.service';\nimport { OrderService } from './services/order.service';\nimport { NotificationService } from './services/notification.service';\nimport { StorageService } from './services/storage.service';\n\n// Guards\nimport { AuthGuard } from './guards/auth.guard';\nimport { AdminGuard } from './guards/admin.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    RouterModule\n  ],\n  providers: [\n    AuthService,\n    ProductService,\n    CartService,\n    OrderService,\n    NotificationService,\n    StorageService,\n    AuthGuard,\n    AdminGuard\n  ]\n})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    if (parentModule) {\n      throw new Error('CoreModule has already been loaded. Import this module in the AppModule only.');\n    }\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,YAAY,QAAQ,iBAAiB;AAE9C;AACA,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,mBAAmB,QAAQ,iCAAiC;AACrE,SAASC,cAAc,QAAQ,4BAA4B;AAE3D;AACA,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,UAAU,QAAQ,sBAAsB;;AAEjD,MAiBaC,UAAU;EACrBC,YAAoCC,YAAwB;IAC1D,IAAIA,YAAY,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,+EAA+E,CAAC;;EAEpG;;;uBALWH,UAAU,EAAAI,EAAA,CAAAC,QAAA,CAAAL,UAAA;IAAA;EAAA;;;YAAVA;IAAU;EAAA;;;iBAXV,CACTR,WAAW,EACXC,cAAc,EACdC,WAAW,EACXC,YAAY,EACZC,mBAAmB,EACnBC,cAAc,EACdC,SAAS,EACTC,UAAU,CACX;MAAAO,OAAA,GAbCjB,YAAY,EACZC,gBAAgB,EAChBC,YAAY;IAAA;EAAA;;SAaHS,UAAU;;2EAAVA,UAAU;IAAAM,OAAA,GAfnBjB,YAAY,EACZC,gBAAgB,EAChBC,YAAY;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}