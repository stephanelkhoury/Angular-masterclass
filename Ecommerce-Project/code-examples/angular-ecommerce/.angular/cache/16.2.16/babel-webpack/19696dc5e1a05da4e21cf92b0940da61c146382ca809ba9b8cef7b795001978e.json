{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./notification.service\";\nimport * as i3 from \"./mock-data.service\";\nimport * as i4 from \"./fake-store-api.service\";\nclass ProductService {\n  // This local mockProducts is likely not used if mockDataService is primary for mocks.\n  // private mockProducts: Product[] = [ ... ]; \n  constructor(http, notificationService, mockDataService, fakeStoreApiService) {\n    this.http = http;\n    this.notificationService = notificationService;\n    this.mockDataService = mockDataService;\n    this.fakeStoreApiService = fakeStoreApiService;\n    this.apiUrl = `${environment.apiUrl}/products`;\n    this.categoriesUrl = `${environment.apiUrl}/categories`;\n  }\n  getProducts(options = {}) {\n    // Check if we should use Fake Store API\n    if (environment.useFakeStoreApi) {\n      return this.fakeStoreApiService.getProducts(options);\n    }\n    if (environment.useMockData) {\n      // Assuming mockDataService.getProducts returns PaginatedResponse<Product>\n      return this.mockDataService.getProducts(options);\n    }\n    let params = new HttpParams();\n    if (options.page) params = params.set('_page', options.page.toString()); // Common API convention\n    if (options.limit) params = params.set('_limit', options.limit.toString()); // Common API convention\n    if (options.sortBy) params = params.set('_sort', options.sortBy);\n    if (options.order) params = params.set('_order', options.order);\n    if (options.category) params = params.set('categoryId', options.category); // Assuming API filters by categoryId\n    if (options.subcategory) params = params.set('subcategoryName', options.subcategory); // Example: API might filter by subcategoryName\n    if (options.minPrice) params = params.set('price_gte', options.minPrice.toString());\n    if (options.maxPrice) params = params.set('price_lte', options.maxPrice.toString());\n    if (options.search) params = params.set('q', options.search); // Common API convention for search\n    // For a real API, the response might already be PaginatedResponse or you might need to map it.\n    // If API returns Product[] and headers for totalCount:\n    return this.http.get(this.apiUrl, {\n      params,\n      observe: 'response'\n    }).pipe(map(response => {\n      const items = response.body || [];\n      const totalCountHeader = response.headers.get('X-Total-Count');\n      const totalCount = totalCountHeader ? +totalCountHeader : items.length;\n      return {\n        items: items,\n        totalCount: totalCount,\n        page: options.page || 1,\n        limit: options.limit || items.length,\n        totalPages: options.limit ? Math.ceil(totalCount / options.limit) : 1\n      };\n    }), catchError(this.handleError('Failed to load products')));\n  }\n  getProductById(id) {\n    // Check if we should use Fake Store API\n    if (environment.useFakeStoreApi) {\n      return this.fakeStoreApiService.getProductById(id).pipe(map(product => {\n        if (!product) {\n          throw new Error('Product not found');\n        }\n        return product;\n      }));\n    }\n    // Use mock data in development\n    if (environment.useMockData) {\n      return this.mockDataService.getProductById(id).pipe(map(product => {\n        if (!product) {\n          throw new Error('Product not found');\n        }\n        return product;\n      }));\n    }\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError('Failed to load product details')));\n  }\n  getCategories() {\n    // Check if we should use Fake Store API\n    if (environment.useFakeStoreApi) {\n      return this.fakeStoreApiService.getCategories();\n    }\n    // Use mock data in development\n    if (environment.useMockData) {\n      return this.mockDataService.getCategories();\n    }\n    return this.http.get(this.categoriesUrl).pipe(map(categories => this.buildCategoryTree(categories)), catchError(this.handleError('Failed to load categories')));\n  }\n  getProductReviews(productId, page = 1, limit = 10) {\n    // Use mock data in development\n    if (environment.useMockData) {\n      return this.mockDataService.getProductReviews(productId, page, limit);\n    }\n    const params = new HttpParams().set('page', page.toString()).set('limit', limit.toString());\n    return this.http.get(`${this.apiUrl}/${productId}/reviews`, {\n      params\n    }).pipe(catchError(this.handleError('Failed to load product reviews')));\n  }\n  addProductReview(productId, review) {\n    return this.http.post(`${this.apiUrl}/${productId}/reviews`, review).pipe(catchError(this.handleError('Failed to submit your review')));\n  }\n  getFeaturedProducts(limit = 8) {\n    if (environment.useMockData) {\n      return this.mockDataService.getFeaturedProducts(limit);\n    }\n    const params = new HttpParams().set('_limit', limit.toString()).set('featured', 'true');\n    // Assuming API returns Product[] directly for this specific endpoint\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(catchError(this.handleError('Failed to load featured products')));\n  }\n  getRelatedProducts(productId, limit = 4) {\n    const params = new HttpParams().set('limit', limit.toString());\n    return this.http.get(`${this.apiUrl}/${productId}/related`, {\n      params\n    }).pipe(catchError(this.handleError('Failed to load related products')));\n  }\n  buildCategoryTree(categories) {\n    // Create a map for faster lookup\n    const categoryMap = new Map();\n    categories.forEach(category => {\n      categoryMap.set(category.id, {\n        ...category,\n        children: []\n      });\n    });\n    // Identify top-level categories and build hierarchy\n    const rootCategories = [];\n    categoryMap.forEach(category => {\n      if (!category.parentId) {\n        rootCategories.push(category);\n      } else {\n        const parent = categoryMap.get(category.parentId);\n        if (parent) {\n          parent.children = parent.children || [];\n          parent.children.push(category);\n        }\n      }\n    });\n    return rootCategories;\n  }\n  handleError(message) {\n    return error => {\n      this.notificationService.error(message);\n      throw error;\n    };\n  }\n  // Store management methods\n  loadProducts() {\n    return this.getProducts(); // Now returns PaginatedResponse\n  }\n\n  loadCategories() {\n    return this.getCategories();\n  }\n  loadProductById(id) {\n    return this.getProductById(id);\n  }\n  static {\n    this.ɵfac = function ProductService_Factory(t) {\n      return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.MockDataService), i0.ɵɵinject(i4.FakeStoreApiService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { ProductService };","map":{"version":3,"names":["HttpParams","catchError","map","environment","ProductService","constructor","http","notificationService","mockDataService","fakeStoreApiService","apiUrl","categoriesUrl","getProducts","options","useFakeStoreApi","useMockData","params","page","set","toString","limit","sortBy","order","category","subcategory","minPrice","maxPrice","search","get","observe","pipe","response","items","body","totalCountHeader","headers","totalCount","length","totalPages","Math","ceil","handleError","getProductById","id","product","Error","getCategories","categories","buildCategoryTree","getProductReviews","productId","addProductReview","review","post","getFeaturedProducts","getRelatedProducts","categoryMap","Map","forEach","children","rootCategories","parentId","push","parent","message","error","loadProducts","loadCategories","loadProductById","i0","ɵɵinject","i1","HttpClient","i2","NotificationService","i3","MockDataService","i4","FakeStoreApiService","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { environment } from '../../../environments/environment';\nimport { NotificationService } from './notification.service';\nimport { MockDataService } from './mock-data.service';\nimport { FakeStoreApiService } from './fake-store-api.service';\nimport { Product, Category, Review, PaginatedResponse } from '../models/product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  private apiUrl = `${environment.apiUrl}/products`;\n  private categoriesUrl = `${environment.apiUrl}/categories`;\n  \n  // This local mockProducts is likely not used if mockDataService is primary for mocks.\n  // private mockProducts: Product[] = [ ... ]; \n  \n  constructor(\n    private http: HttpClient,\n    private notificationService: NotificationService,\n    private mockDataService: MockDataService,\n    private fakeStoreApiService: FakeStoreApiService\n  ) {}\n\n  getProducts(options: {\n    page?: number;\n    limit?: number;\n    sortBy?: string;\n    order?: 'asc' | 'desc';\n    category?: string; // This could be category ID or name\n    subcategory?: string; \n    minPrice?: number;\n    maxPrice?: number;\n    search?: string;\n  } = {}): Observable<PaginatedResponse<Product>> { // Changed return type\n    \n    // Check if we should use Fake Store API\n    if (environment.useFakeStoreApi) {\n      return this.fakeStoreApiService.getProducts(options);\n    }\n    \n    if (environment.useMockData) {\n      // Assuming mockDataService.getProducts returns PaginatedResponse<Product>\n      return this.mockDataService.getProducts(options); \n    }\n    \n    let params = new HttpParams();\n    \n    if (options.page) params = params.set('_page', options.page.toString()); // Common API convention\n    if (options.limit) params = params.set('_limit', options.limit.toString()); // Common API convention\n    if (options.sortBy) params = params.set('_sort', options.sortBy);\n    if (options.order) params = params.set('_order', options.order);\n    if (options.category) params = params.set('categoryId', options.category); // Assuming API filters by categoryId\n    if (options.subcategory) params = params.set('subcategoryName', options.subcategory); // Example: API might filter by subcategoryName\n    if (options.minPrice) params = params.set('price_gte', options.minPrice.toString());\n    if (options.maxPrice) params = params.set('price_lte', options.maxPrice.toString());\n    if (options.search) params = params.set('q', options.search); // Common API convention for search\n    \n    // For a real API, the response might already be PaginatedResponse or you might need to map it.\n    // If API returns Product[] and headers for totalCount:\n    return this.http.get<Product[]>(this.apiUrl, { params, observe: 'response' }).pipe(\n      map(response => {\n        const items = response.body || [];\n        const totalCountHeader = response.headers.get('X-Total-Count');\n        const totalCount = totalCountHeader ? +totalCountHeader : items.length;\n        return {\n          items: items,\n          totalCount: totalCount,\n          page: options.page || 1,\n          limit: options.limit || items.length, // Or a default limit\n          totalPages: options.limit ? Math.ceil(totalCount / options.limit) : 1\n        };\n      }),\n      catchError(this.handleError('Failed to load products'))\n    );\n  }\n\n  getProductById(id: string): Observable<Product> {\n    // Check if we should use Fake Store API\n    if (environment.useFakeStoreApi) {\n      return this.fakeStoreApiService.getProductById(id).pipe(\n        map(product => {\n          if (!product) {\n            throw new Error('Product not found');\n          }\n          return product;\n        })\n      );\n    }\n    \n    // Use mock data in development\n    if (environment.useMockData) {\n      return this.mockDataService.getProductById(id).pipe(\n        map(product => {\n          if (!product) {\n            throw new Error('Product not found');\n          }\n          return product;\n        })\n      );\n    }\n    \n    return this.http.get<Product>(`${this.apiUrl}/${id}`).pipe(\n      catchError(this.handleError('Failed to load product details'))\n    );\n  }\n\n  getCategories(): Observable<Category[]> {\n    // Check if we should use Fake Store API\n    if (environment.useFakeStoreApi) {\n      return this.fakeStoreApiService.getCategories();\n    }\n    \n    // Use mock data in development\n    if (environment.useMockData) {\n      return this.mockDataService.getCategories();\n    }\n    \n    return this.http.get<Category[]>(this.categoriesUrl).pipe(\n      map(categories => this.buildCategoryTree(categories)),\n      catchError(this.handleError('Failed to load categories'))\n    );\n  }\n\n  getProductReviews(productId: string, page = 1, limit = 10): Observable<{ reviews: Review[]; totalCount: number }> {\n    // Use mock data in development\n    if (environment.useMockData) {\n      return this.mockDataService.getProductReviews(productId, page, limit);\n    }\n    \n    const params = new HttpParams()\n      .set('page', page.toString())\n      .set('limit', limit.toString());\n    \n    return this.http.get<{ reviews: Review[]; totalCount: number }>(\n      `${this.apiUrl}/${productId}/reviews`,\n      { params }\n    ).pipe(\n      catchError(this.handleError('Failed to load product reviews'))\n    );\n  }\n\n  addProductReview(productId: string, review: { rating: number; title: string; comment: string }): Observable<Review> {\n    return this.http.post<Review>(\n      `${this.apiUrl}/${productId}/reviews`,\n      review\n    ).pipe(\n      catchError(this.handleError('Failed to submit your review'))\n    );\n  }\n\n  getFeaturedProducts(limit = 8): Observable<Product[]> { // This typically returns just an array\n    if (environment.useMockData) {\n      return this.mockDataService.getFeaturedProducts(limit);\n    }\n    \n    const params = new HttpParams().set('_limit', limit.toString()).set('featured', 'true');\n    \n    // Assuming API returns Product[] directly for this specific endpoint\n    return this.http.get<Product[]>(this.apiUrl, { params }).pipe(\n      catchError(this.handleError('Failed to load featured products'))\n    );\n  }\n\n  getRelatedProducts(productId: string, limit = 4): Observable<Product[]> {\n    const params = new HttpParams().set('limit', limit.toString());\n    \n    return this.http.get<Product[]>(`${this.apiUrl}/${productId}/related`, { params }).pipe(\n      catchError(this.handleError('Failed to load related products'))\n    );\n  }\n\n  private buildCategoryTree(categories: Category[]): Category[] {\n    // Create a map for faster lookup\n    const categoryMap = new Map<string, Category>();\n    categories.forEach(category => {\n      categoryMap.set(category.id, { ...category, children: [] });\n    });\n    \n    // Identify top-level categories and build hierarchy\n    const rootCategories: Category[] = [];\n    categoryMap.forEach(category => {\n      if (!category.parentId) {\n        rootCategories.push(category);\n      } else {\n        const parent = categoryMap.get(category.parentId);\n        if (parent) {\n          parent.children = parent.children || [];\n          parent.children.push(category);\n        }\n      }\n    });\n    \n    return rootCategories;\n  }\n\n  private handleError(message: string) {\n    return (error: any): Observable<never> => {\n      this.notificationService.error(message);\n      throw error;\n    };\n  }\n\n  // Store management methods\n  loadProducts(): Observable<PaginatedResponse<Product>> { // Align with getProducts return type\n    return this.getProducts(); // Now returns PaginatedResponse\n  }\n\n  loadCategories(): Observable<Category[]> {\n    return this.getCategories();\n  }\n\n  loadProductById(id: string): Observable<Product> {\n    return this.getProductById(id);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}