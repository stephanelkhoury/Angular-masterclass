{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, catchError, exhaustMap, tap } from 'rxjs/operators';\nimport * as AuthActions from '../actions/auth.actions';\nimport * as UiActions from '../actions/ui.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/auth.service\";\nimport * as i3 from \"../../core/services/storage.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../../core/services/notification.service\";\nimport * as i6 from \"@ngrx/store\";\nclass AuthEffects {\n  constructor(actions$, authService, storageService, router, notificationService, store) {\n    this.actions$ = actions$;\n    this.authService = authService;\n    this.storageService = storageService;\n    this.router = router;\n    this.notificationService = notificationService;\n    this.store = store;\n    this.checkAuthStatus$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.checkAuthStatus), tap(() => this.store.dispatch(UiActions.setLoading({\n      isLoading: true\n    }))), exhaustMap(() => {\n      const token = this.storageService.getItem('auth_token');\n      if (!token) {\n        this.store.dispatch(UiActions.setLoading({\n          isLoading: false\n        }));\n        return of(AuthActions.checkAuthStatusFailure());\n      }\n      return this.authService.getCurrentUser().pipe(map(user => {\n        this.store.dispatch(UiActions.setLoading({\n          isLoading: false\n        }));\n        return AuthActions.checkAuthStatusSuccess({\n          user\n        });\n      }), catchError(error => {\n        this.store.dispatch(UiActions.setLoading({\n          isLoading: false\n        }));\n        return of(AuthActions.checkAuthStatusFailure());\n      }));\n    })));\n    this.login$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.login), tap(() => this.store.dispatch(UiActions.setLoading({\n      isLoading: true\n    }))), exhaustMap(({\n      email,\n      password\n    }) => this.authService.login(email, password).pipe(map(response => {\n      this.storageService.setItem('auth_token', response.token);\n      this.store.dispatch(UiActions.setLoading({\n        isLoading: false\n      }));\n      this.notificationService.showSuccess('Login successful');\n      return AuthActions.loginSuccess({\n        user: response.user,\n        token: response.token\n      });\n    }), catchError(error => {\n      this.store.dispatch(UiActions.setLoading({\n        isLoading: false\n      }));\n      this.notificationService.showError(error.message || 'Login failed');\n      return of(AuthActions.loginFailure({\n        error\n      }));\n    })))));\n    this.register$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.register), tap(() => this.store.dispatch(UiActions.setLoading({\n      isLoading: true\n    }))), exhaustMap(({\n      name,\n      email,\n      password\n    }) => this.authService.register(name, email, password).pipe(map(response => {\n      this.storageService.setItem('auth_token', response.token);\n      this.store.dispatch(UiActions.setLoading({\n        isLoading: false\n      }));\n      this.notificationService.showSuccess('Registration successful');\n      return AuthActions.registerSuccess({\n        user: response.user,\n        token: response.token\n      });\n    }), catchError(error => {\n      this.store.dispatch(UiActions.setLoading({\n        isLoading: false\n      }));\n      this.notificationService.showError(error.message || 'Registration failed');\n      return of(AuthActions.registerFailure({\n        error\n      }));\n    })))));\n    this.loginSuccess$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.loginSuccess, AuthActions.registerSuccess), tap(() => this.router.navigate(['/']))), {\n      dispatch: false\n    });\n    this.logout$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.logout), tap(() => {\n      this.storageService.removeItem('auth_token');\n      this.notificationService.showInfo('You have been logged out');\n      this.router.navigate(['/']);\n      return AuthActions.logoutSuccess();\n    })));\n  }\n  static {\n    this.ɵfac = function AuthEffects_Factory(t) {\n      return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.StorageService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.NotificationService), i0.ɵɵinject(i6.Store));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthEffects,\n      factory: AuthEffects.ɵfac\n    });\n  }\n}\nexport { AuthEffects };","map":{"version":3,"names":["createEffect","ofType","of","map","catchError","exhaustMap","tap","AuthActions","UiActions","AuthEffects","constructor","actions$","authService","storageService","router","notificationService","store","checkAuthStatus$","pipe","checkAuthStatus","dispatch","setLoading","isLoading","token","getItem","checkAuthStatusFailure","getCurrentUser","user","checkAuthStatusSuccess","error","login$","login","email","password","response","setItem","showSuccess","loginSuccess","showError","message","loginFailure","register$","register","name","registerSuccess","registerFailure","loginSuccess$","navigate","logout$","logout","removeItem","showInfo","logoutSuccess","i0","ɵɵinject","i1","Actions","i2","AuthService","i3","StorageService","i4","Router","i5","NotificationService","i6","Store","factory","ɵfac"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/store/effects/auth.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, catchError, exhaustMap, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\n\nimport { AuthService } from '../../core/services/auth.service';\nimport { StorageService } from '../../core/services/storage.service';\nimport { NotificationService } from '../../core/services/notification.service';\nimport * as AuthActions from '../actions/auth.actions';\nimport * as UiActions from '../actions/ui.actions';\nimport { AppState } from '../index';\n\n@Injectable()\nexport class AuthEffects {\n  checkAuthStatus$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.checkAuthStatus),\n      tap(() => this.store.dispatch(UiActions.setLoading({ isLoading: true }))),\n      exhaustMap(() => {\n        const token = this.storageService.getItem('auth_token');\n        if (!token) {\n          this.store.dispatch(UiActions.setLoading({ isLoading: false }));\n          return of(AuthActions.checkAuthStatusFailure());\n        }\n        \n        return this.authService.getCurrentUser().pipe(\n          map(user => {\n            this.store.dispatch(UiActions.setLoading({ isLoading: false }));\n            return AuthActions.checkAuthStatusSuccess({ user });\n          }),\n          catchError(error => {\n            this.store.dispatch(UiActions.setLoading({ isLoading: false }));\n            return of(AuthActions.checkAuthStatusFailure());\n          })\n        );\n      })\n    )\n  );\n\n  login$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.login),\n      tap(() => this.store.dispatch(UiActions.setLoading({ isLoading: true }))),\n      exhaustMap(({ email, password }) =>\n        this.authService.login(email, password).pipe(\n          map(response => {\n            this.storageService.setItem('auth_token', response.token);\n            this.store.dispatch(UiActions.setLoading({ isLoading: false }));\n            this.notificationService.showSuccess('Login successful');\n            return AuthActions.loginSuccess({\n              user: response.user,\n              token: response.token\n            });\n          }),\n          catchError(error => {\n            this.store.dispatch(UiActions.setLoading({ isLoading: false }));\n            this.notificationService.showError(error.message || 'Login failed');\n            return of(AuthActions.loginFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  register$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.register),\n      tap(() => this.store.dispatch(UiActions.setLoading({ isLoading: true }))),\n      exhaustMap(({ name, email, password }) =>\n        this.authService.register(name, email, password).pipe(\n          map(response => {\n            this.storageService.setItem('auth_token', response.token);\n            this.store.dispatch(UiActions.setLoading({ isLoading: false }));\n            this.notificationService.showSuccess('Registration successful');\n            return AuthActions.registerSuccess({\n              user: response.user,\n              token: response.token\n            });\n          }),\n          catchError(error => {\n            this.store.dispatch(UiActions.setLoading({ isLoading: false }));\n            this.notificationService.showError(error.message || 'Registration failed');\n            return of(AuthActions.registerFailure({ error }));\n          })\n        )\n      )\n    )\n  );\n\n  loginSuccess$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.loginSuccess, AuthActions.registerSuccess),\n        tap(() => this.router.navigate(['/']))\n      ),\n    { dispatch: false }\n  );\n\n  logout$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.logout),\n      tap(() => {\n        this.storageService.removeItem('auth_token');\n        this.notificationService.showInfo('You have been logged out');\n        this.router.navigate(['/']);\n        return AuthActions.logoutSuccess();\n      })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private authService: AuthService,\n    private storageService: StorageService,\n    private router: Router,\n    private notificationService: NotificationService,\n    private store: Store<AppState>\n  ) {}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}