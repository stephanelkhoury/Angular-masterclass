{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { logout } from '../../store/actions/auth.actions';\nimport { setError } from '../../store/actions/ui.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"../services/notification.service\";\nlet ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(router, store, notificationService) {\n      this.router = router;\n      this.store = store;\n      this.notificationService = notificationService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(error => {\n        let errorMessage = 'An unknown error occurred';\n        if (error.error instanceof ErrorEvent) {\n          // Client-side error\n          errorMessage = `Error: ${error.error.message}`;\n        } else {\n          // Server-side error\n          errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n          if (error.status === 401) {\n            // Unauthorized - log out user\n            this.store.dispatch(logout());\n            this.router.navigate(['/auth/login']);\n            errorMessage = 'Your session has expired. Please log in again.';\n          }\n          if (error.status === 403) {\n            this.router.navigate(['/']);\n            errorMessage = 'You do not have permission to access this resource.';\n          }\n          if (error.status === 404) {\n            errorMessage = 'The requested resource was not found.';\n          }\n          if (error.status >= 500) {\n            errorMessage = 'A server error occurred. Please try again later.';\n          }\n        }\n        // Display error notification\n        this.notificationService.showError(errorMessage);\n        // Store error in the NgRx store\n        this.store.dispatch(setError({\n          error: errorMessage\n        }));\n        return throwError(() => new Error(errorMessage));\n      }));\n    }\n    static {\n      this.ɵfac = function ErrorInterceptor_Factory(t) {\n        return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.NotificationService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ErrorInterceptor,\n        factory: ErrorInterceptor.ɵfac\n      });\n    }\n  }\n  return ErrorInterceptor;\n})();\nexport { ErrorInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}