{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, catchError, exhaustMap, tap } from 'rxjs/operators';\nimport * as AuthActions from '../actions/auth.actions';\nimport * as UiActions from '../actions/ui.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/auth.service\";\nimport * as i3 from \"../../core/services/storage.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"../../core/services/notification.service\";\nimport * as i6 from \"@ngrx/store\";\nlet AuthEffects = /*#__PURE__*/(() => {\n  class AuthEffects {\n    constructor(actions$, authService, storageService, router, notificationService, store) {\n      this.actions$ = actions$;\n      this.authService = authService;\n      this.storageService = storageService;\n      this.router = router;\n      this.notificationService = notificationService;\n      this.store = store;\n      this.checkAuthStatus$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.checkAuthStatus), tap(() => this.store.dispatch(UiActions.setLoading({\n        isLoading: true\n      }))), exhaustMap(() => {\n        const token = this.storageService.getItem('auth_token');\n        if (!token) {\n          this.store.dispatch(UiActions.setLoading({\n            isLoading: false\n          }));\n          return of(AuthActions.checkAuthStatusFailure());\n        }\n        return this.authService.getCurrentUser().pipe(map(user => {\n          this.store.dispatch(UiActions.setLoading({\n            isLoading: false\n          }));\n          if (user) {\n            return AuthActions.checkAuthStatusSuccess({\n              user\n            });\n          }\n          return AuthActions.checkAuthStatusFailure();\n        }), catchError(error => {\n          this.store.dispatch(UiActions.setLoading({\n            isLoading: false\n          }));\n          return of(AuthActions.checkAuthStatusFailure());\n        }));\n      })));\n      this.login$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.login), tap(() => this.store.dispatch(UiActions.setLoading({\n        isLoading: true\n      }))), exhaustMap(({\n        email,\n        password\n      }) => this.authService.login(email, password).pipe(map(response => {\n        this.storageService.setItem('auth_token', response.token);\n        this.store.dispatch(UiActions.setLoading({\n          isLoading: false\n        }));\n        this.notificationService.showSuccess('Login successful');\n        return AuthActions.loginSuccess({\n          user: response.user,\n          token: response.token\n        });\n      }), catchError(error => {\n        this.store.dispatch(UiActions.setLoading({\n          isLoading: false\n        }));\n        this.notificationService.showError(error.message || 'Login failed');\n        return of(AuthActions.loginFailure({\n          error\n        }));\n      })))));\n      this.register$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.register), tap(() => this.store.dispatch(UiActions.setLoading({\n        isLoading: true\n      }))), exhaustMap(({\n        name,\n        email,\n        password\n      }) => this.authService.signup(email, password, name).pipe(map(response => {\n        this.storageService.setItem('auth_token', response.token);\n        this.store.dispatch(UiActions.setLoading({\n          isLoading: false\n        }));\n        this.notificationService.showSuccess('Registration successful');\n        return AuthActions.registerSuccess({\n          user: response.user,\n          token: response.token\n        });\n      }), catchError(error => {\n        this.store.dispatch(UiActions.setLoading({\n          isLoading: false\n        }));\n        this.notificationService.showError(error.message || 'Registration failed');\n        return of(AuthActions.registerFailure({\n          error\n        }));\n      })))));\n      this.loginSuccess$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.loginSuccess, AuthActions.registerSuccess), tap(() => this.router.navigate(['/']))), {\n        dispatch: false\n      });\n      this.logout$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.logout), tap(() => {\n        this.storageService.removeItem('auth_token');\n        this.notificationService.showInfo('You have been logged out');\n        this.router.navigate(['/']);\n        return AuthActions.logoutSuccess();\n      })));\n    }\n    static {\n      this.ɵfac = function AuthEffects_Factory(t) {\n        return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.StorageService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.NotificationService), i0.ɵɵinject(i6.Store));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthEffects,\n        factory: AuthEffects.ɵfac\n      });\n    }\n  }\n  return AuthEffects;\n})();\nexport { AuthEffects };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}