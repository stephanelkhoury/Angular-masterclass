{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass LazyImgDirective {\n  constructor(el) {\n    this.el = el;\n    this.srcAttr = '';\n    this.src = '';\n    this.placeholderSrc = 'assets/images/placeholder.png';\n  }\n  ngOnInit() {\n    // Set placeholder image initially\n    this.srcAttr = this.placeholderSrc;\n    // Use Intersection Observer to detect when the image is in viewport\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          // Element is in viewport, load the actual image\n          this.loadImage();\n          // Stop observing once loaded\n          observer.unobserve(this.el.nativeElement);\n        }\n      });\n    });\n    observer.observe(this.el.nativeElement);\n  }\n  loadImage() {\n    // Create a new image element to preload the image\n    const img = new Image();\n    img.onload = () => {\n      // When the image is loaded, set the source to the element\n      this.srcAttr = this.src || this.el.nativeElement.getAttribute('src');\n    };\n    img.onerror = () => {\n      // If the image fails to load, keep the placeholder\n      this.srcAttr = this.placeholderSrc;\n    };\n    // Start loading the image\n    img.src = this.src || this.el.nativeElement.getAttribute('src');\n  }\n  static {\n    this.ɵfac = function LazyImgDirective_Factory(t) {\n      return new (t || LazyImgDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n  }\n  static {\n    this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: LazyImgDirective,\n      selectors: [[\"img\", \"appLazyImg\", \"\"]],\n      hostVars: 1,\n      hostBindings: function LazyImgDirective_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"src\", ctx.srcAttr, i0.ɵɵsanitizeUrl);\n        }\n      },\n      inputs: {\n        src: \"src\",\n        placeholderSrc: \"placeholderSrc\"\n      }\n    });\n  }\n}\nexport { LazyImgDirective };","map":{"version":3,"names":["LazyImgDirective","constructor","el","srcAttr","src","placeholderSrc","ngOnInit","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","loadImage","unobserve","nativeElement","observe","img","Image","onload","getAttribute","onerror","i0","ɵɵdirectiveInject","ElementRef","selectors","hostVars","hostBindings","LazyImgDirective_HostBindings","rf","ctx"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/shared/directives/lazy-img.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: 'img[appLazyImg]'\n})\nexport class LazyImgDirective implements OnInit {\n  @HostBinding('attr.src') srcAttr = '';\n  @Input() src: string = '';\n  @Input() placeholderSrc: string = 'assets/images/placeholder.png';\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit() {\n    // Set placeholder image initially\n    this.srcAttr = this.placeholderSrc;\n    \n    // Use Intersection Observer to detect when the image is in viewport\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          // Element is in viewport, load the actual image\n          this.loadImage();\n          // Stop observing once loaded\n          observer.unobserve(this.el.nativeElement);\n        }\n      });\n    });\n\n    observer.observe(this.el.nativeElement);\n  }\n\n  private loadImage() {\n    // Create a new image element to preload the image\n    const img = new Image();\n    \n    img.onload = () => {\n      // When the image is loaded, set the source to the element\n      this.srcAttr = this.src || this.el.nativeElement.getAttribute('src');\n    };\n    \n    img.onerror = () => {\n      // If the image fails to load, keep the placeholder\n      this.srcAttr = this.placeholderSrc;\n    };\n    \n    // Start loading the image\n    img.src = this.src || this.el.nativeElement.getAttribute('src');\n  }\n}"],"mappings":";AAEA,MAGaA,gBAAgB;EAK3BC,YAAoBC,EAAc;IAAd,KAAAA,EAAE,GAAFA,EAAE;IAJG,KAAAC,OAAO,GAAG,EAAE;IAC5B,KAAAC,GAAG,GAAW,EAAE;IAChB,KAAAC,cAAc,GAAW,+BAA+B;EAE5B;EAErCC,QAAQA,CAAA;IACN;IACA,IAAI,CAACH,OAAO,GAAG,IAAI,CAACE,cAAc;IAElC;IACA,MAAME,QAAQ,GAAG,IAAIC,oBAAoB,CAACC,OAAO,IAAG;MAClDA,OAAO,CAACC,OAAO,CAACC,KAAK,IAAG;QACtB,IAAIA,KAAK,CAACC,cAAc,EAAE;UACxB;UACA,IAAI,CAACC,SAAS,EAAE;UAChB;UACAN,QAAQ,CAACO,SAAS,CAAC,IAAI,CAACZ,EAAE,CAACa,aAAa,CAAC;;MAE7C,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFR,QAAQ,CAACS,OAAO,CAAC,IAAI,CAACd,EAAE,CAACa,aAAa,CAAC;EACzC;EAEQF,SAASA,CAAA;IACf;IACA,MAAMI,GAAG,GAAG,IAAIC,KAAK,EAAE;IAEvBD,GAAG,CAACE,MAAM,GAAG,MAAK;MAChB;MACA,IAAI,CAAChB,OAAO,GAAG,IAAI,CAACC,GAAG,IAAI,IAAI,CAACF,EAAE,CAACa,aAAa,CAACK,YAAY,CAAC,KAAK,CAAC;IACtE,CAAC;IAEDH,GAAG,CAACI,OAAO,GAAG,MAAK;MACjB;MACA,IAAI,CAAClB,OAAO,GAAG,IAAI,CAACE,cAAc;IACpC,CAAC;IAED;IACAY,GAAG,CAACb,GAAG,GAAG,IAAI,CAACA,GAAG,IAAI,IAAI,CAACF,EAAE,CAACa,aAAa,CAACK,YAAY,CAAC,KAAK,CAAC;EACjE;;;uBA1CWpB,gBAAgB,EAAAsB,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;IAAA;EAAA;;;YAAhBxB,gBAAgB;MAAAyB,SAAA;MAAAC,QAAA;MAAAC,YAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;;;;;;;;;;SAAhB7B,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}