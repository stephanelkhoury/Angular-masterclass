{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { checkAuthStatus, logout } from './store/actions/auth.actions';\nimport { selectIsLoading } from './store/selectors/ui.selectors';\nimport { selectIsAuthenticated, selectCurrentUser } from './store/selectors/auth.selectors';\nimport { selectCartItemCount } from './store/selectors/cart.selectors';\nlet AppComponent = class AppComponent {\n  constructor(store, router, swUpdate) {\n    this.store = store;\n    this.router = router;\n    this.swUpdate = swUpdate;\n    this.updateAvailable = false;\n    this.isLoading$ = this.store.select(selectIsLoading);\n    this.isAuthenticated$ = this.store.select(selectIsAuthenticated);\n    this.currentUser$ = this.store.select(selectCurrentUser);\n    this.cartItemCount$ = this.store.select(selectCartItemCount);\n  }\n  ngOnInit() {\n    // Check authentication status on app load\n    this.store.dispatch(checkAuthStatus());\n    // Scroll to top on route change\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(() => window.scrollTo(0, 0));\n    // Subscribe to service worker updates\n    if (this.swUpdate.isEnabled) {\n      this.swUpdate.versionUpdates.subscribe(() => {\n        this.updateAvailable = true;\n      });\n    }\n  }\n  updateApp() {\n    if (this.updateAvailable) {\n      window.location.reload();\n    }\n  }\n  logout() {\n    this.store.dispatch(logout());\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["Component","NavigationEnd","filter","checkAuthStatus","logout","selectIsLoading","selectIsAuthenticated","selectCurrentUser","selectCartItemCount","AppComponent","constructor","store","router","swUpdate","updateAvailable","isLoading$","select","isAuthenticated$","currentUser$","cartItemCount$","ngOnInit","dispatch","events","pipe","event","subscribe","window","scrollTo","isEnabled","versionUpdates","updateApp","location","reload","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/app.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { SwUpdate } from '@angular/service-worker';\n\nimport { AppState } from './store';\nimport { checkAuthStatus, logout } from './store/actions/auth.actions';\nimport { selectIsLoading } from './store/selectors/ui.selectors';\nimport { selectIsAuthenticated, selectCurrentUser } from './store/selectors/auth.selectors';\nimport { selectCartItemCount } from './store/selectors/cart.selectors';\nimport { User } from './core/models/user.model';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  isLoading$: Observable<boolean>;\n  isAuthenticated$: Observable<boolean>;\n  currentUser$: Observable<User | null>;\n  cartItemCount$: Observable<number>;\n  updateAvailable = false;\n\n  constructor(\n    private store: Store<AppState>,\n    private router: Router,\n    private swUpdate: SwUpdate\n  ) {\n    this.isLoading$ = this.store.select(selectIsLoading);\n    this.isAuthenticated$ = this.store.select(selectIsAuthenticated);\n    this.currentUser$ = this.store.select(selectCurrentUser);\n    this.cartItemCount$ = this.store.select(selectCartItemCount);\n  }\n\n  ngOnInit(): void {\n    // Check authentication status on app load\n    this.store.dispatch(checkAuthStatus());\n    \n    // Scroll to top on route change\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => window.scrollTo(0, 0));\n    \n    // Subscribe to service worker updates\n    if (this.swUpdate.isEnabled) {\n      this.swUpdate.versionUpdates.subscribe(() => {\n        this.updateAvailable = true;\n      });\n    }\n  }\n\n  updateApp(): void {\n    if (this.updateAvailable) {\n      window.location.reload();\n    }\n  }\n\n  logout(): void {\n    this.store.dispatch(logout());\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiBC,aAAa,QAAQ,iBAAiB;AACvD,SAASC,MAAM,QAAQ,gBAAgB;AAMvC,SAASC,eAAe,EAAEC,MAAM,QAAQ,8BAA8B;AACtE,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,qBAAqB,EAAEC,iBAAiB,QAAQ,kCAAkC;AAC3F,SAASC,mBAAmB,QAAQ,kCAAkC;AAQtE,IAAaC,YAAY,GAAzB,MAAaA,YAAY;EAOvBC,YACUC,KAAsB,EACtBC,MAAc,EACdC,QAAkB;IAFlB,KAAAF,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,QAAQ,GAARA,QAAQ;IALlB,KAAAC,eAAe,GAAG,KAAK;IAOrB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACJ,KAAK,CAACK,MAAM,CAACX,eAAe,CAAC;IACpD,IAAI,CAACY,gBAAgB,GAAG,IAAI,CAACN,KAAK,CAACK,MAAM,CAACV,qBAAqB,CAAC;IAChE,IAAI,CAACY,YAAY,GAAG,IAAI,CAACP,KAAK,CAACK,MAAM,CAACT,iBAAiB,CAAC;IACxD,IAAI,CAACY,cAAc,GAAG,IAAI,CAACR,KAAK,CAACK,MAAM,CAACR,mBAAmB,CAAC;EAC9D;EAEAY,QAAQA,CAAA;IACN;IACA,IAAI,CAACT,KAAK,CAACU,QAAQ,CAAClB,eAAe,EAAE,CAAC;IAEtC;IACA,IAAI,CAACS,MAAM,CAACU,MAAM,CACfC,IAAI,CAACrB,MAAM,CAACsB,KAAK,IAAIA,KAAK,YAAYvB,aAAa,CAAC,CAAC,CACrDwB,SAAS,CAAC,MAAMC,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAEzC;IACA,IAAI,IAAI,CAACd,QAAQ,CAACe,SAAS,EAAE;MAC3B,IAAI,CAACf,QAAQ,CAACgB,cAAc,CAACJ,SAAS,CAAC,MAAK;QAC1C,IAAI,CAACX,eAAe,GAAG,IAAI;MAC7B,CAAC,CAAC;;EAEN;EAEAgB,SAASA,CAAA;IACP,IAAI,IAAI,CAAChB,eAAe,EAAE;MACxBY,MAAM,CAACK,QAAQ,CAACC,MAAM,EAAE;;EAE5B;EAEA5B,MAAMA,CAAA;IACJ,IAAI,CAACO,KAAK,CAACU,QAAQ,CAACjB,MAAM,EAAE,CAAC;EAC/B;CACD;AA5CYK,YAAY,GAAAwB,UAAA,EALxBjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACW3B,YAAY,CA4CxB;SA5CYA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}