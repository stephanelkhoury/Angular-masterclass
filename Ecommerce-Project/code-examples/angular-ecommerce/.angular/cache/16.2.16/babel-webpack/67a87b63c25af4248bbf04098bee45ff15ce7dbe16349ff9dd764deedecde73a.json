{"ast":null,"code":"import { BehaviorSubject, Observable, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nclass CompareService {\n  constructor(storageService) {\n    this.storageService = storageService;\n    this.COMPARE_KEY = 'ecommerce_compare';\n    this.MAX_COMPARE_ITEMS = 4;\n    this.compareSubject = new BehaviorSubject([]);\n    this.compare$ = this.compareSubject.asObservable();\n    this.compareCount$ = this.compare$.pipe(map(items => items.length));\n    this.loadCompareList();\n  }\n  loadCompareList() {\n    const savedCompare = this.storageService.getItem(this.COMPARE_KEY);\n    if (savedCompare) {\n      this.compareSubject.next(savedCompare);\n    }\n  }\n  saveCompareList() {\n    this.storageService.setItem(this.COMPARE_KEY, this.compareSubject.value);\n  }\n  addToCompare(product) {\n    return new Observable(observer => {\n      const currentCompare = this.compareSubject.value;\n      const existingIndex = currentCompare.findIndex(item => item.id === product.id);\n      if (existingIndex !== -1) {\n        observer.next({\n          success: false,\n          message: 'Product is already in compare list'\n        });\n        observer.complete();\n        return;\n      }\n      if (currentCompare.length >= this.MAX_COMPARE_ITEMS) {\n        observer.next({\n          success: false,\n          message: `You can only compare up to ${this.MAX_COMPARE_ITEMS} products`\n        });\n        observer.complete();\n        return;\n      }\n      const updatedCompare = [...currentCompare, product];\n      this.compareSubject.next(updatedCompare);\n      this.saveCompareList();\n      observer.next({\n        success: true,\n        message: 'Product added to compare list'\n      });\n      observer.complete();\n    });\n  }\n  removeFromCompare(productId) {\n    const currentCompare = this.compareSubject.value;\n    const updatedCompare = currentCompare.filter(item => item.id !== productId);\n    this.compareSubject.next(updatedCompare);\n    this.saveCompareList();\n  }\n  isInCompare(productId) {\n    return this.compare$.pipe(map(items => items.some(item => item.id === productId)));\n  }\n  clearCompare() {\n    this.compareSubject.next([]);\n    this.saveCompareList();\n  }\n  getCompareList() {\n    return this.compareSubject.value;\n  }\n  canAddMore() {\n    return this.compareSubject.value.length < this.MAX_COMPARE_ITEMS;\n  }\n  getMaxItems() {\n    return this.MAX_COMPARE_ITEMS;\n  }\n  static {\n    this.ɵfac = function CompareService_Factory(t) {\n      return new (t || CompareService)(i0.ɵɵinject(i1.StorageService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CompareService,\n      factory: CompareService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { CompareService };","map":{"version":3,"names":["BehaviorSubject","Observable","map","CompareService","constructor","storageService","COMPARE_KEY","MAX_COMPARE_ITEMS","compareSubject","compare$","asObservable","compareCount$","pipe","items","length","loadCompareList","savedCompare","getItem","next","saveCompareList","setItem","value","addToCompare","product","observer","currentCompare","existingIndex","findIndex","item","id","success","message","complete","updatedCompare","removeFromCompare","productId","filter","isInCompare","some","clearCompare","getCompareList","canAddMore","getMaxItems","i0","ɵɵinject","i1","StorageService","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/compare.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, map } from 'rxjs';\nimport { Product } from '../models/product.model';\nimport { StorageService } from './storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompareService {\n  private readonly COMPARE_KEY = 'ecommerce_compare';\n  private readonly MAX_COMPARE_ITEMS = 4;\n  private compareSubject = new BehaviorSubject<Product[]>([]);\n  \n  public compare$ = this.compareSubject.asObservable();\n  public compareCount$ = this.compare$.pipe(\n    map(items => items.length)\n  );\n\n  constructor(private storageService: StorageService) {\n    this.loadCompareList();\n  }\n\n  private loadCompareList(): void {\n    const savedCompare = this.storageService.getItem(this.COMPARE_KEY);\n    if (savedCompare) {\n      this.compareSubject.next(savedCompare);\n    }\n  }\n\n  private saveCompareList(): void {\n    this.storageService.setItem(this.COMPARE_KEY, this.compareSubject.value);\n  }\n\n  addToCompare(product: Product): Observable<{success: boolean, message: string}> {\n    return new Observable(observer => {\n      const currentCompare = this.compareSubject.value;\n      const existingIndex = currentCompare.findIndex(item => item.id === product.id);\n      \n      if (existingIndex !== -1) {\n        observer.next({success: false, message: 'Product is already in compare list'});\n        observer.complete();\n        return;\n      }\n\n      if (currentCompare.length >= this.MAX_COMPARE_ITEMS) {\n        observer.next({success: false, message: `You can only compare up to ${this.MAX_COMPARE_ITEMS} products`});\n        observer.complete();\n        return;\n      }\n\n      const updatedCompare = [...currentCompare, product];\n      this.compareSubject.next(updatedCompare);\n      this.saveCompareList();\n      observer.next({success: true, message: 'Product added to compare list'});\n      observer.complete();\n    });\n  }\n\n  removeFromCompare(productId: string): void {\n    const currentCompare = this.compareSubject.value;\n    const updatedCompare = currentCompare.filter(item => item.id !== productId);\n    this.compareSubject.next(updatedCompare);\n    this.saveCompareList();\n  }\n\n  isInCompare(productId: string): Observable<boolean> {\n    return this.compare$.pipe(\n      map(items => items.some(item => item.id === productId))\n    );\n  }\n\n  clearCompare(): void {\n    this.compareSubject.next([]);\n    this.saveCompareList();\n  }\n\n  getCompareList(): Product[] {\n    return this.compareSubject.value;\n  }\n\n  canAddMore(): boolean {\n    return this.compareSubject.value.length < this.MAX_COMPARE_ITEMS;\n  }\n\n  getMaxItems(): number {\n    return this.MAX_COMPARE_ITEMS;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}