{"ast":null,"code":"import * as i0 from \"@angular/core\";\nlet LazyImgDirective = /*#__PURE__*/(() => {\n  class LazyImgDirective {\n    constructor(el) {\n      this.el = el;\n      this.srcAttr = '';\n      this.src = '';\n      this.placeholderSrc = 'assets/images/placeholder.png';\n    }\n    ngOnInit() {\n      // Set placeholder image initially\n      this.srcAttr = this.placeholderSrc;\n      // Use Intersection Observer to detect when the image is in viewport\n      const observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            // Element is in viewport, load the actual image\n            this.loadImage();\n            // Stop observing once loaded\n            observer.unobserve(this.el.nativeElement);\n          }\n        });\n      });\n      observer.observe(this.el.nativeElement);\n    }\n    loadImage() {\n      // Create a new image element to preload the image\n      const img = new Image();\n      img.onload = () => {\n        // When the image is loaded, set the source to the element\n        this.srcAttr = this.src || this.el.nativeElement.getAttribute('src');\n      };\n      img.onerror = () => {\n        // If the image fails to load, keep the placeholder\n        this.srcAttr = this.placeholderSrc;\n      };\n      // Start loading the image\n      img.src = this.src || this.el.nativeElement.getAttribute('src');\n    }\n    static {\n      this.ɵfac = function LazyImgDirective_Factory(t) {\n        return new (t || LazyImgDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n        type: LazyImgDirective,\n        selectors: [[\"img\", \"appLazyImg\", \"\"]],\n        hostVars: 1,\n        hostBindings: function LazyImgDirective_HostBindings(rf, ctx) {\n          if (rf & 2) {\n            i0.ɵɵattribute(\"src\", ctx.srcAttr, i0.ɵɵsanitizeUrl);\n          }\n        },\n        inputs: {\n          src: \"src\",\n          placeholderSrc: \"placeholderSrc\"\n        }\n      });\n    }\n  }\n  return LazyImgDirective;\n})();\nexport { LazyImgDirective };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}