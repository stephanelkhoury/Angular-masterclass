{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subject, combineLatest } from 'rxjs';\nimport { takeUntil, debounceTime, map } from 'rxjs/operators';\nlet ProductsComponent = class ProductsComponent {\n  constructor(store, route, router, productService, cartService, notificationService) {\n    this.store = store;\n    this.route = route;\n    this.router = router;\n    this.productService = productService;\n    this.cartService = cartService;\n    this.notificationService = notificationService;\n    this.filters = {};\n    this.searchControl = new FormControl('');\n    this.viewMode = 'grid';\n    this.destroy$ = new Subject();\n    this.products$ = this.store.select(state => state.products.items);\n    this.categories$ = this.store.select(state => state.products.categories);\n    this.loading$ = this.store.select(state => state.ui.loading);\n    // Create filtered products stream\n    this.filteredProducts$ = combineLatest([this.products$, this.route.queryParams.pipe(map(params => {\n      const filters = {};\n      if (params['category']) filters.category = params['category'];\n      if (params['minPrice']) filters.minPrice = Number(params['minPrice']);\n      if (params['maxPrice']) filters.maxPrice = Number(params['maxPrice']);\n      if (params['rating']) filters.rating = Number(params['rating']);\n      if (params['sort']) filters.sort = params['sort'];\n      if (params['search']) {\n        filters.search = params['search'];\n        this.searchControl.setValue(params['search']);\n      }\n      this.filters = filters;\n      return filters;\n    }))]).pipe(map(([products, filters]) => this.filterProducts(products, filters)));\n  }\n  ngOnInit() {\n    // Load products and categories\n    this.productService.loadProducts();\n    this.productService.loadCategories();\n    // Handle search input with debounce\n    this.searchControl.valueChanges.pipe(debounceTime(300), takeUntil(this.destroy$)).subscribe(value => {\n      this.updateFilters({\n        search: value || undefined\n      });\n    });\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  onCategoryChange(categoryId) {\n    this.updateFilters({\n      category: categoryId || undefined\n    });\n  }\n  onPriceRangeChange(priceRange) {\n    this.updateFilters({\n      minPrice: priceRange.min,\n      maxPrice: priceRange.max\n    });\n  }\n  onRatingChange(rating) {\n    this.updateFilters({\n      rating: rating || undefined\n    });\n  }\n  onSortChange(sort) {\n    this.updateFilters({\n      sort\n    });\n  }\n  onViewModeChange(mode) {\n    this.viewMode = mode;\n  }\n  onAddToCart(product) {\n    this.cartService.addToCart(product);\n    this.notificationService.show(`${product.name} added to cart`);\n  }\n  onAddToWishlist(product) {\n    // This would dispatch the appropriate action for the wishlist\n    this.notificationService.show(`${product.name} added to wishlist`);\n  }\n  onViewDetails(product) {\n    this.router.navigate(['/products', product.id]);\n  }\n  resetFilters() {\n    this.searchControl.setValue('');\n    this.updateFilters({\n      category: undefined,\n      minPrice: undefined,\n      maxPrice: undefined,\n      rating: undefined,\n      sort: undefined,\n      search: undefined\n    });\n  }\n  updateFilters(newFilters) {\n    const updatedFilters = {\n      ...this.filters,\n      ...newFilters\n    };\n    // Remove undefined values\n    Object.keys(updatedFilters).forEach(key => {\n      if (updatedFilters[key] === undefined) {\n        delete updatedFilters[key];\n      }\n    });\n    // Navigate with new query params\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: {\n        ...updatedFilters\n      },\n      queryParamsHandling: 'merge'\n    });\n  }\n  filterProducts(products, filters) {\n    if (!filters || Object.keys(filters).length === 0) {\n      return products;\n    }\n    let filtered = [...products];\n    // Filter by category\n    if (filters.category) {\n      filtered = filtered.filter(product => product.category.id === filters.category);\n    }\n    // Filter by price range\n    if (filters.minPrice !== undefined) {\n      filtered = filtered.filter(product => product.price >= filters.minPrice);\n    }\n    if (filters.maxPrice !== undefined) {\n      filtered = filtered.filter(product => product.price <= filters.maxPrice);\n    }\n    // Filter by rating\n    if (filters.rating !== undefined) {\n      filtered = filtered.filter(product => product.rating >= filters.rating);\n    }\n    // Filter by search term\n    if (filters.search) {\n      const searchTerm = filters.search.toLowerCase();\n      filtered = filtered.filter(product => product.name.toLowerCase().includes(searchTerm) || product.description.toLowerCase().includes(searchTerm) || product.category.name.toLowerCase().includes(searchTerm));\n    }\n    // Sort products\n    if (filters.sort) {\n      switch (filters.sort) {\n        case 'price-low':\n          filtered.sort((a, b) => a.price - b.price);\n          break;\n        case 'price-high':\n          filtered.sort((a, b) => b.price - a.price);\n          break;\n        case 'rating':\n          filtered.sort((a, b) => b.rating - a.rating);\n          break;\n        case 'newest':\n          filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n          break;\n        case 'popularity':\n          filtered.sort((a, b) => (b.reviews?.length || 0) - (a.reviews?.length || 0));\n          break;\n      }\n    }\n    return filtered;\n  }\n};\nProductsComponent = __decorate([Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.scss']\n})], ProductsComponent);\nexport { ProductsComponent };","map":{"version":3,"names":["Component","FormControl","Subject","combineLatest","takeUntil","debounceTime","map","ProductsComponent","constructor","store","route","router","productService","cartService","notificationService","filters","searchControl","viewMode","destroy$","products$","select","state","products","items","categories$","categories","loading$","ui","loading","filteredProducts$","queryParams","pipe","params","category","minPrice","Number","maxPrice","rating","sort","search","setValue","filterProducts","ngOnInit","loadProducts","loadCategories","valueChanges","subscribe","value","updateFilters","undefined","ngOnDestroy","next","complete","onCategoryChange","categoryId","onPriceRangeChange","priceRange","min","max","onRatingChange","onSortChange","onViewModeChange","mode","onAddToCart","product","addToCart","show","name","onAddToWishlist","onViewDetails","navigate","id","resetFilters","newFilters","updatedFilters","Object","keys","forEach","key","relativeTo","queryParamsHandling","length","filtered","filter","price","searchTerm","toLowerCase","includes","description","a","b","Date","createdAt","getTime","reviews","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/features/products/products.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormControl } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subject, combineLatest } from 'rxjs';\nimport { takeUntil, debounceTime, map } from 'rxjs/operators';\n\nimport { AppState } from '../../store';\nimport { Product, Category } from '../../core/models/product.model';\nimport { ProductService } from '../../core/services/product.service';\nimport { CartService } from '../../core/services/cart.service';\nimport { NotificationService } from '../../core/services/notification.service';\n\ninterface ProductFilters {\n  category?: string;\n  minPrice?: number;\n  maxPrice?: number;\n  rating?: number;\n  sort?: string;\n  search?: string;\n}\n\n@Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.scss']\n})\nexport class ProductsComponent implements OnInit, OnDestroy {\n  products$: Observable<Product[]>;\n  categories$: Observable<Category[]>;\n  filteredProducts$: Observable<Product[]>;\n  loading$: Observable<boolean>;\n  \n  filters: ProductFilters = {};\n  searchControl = new FormControl('');\n  \n  viewMode: 'grid' | 'list' = 'grid';\n  \n  private destroy$ = new Subject<void>();\n  \n  constructor(\n    private store: Store<AppState>,\n    private route: ActivatedRoute,\n    private router: Router,\n    private productService: ProductService,\n    private cartService: CartService,\n    private notificationService: NotificationService\n  ) {\n    this.products$ = this.store.select(state => state.products.items);\n    this.categories$ = this.store.select(state => state.products.categories);\n    this.loading$ = this.store.select(state => state.ui.loading);\n    \n    // Create filtered products stream\n    this.filteredProducts$ = combineLatest([\n      this.products$,\n      this.route.queryParams.pipe(map(params => {\n        const filters: ProductFilters = {};\n        \n        if (params['category']) filters.category = params['category'];\n        if (params['minPrice']) filters.minPrice = Number(params['minPrice']);\n        if (params['maxPrice']) filters.maxPrice = Number(params['maxPrice']);\n        if (params['rating']) filters.rating = Number(params['rating']);\n        if (params['sort']) filters.sort = params['sort'];\n        if (params['search']) {\n          filters.search = params['search'];\n          this.searchControl.setValue(params['search']);\n        }\n        \n        this.filters = filters;\n        return filters;\n      }))\n    ]).pipe(\n      map(([products, filters]) => this.filterProducts(products, filters))\n    );\n  }\n  \n  ngOnInit(): void {\n    // Load products and categories\n    this.productService.loadProducts();\n    this.productService.loadCategories();\n    \n    // Handle search input with debounce\n    this.searchControl.valueChanges.pipe(\n      debounceTime(300),\n      takeUntil(this.destroy$)\n    ).subscribe(value => {\n      this.updateFilters({ search: value || undefined });\n    });\n  }\n  \n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  \n  onCategoryChange(categoryId: string | null): void {\n    this.updateFilters({ category: categoryId || undefined });\n  }\n  \n  onPriceRangeChange(priceRange: { min: number, max: number }): void {\n    this.updateFilters({\n      minPrice: priceRange.min,\n      maxPrice: priceRange.max\n    });\n  }\n  \n  onRatingChange(rating: number | null): void {\n    this.updateFilters({ rating: rating || undefined });\n  }\n  \n  onSortChange(sort: string): void {\n    this.updateFilters({ sort });\n  }\n  \n  onViewModeChange(mode: 'grid' | 'list'): void {\n    this.viewMode = mode;\n  }\n  \n  onAddToCart(product: Product): void {\n    this.cartService.addToCart(product);\n    this.notificationService.show(`${product.name} added to cart`);\n  }\n  \n  onAddToWishlist(product: Product): void {\n    // This would dispatch the appropriate action for the wishlist\n    this.notificationService.show(`${product.name} added to wishlist`);\n  }\n  \n  onViewDetails(product: Product): void {\n    this.router.navigate(['/products', product.id]);\n  }\n  \n  resetFilters(): void {\n    this.searchControl.setValue('');\n    this.updateFilters({\n      category: undefined,\n      minPrice: undefined,\n      maxPrice: undefined,\n      rating: undefined,\n      sort: undefined,\n      search: undefined\n    });\n  }\n  \n  private updateFilters(newFilters: Partial<ProductFilters>): void {\n    const updatedFilters = { ...this.filters, ...newFilters };\n    \n    // Remove undefined values\n    Object.keys(updatedFilters).forEach(key => {\n      if (updatedFilters[key] === undefined) {\n        delete updatedFilters[key];\n      }\n    });\n    \n    // Navigate with new query params\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: { ...updatedFilters },\n      queryParamsHandling: 'merge'\n    });\n  }\n  \n  private filterProducts(products: Product[], filters: ProductFilters): Product[] {\n    if (!filters || Object.keys(filters).length === 0) {\n      return products;\n    }\n    \n    let filtered = [...products];\n    \n    // Filter by category\n    if (filters.category) {\n      filtered = filtered.filter(product => product.category.id === filters.category);\n    }\n    \n    // Filter by price range\n    if (filters.minPrice !== undefined) {\n      filtered = filtered.filter(product => product.price >= filters.minPrice);\n    }\n    \n    if (filters.maxPrice !== undefined) {\n      filtered = filtered.filter(product => product.price <= filters.maxPrice);\n    }\n    \n    // Filter by rating\n    if (filters.rating !== undefined) {\n      filtered = filtered.filter(product => product.rating >= filters.rating);\n    }\n    \n    // Filter by search term\n    if (filters.search) {\n      const searchTerm = filters.search.toLowerCase();\n      filtered = filtered.filter(product => \n        product.name.toLowerCase().includes(searchTerm) || \n        product.description.toLowerCase().includes(searchTerm) ||\n        product.category.name.toLowerCase().includes(searchTerm)\n      );\n    }\n    \n    // Sort products\n    if (filters.sort) {\n      switch (filters.sort) {\n        case 'price-low':\n          filtered.sort((a, b) => a.price - b.price);\n          break;\n        case 'price-high':\n          filtered.sort((a, b) => b.price - a.price);\n          break;\n        case 'rating':\n          filtered.sort((a, b) => b.rating - a.rating);\n          break;\n        case 'newest':\n          filtered.sort((a, b) => \n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n          );\n          break;\n        case 'popularity':\n          filtered.sort((a, b) => (b.reviews?.length || 0) - (a.reviews?.length || 0));\n          break;\n      }\n    }\n    \n    return filtered;\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAE5D,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,SAAqBC,OAAO,EAAEC,aAAa,QAAQ,MAAM;AACzD,SAASC,SAAS,EAAEC,YAAY,EAAEC,GAAG,QAAQ,gBAAgB;AAsB7D,IAAaC,iBAAiB,GAA9B,MAAaA,iBAAiB;EAa5BC,YACUC,KAAsB,EACtBC,KAAqB,EACrBC,MAAc,EACdC,cAA8B,EAC9BC,WAAwB,EACxBC,mBAAwC;IALxC,KAAAL,KAAK,GAALA,KAAK;IACL,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAb7B,KAAAC,OAAO,GAAmB,EAAE;IAC5B,KAAAC,aAAa,GAAG,IAAIf,WAAW,CAAC,EAAE,CAAC;IAEnC,KAAAgB,QAAQ,GAAoB,MAAM;IAE1B,KAAAC,QAAQ,GAAG,IAAIhB,OAAO,EAAQ;IAUpC,IAAI,CAACiB,SAAS,GAAG,IAAI,CAACV,KAAK,CAACW,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAACC,KAAK,CAAC;IACjE,IAAI,CAACC,WAAW,GAAG,IAAI,CAACf,KAAK,CAACW,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAACG,UAAU,CAAC;IACxE,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACjB,KAAK,CAACW,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACM,EAAE,CAACC,OAAO,CAAC;IAE5D;IACA,IAAI,CAACC,iBAAiB,GAAG1B,aAAa,CAAC,CACrC,IAAI,CAACgB,SAAS,EACd,IAAI,CAACT,KAAK,CAACoB,WAAW,CAACC,IAAI,CAACzB,GAAG,CAAC0B,MAAM,IAAG;MACvC,MAAMjB,OAAO,GAAmB,EAAE;MAElC,IAAIiB,MAAM,CAAC,UAAU,CAAC,EAAEjB,OAAO,CAACkB,QAAQ,GAAGD,MAAM,CAAC,UAAU,CAAC;MAC7D,IAAIA,MAAM,CAAC,UAAU,CAAC,EAAEjB,OAAO,CAACmB,QAAQ,GAAGC,MAAM,CAACH,MAAM,CAAC,UAAU,CAAC,CAAC;MACrE,IAAIA,MAAM,CAAC,UAAU,CAAC,EAAEjB,OAAO,CAACqB,QAAQ,GAAGD,MAAM,CAACH,MAAM,CAAC,UAAU,CAAC,CAAC;MACrE,IAAIA,MAAM,CAAC,QAAQ,CAAC,EAAEjB,OAAO,CAACsB,MAAM,GAAGF,MAAM,CAACH,MAAM,CAAC,QAAQ,CAAC,CAAC;MAC/D,IAAIA,MAAM,CAAC,MAAM,CAAC,EAAEjB,OAAO,CAACuB,IAAI,GAAGN,MAAM,CAAC,MAAM,CAAC;MACjD,IAAIA,MAAM,CAAC,QAAQ,CAAC,EAAE;QACpBjB,OAAO,CAACwB,MAAM,GAAGP,MAAM,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAChB,aAAa,CAACwB,QAAQ,CAACR,MAAM,CAAC,QAAQ,CAAC,CAAC;;MAG/C,IAAI,CAACjB,OAAO,GAAGA,OAAO;MACtB,OAAOA,OAAO;IAChB,CAAC,CAAC,CAAC,CACJ,CAAC,CAACgB,IAAI,CACLzB,GAAG,CAAC,CAAC,CAACgB,QAAQ,EAAEP,OAAO,CAAC,KAAK,IAAI,CAAC0B,cAAc,CAACnB,QAAQ,EAAEP,OAAO,CAAC,CAAC,CACrE;EACH;EAEA2B,QAAQA,CAAA;IACN;IACA,IAAI,CAAC9B,cAAc,CAAC+B,YAAY,EAAE;IAClC,IAAI,CAAC/B,cAAc,CAACgC,cAAc,EAAE;IAEpC;IACA,IAAI,CAAC5B,aAAa,CAAC6B,YAAY,CAACd,IAAI,CAClC1B,YAAY,CAAC,GAAG,CAAC,EACjBD,SAAS,CAAC,IAAI,CAACc,QAAQ,CAAC,CACzB,CAAC4B,SAAS,CAACC,KAAK,IAAG;MAClB,IAAI,CAACC,aAAa,CAAC;QAAET,MAAM,EAAEQ,KAAK,IAAIE;MAAS,CAAE,CAAC;IACpD,CAAC,CAAC;EACJ;EAEAC,WAAWA,CAAA;IACT,IAAI,CAAChC,QAAQ,CAACiC,IAAI,EAAE;IACpB,IAAI,CAACjC,QAAQ,CAACkC,QAAQ,EAAE;EAC1B;EAEAC,gBAAgBA,CAACC,UAAyB;IACxC,IAAI,CAACN,aAAa,CAAC;MAAEf,QAAQ,EAAEqB,UAAU,IAAIL;IAAS,CAAE,CAAC;EAC3D;EAEAM,kBAAkBA,CAACC,UAAwC;IACzD,IAAI,CAACR,aAAa,CAAC;MACjBd,QAAQ,EAAEsB,UAAU,CAACC,GAAG;MACxBrB,QAAQ,EAAEoB,UAAU,CAACE;KACtB,CAAC;EACJ;EAEAC,cAAcA,CAACtB,MAAqB;IAClC,IAAI,CAACW,aAAa,CAAC;MAAEX,MAAM,EAAEA,MAAM,IAAIY;IAAS,CAAE,CAAC;EACrD;EAEAW,YAAYA,CAACtB,IAAY;IACvB,IAAI,CAACU,aAAa,CAAC;MAAEV;IAAI,CAAE,CAAC;EAC9B;EAEAuB,gBAAgBA,CAACC,IAAqB;IACpC,IAAI,CAAC7C,QAAQ,GAAG6C,IAAI;EACtB;EAEAC,WAAWA,CAACC,OAAgB;IAC1B,IAAI,CAACnD,WAAW,CAACoD,SAAS,CAACD,OAAO,CAAC;IACnC,IAAI,CAAClD,mBAAmB,CAACoD,IAAI,CAAC,GAAGF,OAAO,CAACG,IAAI,gBAAgB,CAAC;EAChE;EAEAC,eAAeA,CAACJ,OAAgB;IAC9B;IACA,IAAI,CAAClD,mBAAmB,CAACoD,IAAI,CAAC,GAAGF,OAAO,CAACG,IAAI,oBAAoB,CAAC;EACpE;EAEAE,aAAaA,CAACL,OAAgB;IAC5B,IAAI,CAACrD,MAAM,CAAC2D,QAAQ,CAAC,CAAC,WAAW,EAAEN,OAAO,CAACO,EAAE,CAAC,CAAC;EACjD;EAEAC,YAAYA,CAAA;IACV,IAAI,CAACxD,aAAa,CAACwB,QAAQ,CAAC,EAAE,CAAC;IAC/B,IAAI,CAACQ,aAAa,CAAC;MACjBf,QAAQ,EAAEgB,SAAS;MACnBf,QAAQ,EAAEe,SAAS;MACnBb,QAAQ,EAAEa,SAAS;MACnBZ,MAAM,EAAEY,SAAS;MACjBX,IAAI,EAAEW,SAAS;MACfV,MAAM,EAAEU;KACT,CAAC;EACJ;EAEQD,aAAaA,CAACyB,UAAmC;IACvD,MAAMC,cAAc,GAAG;MAAE,GAAG,IAAI,CAAC3D,OAAO;MAAE,GAAG0D;IAAU,CAAE;IAEzD;IACAE,MAAM,CAACC,IAAI,CAACF,cAAc,CAAC,CAACG,OAAO,CAACC,GAAG,IAAG;MACxC,IAAIJ,cAAc,CAACI,GAAG,CAAC,KAAK7B,SAAS,EAAE;QACrC,OAAOyB,cAAc,CAACI,GAAG,CAAC;;IAE9B,CAAC,CAAC;IAEF;IACA,IAAI,CAACnE,MAAM,CAAC2D,QAAQ,CAAC,EAAE,EAAE;MACvBS,UAAU,EAAE,IAAI,CAACrE,KAAK;MACtBoB,WAAW,EAAE;QAAE,GAAG4C;MAAc,CAAE;MAClCM,mBAAmB,EAAE;KACtB,CAAC;EACJ;EAEQvC,cAAcA,CAACnB,QAAmB,EAAEP,OAAuB;IACjE,IAAI,CAACA,OAAO,IAAI4D,MAAM,CAACC,IAAI,CAAC7D,OAAO,CAAC,CAACkE,MAAM,KAAK,CAAC,EAAE;MACjD,OAAO3D,QAAQ;;IAGjB,IAAI4D,QAAQ,GAAG,CAAC,GAAG5D,QAAQ,CAAC;IAE5B;IACA,IAAIP,OAAO,CAACkB,QAAQ,EAAE;MACpBiD,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAACnB,OAAO,IAAIA,OAAO,CAAC/B,QAAQ,CAACsC,EAAE,KAAKxD,OAAO,CAACkB,QAAQ,CAAC;;IAGjF;IACA,IAAIlB,OAAO,CAACmB,QAAQ,KAAKe,SAAS,EAAE;MAClCiC,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAACnB,OAAO,IAAIA,OAAO,CAACoB,KAAK,IAAIrE,OAAO,CAACmB,QAAQ,CAAC;;IAG1E,IAAInB,OAAO,CAACqB,QAAQ,KAAKa,SAAS,EAAE;MAClCiC,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAACnB,OAAO,IAAIA,OAAO,CAACoB,KAAK,IAAIrE,OAAO,CAACqB,QAAQ,CAAC;;IAG1E;IACA,IAAIrB,OAAO,CAACsB,MAAM,KAAKY,SAAS,EAAE;MAChCiC,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAACnB,OAAO,IAAIA,OAAO,CAAC3B,MAAM,IAAItB,OAAO,CAACsB,MAAM,CAAC;;IAGzE;IACA,IAAItB,OAAO,CAACwB,MAAM,EAAE;MAClB,MAAM8C,UAAU,GAAGtE,OAAO,CAACwB,MAAM,CAAC+C,WAAW,EAAE;MAC/CJ,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAACnB,OAAO,IAChCA,OAAO,CAACG,IAAI,CAACmB,WAAW,EAAE,CAACC,QAAQ,CAACF,UAAU,CAAC,IAC/CrB,OAAO,CAACwB,WAAW,CAACF,WAAW,EAAE,CAACC,QAAQ,CAACF,UAAU,CAAC,IACtDrB,OAAO,CAAC/B,QAAQ,CAACkC,IAAI,CAACmB,WAAW,EAAE,CAACC,QAAQ,CAACF,UAAU,CAAC,CACzD;;IAGH;IACA,IAAItE,OAAO,CAACuB,IAAI,EAAE;MAChB,QAAQvB,OAAO,CAACuB,IAAI;QAClB,KAAK,WAAW;UACd4C,QAAQ,CAAC5C,IAAI,CAAC,CAACmD,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACL,KAAK,GAAGM,CAAC,CAACN,KAAK,CAAC;UAC1C;QACF,KAAK,YAAY;UACfF,QAAQ,CAAC5C,IAAI,CAAC,CAACmD,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACN,KAAK,GAAGK,CAAC,CAACL,KAAK,CAAC;UAC1C;QACF,KAAK,QAAQ;UACXF,QAAQ,CAAC5C,IAAI,CAAC,CAACmD,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACrD,MAAM,GAAGoD,CAAC,CAACpD,MAAM,CAAC;UAC5C;QACF,KAAK,QAAQ;UACX6C,QAAQ,CAAC5C,IAAI,CAAC,CAACmD,CAAC,EAAEC,CAAC,KACjB,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAACC,OAAO,EAAE,GAAG,IAAIF,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAACC,OAAO,EAAE,CAClE;UACD;QACF,KAAK,YAAY;UACfX,QAAQ,CAAC5C,IAAI,CAAC,CAACmD,CAAC,EAAEC,CAAC,KAAK,CAACA,CAAC,CAACI,OAAO,EAAEb,MAAM,IAAI,CAAC,KAAKQ,CAAC,CAACK,OAAO,EAAEb,MAAM,IAAI,CAAC,CAAC,CAAC;UAC5E;;;IAIN,OAAOC,QAAQ;EACjB;CACD;AApMY3E,iBAAiB,GAAAwF,UAAA,EAL7B/F,SAAS,CAAC;EACTgG,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACW3F,iBAAiB,CAoM7B;SApMYA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}