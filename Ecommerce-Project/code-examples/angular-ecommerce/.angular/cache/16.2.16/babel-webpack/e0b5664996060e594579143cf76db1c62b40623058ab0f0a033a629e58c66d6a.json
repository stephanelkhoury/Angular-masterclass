{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as CartActions from '../actions/cart.actions';\nexport const initialState = {\n  items: [],\n  total: 0,\n  loading: false,\n  error: null\n};\nexport const reducer = createReducer(initialState,\n// Add to cart\non(CartActions.addToCart, (state, {\n  item\n}) => {\n  const existingItemIndex = state.items.findIndex(cartItem => cartItem.productId === item.productId);\n  let updatedItems;\n  if (existingItemIndex >= 0) {\n    // Item exists, update quantity\n    updatedItems = state.items.map((cartItem, index) => index === existingItemIndex ? {\n      ...cartItem,\n      quantity: cartItem.quantity + item.quantity\n    } : cartItem);\n  } else {\n    // New item, add to cart\n    updatedItems = [...state.items, item];\n  }\n  return {\n    ...state,\n    items: updatedItems,\n    total: calculateTotal(updatedItems)\n  };\n}),\n// Remove from cart\non(CartActions.removeFromCart, (state, {\n  productId\n}) => {\n  const updatedItems = state.items.filter(item => item.productId !== productId);\n  return {\n    ...state,\n    items: updatedItems,\n    total: calculateTotal(updatedItems)\n  };\n}),\n// Update cart item quantity\non(CartActions.updateCartItemQuantity, (state, {\n  productId,\n  quantity\n}) => {\n  const updatedItems = state.items.map(item => item.productId === productId ? {\n    ...item,\n    quantity\n  } : item);\n  return {\n    ...state,\n    items: updatedItems,\n    total: calculateTotal(updatedItems)\n  };\n}),\n// Clear cart\non(CartActions.clearCart, () => initialState),\n// Load cart\non(CartActions.loadCart, state => ({\n  ...state,\n  loading: true,\n  error: null\n})),\n// Load cart success\non(CartActions.loadCartSuccess, (state, {\n  items\n}) => ({\n  ...state,\n  items,\n  total: calculateTotal(items),\n  loading: false,\n  error: null\n})),\n// Load cart failure\non(CartActions.loadCartFailure, (state, {\n  error\n}) => ({\n  ...state,\n  loading: false,\n  error: typeof error === 'string' ? error : 'Failed to load cart'\n})));\n// Helper function to calculate total\nfunction calculateTotal(items) {\n  return items.reduce((total, item) => total + item.price * item.quantity, 0);\n}","map":{"version":3,"names":["createReducer","on","CartActions","initialState","items","total","loading","error","reducer","addToCart","state","item","existingItemIndex","findIndex","cartItem","productId","updatedItems","map","index","quantity","calculateTotal","removeFromCart","filter","updateCartItemQuantity","clearCart","loadCart","loadCartSuccess","loadCartFailure","reduce","price"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/store/reducers/cart.reducer.ts"],"sourcesContent":["import { createReducer, on } from '@ngrx/store';\nimport { CartItem } from '../../core/models/cart-item.model';\nimport * as CartActions from '../actions/cart.actions';\n\nexport interface State {\n  items: CartItem[];\n  total: number;\n  loading: boolean;\n  error: string | null;\n}\n\nexport const initialState: State = {\n  items: [],\n  total: 0,\n  loading: false,\n  error: null\n};\n\nexport const reducer = createReducer(\n  initialState,\n  \n  // Add to cart\n  on(CartActions.addToCart, (state, { item }) => {\n    const existingItemIndex = state.items.findIndex(cartItem => cartItem.productId === item.productId);\n    let updatedItems: CartItem[];\n    \n    if (existingItemIndex >= 0) {\n      // Item exists, update quantity\n      updatedItems = state.items.map((cartItem, index) => \n        index === existingItemIndex \n          ? { ...cartItem, quantity: cartItem.quantity + item.quantity }\n          : cartItem\n      );\n    } else {\n      // New item, add to cart\n      updatedItems = [...state.items, item];\n    }\n    \n    return {\n      ...state,\n      items: updatedItems,\n      total: calculateTotal(updatedItems)\n    };\n  }),\n  \n  // Remove from cart\n  on(CartActions.removeFromCart, (state, { productId }) => {\n    const updatedItems = state.items.filter(item => item.productId !== productId);\n    return {\n      ...state,\n      items: updatedItems,\n      total: calculateTotal(updatedItems)\n    };\n  }),\n  \n  // Update cart item quantity\n  on(CartActions.updateCartItemQuantity, (state, { productId, quantity }) => {\n    const updatedItems = state.items.map(item => \n      item.productId === productId ? { ...item, quantity } : item\n    );\n    return {\n      ...state,\n      items: updatedItems,\n      total: calculateTotal(updatedItems)\n    };\n  }),\n  \n  // Clear cart\n  on(CartActions.clearCart, () => initialState),\n  \n  // Load cart\n  on(CartActions.loadCart, (state) => ({\n    ...state,\n    loading: true,\n    error: null\n  })),\n  \n  // Load cart success\n  on(CartActions.loadCartSuccess, (state, { items }) => ({\n    ...state,\n    items,\n    total: calculateTotal(items),\n    loading: false,\n    error: null\n  })),\n  \n  // Load cart failure\n  on(CartActions.loadCartFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error: typeof error === 'string' ? error : 'Failed to load cart'\n  }))\n);\n\n// Helper function to calculate total\nfunction calculateTotal(items: CartItem[]): number {\n  return items.reduce((total, item) => total + (item.price * item.quantity), 0);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}