{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./notification.service\";\nimport * as i3 from \"./mock-data.service\";\nclass ProductService {\n  constructor(http, notificationService, mockDataService) {\n    this.http = http;\n    this.notificationService = notificationService;\n    this.mockDataService = mockDataService;\n    this.apiUrl = `${environment.apiUrl}/products`;\n    this.categoriesUrl = `${environment.apiUrl}/categories`;\n  }\n  getProducts(options = {}) {\n    // Use mock data in development\n    if (environment.useMockData) {\n      return this.mockDataService.getProducts(options);\n    }\n    let params = new HttpParams();\n    if (options.page) params = params.set('page', options.page.toString());\n    if (options.limit) params = params.set('limit', options.limit.toString());\n    if (options.sortBy) params = params.set('sortBy', options.sortBy);\n    if (options.order) params = params.set('order', options.order);\n    if (options.category) params = params.set('category', options.category);\n    if (options.minPrice) params = params.set('minPrice', options.minPrice.toString());\n    if (options.maxPrice) params = params.set('maxPrice', options.maxPrice.toString());\n    if (options.search) params = params.set('search', options.search);\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(catchError(this.handleError('Failed to load products')));\n  }\n  getProductById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError('Failed to load product details')));\n  }\n  getCategories() {\n    return this.http.get(this.categoriesUrl).pipe(map(categories => this.buildCategoryTree(categories)), catchError(this.handleError('Failed to load categories')));\n  }\n  getProductReviews(productId, page = 1, limit = 10) {\n    const params = new HttpParams().set('page', page.toString()).set('limit', limit.toString());\n    return this.http.get(`${this.apiUrl}/${productId}/reviews`, {\n      params\n    }).pipe(catchError(this.handleError('Failed to load product reviews')));\n  }\n  addProductReview(productId, review) {\n    return this.http.post(`${this.apiUrl}/${productId}/reviews`, review).pipe(catchError(this.handleError('Failed to submit your review')));\n  }\n  getFeaturedProducts(limit = 8) {\n    const params = new HttpParams().set('limit', limit.toString()).set('featured', 'true');\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(map(response => response.products), catchError(this.handleError('Failed to load featured products')));\n  }\n  getRelatedProducts(productId, limit = 4) {\n    const params = new HttpParams().set('limit', limit.toString());\n    return this.http.get(`${this.apiUrl}/${productId}/related`, {\n      params\n    }).pipe(catchError(this.handleError('Failed to load related products')));\n  }\n  buildCategoryTree(categories) {\n    // Create a map for faster lookup\n    const categoryMap = new Map();\n    categories.forEach(category => {\n      categoryMap.set(category.id, {\n        ...category,\n        children: []\n      });\n    });\n    // Identify top-level categories and build hierarchy\n    const rootCategories = [];\n    categoryMap.forEach(category => {\n      if (!category.parentId) {\n        rootCategories.push(category);\n      } else {\n        const parent = categoryMap.get(category.parentId);\n        if (parent) {\n          parent.children = parent.children || [];\n          parent.children.push(category);\n        }\n      }\n    });\n    return rootCategories;\n  }\n  handleError(message) {\n    return error => {\n      this.notificationService.error(message);\n      throw error;\n    };\n  }\n  // Store management methods\n  loadProducts() {\n    return this.getProducts().pipe(map(response => response.products));\n  }\n  loadCategories() {\n    return this.getCategories();\n  }\n  loadProductById(id) {\n    return this.getProductById(id);\n  }\n  static {\n    this.ɵfac = function ProductService_Factory(t) {\n      return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.MockDataService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { ProductService };","map":{"version":3,"names":["HttpParams","catchError","map","environment","ProductService","constructor","http","notificationService","mockDataService","apiUrl","categoriesUrl","getProducts","options","useMockData","params","page","set","toString","limit","sortBy","order","category","minPrice","maxPrice","search","get","pipe","handleError","getProductById","id","getCategories","categories","buildCategoryTree","getProductReviews","productId","addProductReview","review","post","getFeaturedProducts","response","products","getRelatedProducts","categoryMap","Map","forEach","children","rootCategories","parentId","push","parent","message","error","loadProducts","loadCategories","loadProductById","i0","ɵɵinject","i1","HttpClient","i2","NotificationService","i3","MockDataService","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { environment } from '../../../environments/environment';\nimport { NotificationService } from './notification.service';\nimport { MockDataService } from './mock-data.service';\nimport { Product, Category, Review } from '../models/product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  private apiUrl = `${environment.apiUrl}/products`;\n  private categoriesUrl = `${environment.apiUrl}/categories`;\n  \n  constructor(\n    private http: HttpClient,\n    private notificationService: NotificationService,\n    private mockDataService: MockDataService\n  ) {}\n\n  getProducts(options: {\n    page?: number;\n    limit?: number;\n    sortBy?: string;\n    order?: 'asc' | 'desc';\n    category?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    search?: string;\n  } = {}): Observable<{ products: Product[]; totalCount: number; page: number; limit: number }> {\n    \n    // Use mock data in development\n    if (environment.useMockData) {\n      return this.mockDataService.getProducts(options);\n    }\n    \n    let params = new HttpParams();\n    \n    if (options.page) params = params.set('page', options.page.toString());\n    if (options.limit) params = params.set('limit', options.limit.toString());\n    if (options.sortBy) params = params.set('sortBy', options.sortBy);\n    if (options.order) params = params.set('order', options.order);\n    if (options.category) params = params.set('category', options.category);\n    if (options.minPrice) params = params.set('minPrice', options.minPrice.toString());\n    if (options.maxPrice) params = params.set('maxPrice', options.maxPrice.toString());\n    if (options.search) params = params.set('search', options.search);\n    \n    return this.http.get<{ products: Product[]; totalCount: number; page: number; limit: number }>(\n      this.apiUrl,\n      { params }\n    ).pipe(\n      catchError(this.handleError('Failed to load products'))\n    );\n  }\n\n  getProductById(id: string): Observable<Product> {\n    return this.http.get<Product>(`${this.apiUrl}/${id}`).pipe(\n      catchError(this.handleError('Failed to load product details'))\n    );\n  }\n\n  getCategories(): Observable<Category[]> {\n    return this.http.get<Category[]>(this.categoriesUrl).pipe(\n      map(categories => this.buildCategoryTree(categories)),\n      catchError(this.handleError('Failed to load categories'))\n    );\n  }\n\n  getProductReviews(productId: string, page = 1, limit = 10): Observable<{ reviews: Review[]; totalCount: number }> {\n    const params = new HttpParams()\n      .set('page', page.toString())\n      .set('limit', limit.toString());\n    \n    return this.http.get<{ reviews: Review[]; totalCount: number }>(\n      `${this.apiUrl}/${productId}/reviews`,\n      { params }\n    ).pipe(\n      catchError(this.handleError('Failed to load product reviews'))\n    );\n  }\n\n  addProductReview(productId: string, review: { rating: number; title: string; comment: string }): Observable<Review> {\n    return this.http.post<Review>(\n      `${this.apiUrl}/${productId}/reviews`,\n      review\n    ).pipe(\n      catchError(this.handleError('Failed to submit your review'))\n    );\n  }\n\n  getFeaturedProducts(limit = 8): Observable<Product[]> {\n    const params = new HttpParams().set('limit', limit.toString()).set('featured', 'true');\n    \n    return this.http.get<{ products: Product[] }>(this.apiUrl, { params }).pipe(\n      map(response => response.products),\n      catchError(this.handleError('Failed to load featured products'))\n    );\n  }\n\n  getRelatedProducts(productId: string, limit = 4): Observable<Product[]> {\n    const params = new HttpParams().set('limit', limit.toString());\n    \n    return this.http.get<Product[]>(`${this.apiUrl}/${productId}/related`, { params }).pipe(\n      catchError(this.handleError('Failed to load related products'))\n    );\n  }\n\n  private buildCategoryTree(categories: Category[]): Category[] {\n    // Create a map for faster lookup\n    const categoryMap = new Map<string, Category>();\n    categories.forEach(category => {\n      categoryMap.set(category.id, { ...category, children: [] });\n    });\n    \n    // Identify top-level categories and build hierarchy\n    const rootCategories: Category[] = [];\n    categoryMap.forEach(category => {\n      if (!category.parentId) {\n        rootCategories.push(category);\n      } else {\n        const parent = categoryMap.get(category.parentId);\n        if (parent) {\n          parent.children = parent.children || [];\n          parent.children.push(category);\n        }\n      }\n    });\n    \n    return rootCategories;\n  }\n\n  private handleError(message: string) {\n    return (error: any): Observable<never> => {\n      this.notificationService.error(message);\n      throw error;\n    };\n  }\n\n  // Store management methods\n  loadProducts(): Observable<Product[]> {\n    return this.getProducts().pipe(\n      map(response => response.products)\n    );\n  }\n\n  loadCategories(): Observable<Category[]> {\n    return this.getCategories();\n  }\n\n  loadProductById(id: string): Observable<Product> {\n    return this.getProductById(id);\n  }\n}\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAE7D,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,WAAW,QAAQ,mCAAmC;;;;;AAK/D,MAGaC,cAAc;EAIzBC,YACUC,IAAgB,EAChBC,mBAAwC,EACxCC,eAAgC;IAFhC,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAC,eAAe,GAAfA,eAAe;IANjB,KAAAC,MAAM,GAAG,GAAGN,WAAW,CAACM,MAAM,WAAW;IACzC,KAAAC,aAAa,GAAG,GAAGP,WAAW,CAACM,MAAM,aAAa;EAMvD;EAEHE,WAAWA,CAACC,OAAA,GASR,EAAE;IAEJ;IACA,IAAIT,WAAW,CAACU,WAAW,EAAE;MAC3B,OAAO,IAAI,CAACL,eAAe,CAACG,WAAW,CAACC,OAAO,CAAC;;IAGlD,IAAIE,MAAM,GAAG,IAAId,UAAU,EAAE;IAE7B,IAAIY,OAAO,CAACG,IAAI,EAAED,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,MAAM,EAAEJ,OAAO,CAACG,IAAI,CAACE,QAAQ,EAAE,CAAC;IACtE,IAAIL,OAAO,CAACM,KAAK,EAAEJ,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,OAAO,EAAEJ,OAAO,CAACM,KAAK,CAACD,QAAQ,EAAE,CAAC;IACzE,IAAIL,OAAO,CAACO,MAAM,EAAEL,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAEJ,OAAO,CAACO,MAAM,CAAC;IACjE,IAAIP,OAAO,CAACQ,KAAK,EAAEN,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,OAAO,EAAEJ,OAAO,CAACQ,KAAK,CAAC;IAC9D,IAAIR,OAAO,CAACS,QAAQ,EAAEP,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,UAAU,EAAEJ,OAAO,CAACS,QAAQ,CAAC;IACvE,IAAIT,OAAO,CAACU,QAAQ,EAAER,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,UAAU,EAAEJ,OAAO,CAACU,QAAQ,CAACL,QAAQ,EAAE,CAAC;IAClF,IAAIL,OAAO,CAACW,QAAQ,EAAET,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,UAAU,EAAEJ,OAAO,CAACW,QAAQ,CAACN,QAAQ,EAAE,CAAC;IAClF,IAAIL,OAAO,CAACY,MAAM,EAAEV,MAAM,GAAGA,MAAM,CAACE,GAAG,CAAC,QAAQ,EAAEJ,OAAO,CAACY,MAAM,CAAC;IAEjE,OAAO,IAAI,CAAClB,IAAI,CAACmB,GAAG,CAClB,IAAI,CAAChB,MAAM,EACX;MAAEK;IAAM,CAAE,CACX,CAACY,IAAI,CACJzB,UAAU,CAAC,IAAI,CAAC0B,WAAW,CAAC,yBAAyB,CAAC,CAAC,CACxD;EACH;EAEAC,cAAcA,CAACC,EAAU;IACvB,OAAO,IAAI,CAACvB,IAAI,CAACmB,GAAG,CAAU,GAAG,IAAI,CAAChB,MAAM,IAAIoB,EAAE,EAAE,CAAC,CAACH,IAAI,CACxDzB,UAAU,CAAC,IAAI,CAAC0B,WAAW,CAAC,gCAAgC,CAAC,CAAC,CAC/D;EACH;EAEAG,aAAaA,CAAA;IACX,OAAO,IAAI,CAACxB,IAAI,CAACmB,GAAG,CAAa,IAAI,CAACf,aAAa,CAAC,CAACgB,IAAI,CACvDxB,GAAG,CAAC6B,UAAU,IAAI,IAAI,CAACC,iBAAiB,CAACD,UAAU,CAAC,CAAC,EACrD9B,UAAU,CAAC,IAAI,CAAC0B,WAAW,CAAC,2BAA2B,CAAC,CAAC,CAC1D;EACH;EAEAM,iBAAiBA,CAACC,SAAiB,EAAEnB,IAAI,GAAG,CAAC,EAAEG,KAAK,GAAG,EAAE;IACvD,MAAMJ,MAAM,GAAG,IAAId,UAAU,EAAE,CAC5BgB,GAAG,CAAC,MAAM,EAAED,IAAI,CAACE,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,OAAO,EAAEE,KAAK,CAACD,QAAQ,EAAE,CAAC;IAEjC,OAAO,IAAI,CAACX,IAAI,CAACmB,GAAG,CAClB,GAAG,IAAI,CAAChB,MAAM,IAAIyB,SAAS,UAAU,EACrC;MAAEpB;IAAM,CAAE,CACX,CAACY,IAAI,CACJzB,UAAU,CAAC,IAAI,CAAC0B,WAAW,CAAC,gCAAgC,CAAC,CAAC,CAC/D;EACH;EAEAQ,gBAAgBA,CAACD,SAAiB,EAAEE,MAA0D;IAC5F,OAAO,IAAI,CAAC9B,IAAI,CAAC+B,IAAI,CACnB,GAAG,IAAI,CAAC5B,MAAM,IAAIyB,SAAS,UAAU,EACrCE,MAAM,CACP,CAACV,IAAI,CACJzB,UAAU,CAAC,IAAI,CAAC0B,WAAW,CAAC,8BAA8B,CAAC,CAAC,CAC7D;EACH;EAEAW,mBAAmBA,CAACpB,KAAK,GAAG,CAAC;IAC3B,MAAMJ,MAAM,GAAG,IAAId,UAAU,EAAE,CAACgB,GAAG,CAAC,OAAO,EAAEE,KAAK,CAACD,QAAQ,EAAE,CAAC,CAACD,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC;IAEtF,OAAO,IAAI,CAACV,IAAI,CAACmB,GAAG,CAA0B,IAAI,CAAChB,MAAM,EAAE;MAAEK;IAAM,CAAE,CAAC,CAACY,IAAI,CACzExB,GAAG,CAACqC,QAAQ,IAAIA,QAAQ,CAACC,QAAQ,CAAC,EAClCvC,UAAU,CAAC,IAAI,CAAC0B,WAAW,CAAC,kCAAkC,CAAC,CAAC,CACjE;EACH;EAEAc,kBAAkBA,CAACP,SAAiB,EAAEhB,KAAK,GAAG,CAAC;IAC7C,MAAMJ,MAAM,GAAG,IAAId,UAAU,EAAE,CAACgB,GAAG,CAAC,OAAO,EAAEE,KAAK,CAACD,QAAQ,EAAE,CAAC;IAE9D,OAAO,IAAI,CAACX,IAAI,CAACmB,GAAG,CAAY,GAAG,IAAI,CAAChB,MAAM,IAAIyB,SAAS,UAAU,EAAE;MAAEpB;IAAM,CAAE,CAAC,CAACY,IAAI,CACrFzB,UAAU,CAAC,IAAI,CAAC0B,WAAW,CAAC,iCAAiC,CAAC,CAAC,CAChE;EACH;EAEQK,iBAAiBA,CAACD,UAAsB;IAC9C;IACA,MAAMW,WAAW,GAAG,IAAIC,GAAG,EAAoB;IAC/CZ,UAAU,CAACa,OAAO,CAACvB,QAAQ,IAAG;MAC5BqB,WAAW,CAAC1B,GAAG,CAACK,QAAQ,CAACQ,EAAE,EAAE;QAAE,GAAGR,QAAQ;QAAEwB,QAAQ,EAAE;MAAE,CAAE,CAAC;IAC7D,CAAC,CAAC;IAEF;IACA,MAAMC,cAAc,GAAe,EAAE;IACrCJ,WAAW,CAACE,OAAO,CAACvB,QAAQ,IAAG;MAC7B,IAAI,CAACA,QAAQ,CAAC0B,QAAQ,EAAE;QACtBD,cAAc,CAACE,IAAI,CAAC3B,QAAQ,CAAC;OAC9B,MAAM;QACL,MAAM4B,MAAM,GAAGP,WAAW,CAACjB,GAAG,CAACJ,QAAQ,CAAC0B,QAAQ,CAAC;QACjD,IAAIE,MAAM,EAAE;UACVA,MAAM,CAACJ,QAAQ,GAAGI,MAAM,CAACJ,QAAQ,IAAI,EAAE;UACvCI,MAAM,CAACJ,QAAQ,CAACG,IAAI,CAAC3B,QAAQ,CAAC;;;IAGpC,CAAC,CAAC;IAEF,OAAOyB,cAAc;EACvB;EAEQnB,WAAWA,CAACuB,OAAe;IACjC,OAAQC,KAAU,IAAuB;MACvC,IAAI,CAAC5C,mBAAmB,CAAC4C,KAAK,CAACD,OAAO,CAAC;MACvC,MAAMC,KAAK;IACb,CAAC;EACH;EAEA;EACAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACzC,WAAW,EAAE,CAACe,IAAI,CAC5BxB,GAAG,CAACqC,QAAQ,IAAIA,QAAQ,CAACC,QAAQ,CAAC,CACnC;EACH;EAEAa,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACvB,aAAa,EAAE;EAC7B;EAEAwB,eAAeA,CAACzB,EAAU;IACxB,OAAO,IAAI,CAACD,cAAc,CAACC,EAAE,CAAC;EAChC;;;uBA7IWzB,cAAc,EAAAmD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,eAAA;IAAA;EAAA;;;aAAd1D,cAAc;MAAA2D,OAAA,EAAd3D,cAAc,CAAA4D,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;SAEP7D,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}