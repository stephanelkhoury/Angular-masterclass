{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, catchError, switchMap } from 'rxjs/operators';\nimport * as ProductActions from '../actions/product.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/product.service\";\nclass ProductEffects {\n  constructor(actions$, productService) {\n    this.actions$ = actions$;\n    this.productService = productService;\n    this.loadProducts$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.loadProducts), switchMap(({\n      params\n    }) => {\n      console.log('ProductEffects: loadProducts effect triggered with params:', params);\n      return this.productService.getProducts(params).pipe(map(paginatedResponse => {\n        console.log('ProductEffects: loadProducts success with response:', paginatedResponse);\n        return ProductActions.loadProductsSuccess({\n          paginatedResponse\n        });\n      }), catchError(error => {\n        console.error('ProductEffects: loadProducts error:', error);\n        return of(ProductActions.loadProductsFailure({\n          error\n        }));\n      }));\n    })));\n    this.loadProductById$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.loadProductById), switchMap(({\n      productId\n    }) => this.productService.getProductById(productId).pipe(map(product => ProductActions.loadProductByIdSuccess({\n      product\n    })), catchError(error => of(ProductActions.loadProductByIdFailure({\n      error\n    })))))));\n    this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.loadCategories), switchMap(() => {\n      console.log('ProductEffects: loadCategories effect triggered');\n      return this.productService.getCategories().pipe(map(categories => {\n        console.log('ProductEffects: loadCategories success with categories:', categories);\n        return ProductActions.loadCategoriesSuccess({\n          categories\n        });\n      }), catchError(error => {\n        console.error('ProductEffects: loadCategories error:', error);\n        return of(ProductActions.loadCategoriesFailure({\n          error\n        }));\n      }));\n    })));\n  }\n  static {\n    this.ɵfac = function ProductEffects_Factory(t) {\n      return new (t || ProductEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductEffects,\n      factory: ProductEffects.ɵfac\n    });\n  }\n}\nexport { ProductEffects };","map":{"version":3,"names":["createEffect","ofType","of","map","catchError","switchMap","ProductActions","ProductEffects","constructor","actions$","productService","loadProducts$","pipe","loadProducts","params","console","log","getProducts","paginatedResponse","loadProductsSuccess","error","loadProductsFailure","loadProductById$","loadProductById","productId","getProductById","product","loadProductByIdSuccess","loadProductByIdFailure","loadCategories$","loadCategories","getCategories","categories","loadCategoriesSuccess","loadCategoriesFailure","i0","ɵɵinject","i1","Actions","i2","ProductService","factory","ɵfac"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/store/effects/product.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, catchError, switchMap } from 'rxjs/operators';\n\nimport { ProductService } from '../../core/services/product.service';\nimport * as ProductActions from '../actions/product.actions';\n\n@Injectable()\nexport class ProductEffects {\n  \n  loadProducts$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProductActions.loadProducts),\n      switchMap(({ params }) => {\n        console.log('ProductEffects: loadProducts effect triggered with params:', params);\n        return this.productService.getProducts(params).pipe(\n          map(paginatedResponse => {\n            console.log('ProductEffects: loadProducts success with response:', paginatedResponse);\n            return ProductActions.loadProductsSuccess({ paginatedResponse });\n          }),\n          catchError(error => {\n            console.error('ProductEffects: loadProducts error:', error);\n            return of(ProductActions.loadProductsFailure({ error }));\n          })\n        )\n      })\n    )\n  );\n\n  loadProductById$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProductActions.loadProductById),\n      switchMap(({ productId }) =>\n        this.productService.getProductById(productId).pipe(\n          map(product => ProductActions.loadProductByIdSuccess({ product })),\n          catchError(error => of(ProductActions.loadProductByIdFailure({ error })))\n        )\n      )\n    )\n  );\n\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProductActions.loadCategories),\n      switchMap(() => {\n        console.log('ProductEffects: loadCategories effect triggered');\n        return this.productService.getCategories().pipe(\n          map(categories => {\n            console.log('ProductEffects: loadCategories success with categories:', categories);\n            return ProductActions.loadCategoriesSuccess({ categories });\n          }),\n          catchError(error => {\n            console.error('ProductEffects: loadCategories error:', error);\n            return of(ProductActions.loadCategoriesFailure({ error }));\n          })\n        )\n      })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private productService: ProductService\n  ) {}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}