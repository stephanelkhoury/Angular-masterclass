{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nexhaustMap(([{\n  product,\n  quantity\n}, currentItems, isAuthenticated]) => {\n  const cartItem = {\n    productId: product.id,\n    name: product.name,\n    price: product.price,\n    image: product.imageUrl,\n    quantity\n  };\n  const updatedItems = [...currentItems];\n  Actions, createEffect, ofType;\n}, from, '@ngrx/effects');\nimport { of } from 'rxjs';\nimport { map, catchError, exhaustMap, tap, withLatestFrom } from 'rxjs/operators';\nimport * as CartActions from '../actions/cart.actions';\nimport { selectCartItems } from '../selectors/cart.selectors';\nimport { selectIsAuthenticated } from '../selectors/auth.selectors';\nlet CartEffects = class CartEffects {\n  constructor(actions$, cartService, storageService, notificationService, store) {\n    this.actions$ = actions$;\n    this.cartService = cartService;\n    this.storageService = storageService;\n    this.notificationService = notificationService;\n    this.store = store;\n    this.loadCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.loadCart), withLatestFrom(this.store.select(selectIsAuthenticated)), exhaustMap(([_, isAuthenticated]) => {\n      if (isAuthenticated) {\n        return this.cartService.getCart().pipe(map(items => CartActions.loadCartSuccess({\n          items\n        })), catchError(error => of(CartActions.loadCartFailure({\n          error\n        }))));\n      } else {\n        const localCart = this.storageService.getItem('cart') || '[]';\n        const items = JSON.parse(localCart);\n        return of(CartActions.loadCartSuccess({\n          items\n        }));\n      }\n    })));\n    this.addToCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.addToCart), withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)), tap(([{\n      product,\n      quantity\n    }, _, __]) => {\n      this.notificationService.showSuccess(`${product.name} added to cart`);\n    }), exhaustMap(([{\n      product,\n      quantity\n    }, currentItems, isAuthenticated]) => {\n      const cartItem = {\n        productId: product.id,\n        name: product.name,\n        price: product.price,\n        image: product.imageUrl,\n        quantity\n      };\n      const updatedItems = [...currentItems];\n      const existingItemIndex = updatedItems.findIndex(item => item.productId === product.id);\n      if (existingItemIndex >= 0) {\n        updatedItems[existingItemIndex] = {\n          ...updatedItems[existingItemIndex],\n          quantity: updatedItems[existingItemIndex].quantity + quantity\n        };\n      } else {\n        updatedItems.push(cartItem);\n      }\n      this.storageService.setItem('cart', JSON.stringify(updatedItems));\n      if (isAuthenticated) {\n        return this.cartService.syncCart(updatedItems).pipe(map(() => CartActions.syncCartWithServerSuccess()), catchError(error => of(CartActions.syncCartWithServerFailure({\n          error\n        }))));\n      }\n      return of(CartActions.syncCartWithServerSuccess());\n    })));\n    this.removeFromCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.removeFromCart), withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)), tap(([{\n      productId\n    }, currentItems, _]) => {\n      const item = currentItems.find(item => item.productId === productId);\n      if (item) {\n        this.notificationService.showInfo(`${item.name} removed from cart`);\n      }\n    }), exhaustMap(([{\n      productId\n    }, currentItems, isAuthenticated]) => {\n      const updatedItems = currentItems.filter(item => item.productId !== productId);\n      this.storageService.setItem('cart', JSON.stringify(updatedItems));\n      if (isAuthenticated) {\n        return this.cartService.syncCart(updatedItems).pipe(map(() => CartActions.syncCartWithServerSuccess()), catchError(error => of(CartActions.syncCartWithServerFailure({\n          error\n        }))));\n      }\n      return of(CartActions.syncCartWithServerSuccess());\n    })));\n    this.updateCartItemQuantity$ = createEffect(() => this.actions$.pipe(ofType(CartActions.updateCartItemQuantity), withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)), exhaustMap(([{\n      productId,\n      quantity\n    }, currentItems, isAuthenticated]) => {\n      const updatedItems = currentItems.map(item => item.productId === productId ? {\n        ...item,\n        quantity\n      } : item);\n      this.storageService.setItem('cart', JSON.stringify(updatedItems));\n      if (isAuthenticated) {\n        return this.cartService.syncCart(updatedItems).pipe(map(() => CartActions.syncCartWithServerSuccess()), catchError(error => of(CartActions.syncCartWithServerFailure({\n          error\n        }))));\n      }\n      return of(CartActions.syncCartWithServerSuccess());\n    })));\n    this.clearCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.clearCart), withLatestFrom(this.store.select(selectIsAuthenticated)), exhaustMap(([_, isAuthenticated]) => {\n      this.storageService.removeItem('cart');\n      if (isAuthenticated) {\n        return this.cartService.clearCart().pipe(map(() => CartActions.syncCartWithServerSuccess()), catchError(error => of(CartActions.syncCartWithServerFailure({\n          error\n        }))));\n      }\n      return of(CartActions.syncCartWithServerSuccess());\n    })));\n  }\n};\nCartEffects = __decorate([Injectable()], CartEffects);\nexport { CartEffects };","map":{"version":3,"names":["Injectable","exhaustMap","product","quantity","currentItems","isAuthenticated","cartItem","productId","id","name","price","image","imageUrl","updatedItems","Actions","createEffect","ofType","from","of","map","catchError","tap","withLatestFrom","CartActions","selectCartItems","selectIsAuthenticated","CartEffects","constructor","actions$","cartService","storageService","notificationService","store","loadCart$","pipe","loadCart","select","_","getCart","items","loadCartSuccess","error","loadCartFailure","localCart","getItem","JSON","parse","addToCart$","addToCart","__","showSuccess","existingItemIndex","findIndex","item","push","setItem","stringify","syncCart","syncCartWithServerSuccess","syncCartWithServerFailure","removeFromCart$","removeFromCart","find","showInfo","filter","updateCartItemQuantity$","updateCartItemQuantity","clearCart$","clearCart","removeItem","__decorate"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/store/effects/cart.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';      exhaustMap(([{ product, quantity }, currentItems, isAuthenticated]) => {\n        const cartItem: CartItem = {\n          productId: product.id,\n          name: product.name,\n          price: product.price,\n          image: product.imageUrl,\n          quantity\n        };\n\n        const updatedItems = [...currentItems];Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { map, catchError, exhaustMap, tap, withLatestFrom } from 'rxjs/operators';\n\nimport { CartService } from '../../core/services/cart.service';\nimport { NotificationService } from '../../core/services/notification.service';\nimport { StorageService } from '../../core/services/storage.service';\nimport { AppState } from '../index';\nimport * as CartActions from '../actions/cart.actions';\nimport * as UiActions from '../actions/ui.actions';\nimport { selectCartItems } from '../selectors/cart.selectors';\nimport { selectIsAuthenticated } from '../selectors/auth.selectors';\n\n@Injectable()\nexport class CartEffects {\n  loadCart$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.loadCart),\n      withLatestFrom(this.store.select(selectIsAuthenticated)),\n      exhaustMap(([_, isAuthenticated]) => {\n        if (isAuthenticated) {\n          return this.cartService.getCart().pipe(\n            map(items => CartActions.loadCartSuccess({ items })),\n            catchError(error => of(CartActions.loadCartFailure({ error })))\n          );\n        } else {\n          const localCart = this.storageService.getItem('cart') || '[]';\n          const items = JSON.parse(localCart);\n          return of(CartActions.loadCartSuccess({ items }));\n        }\n      })\n    )\n  );\n\n  addToCart$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.addToCart),\n      withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)),\n      tap(([{ product, quantity }, _, __]) => {\n        this.notificationService.showSuccess(`${product.name} added to cart`);\n      }),\n      exhaustMap(([{ product, quantity }, currentItems, isAuthenticated]) => {\n        const cartItem = {\n          productId: product.id,\n          name: product.name,\n          price: product.price,\n          image: product.imageUrl,\n          quantity\n        };\n\n        const updatedItems = [...currentItems];\n        const existingItemIndex = updatedItems.findIndex(item => item.productId === product.id);\n\n        if (existingItemIndex >= 0) {\n          updatedItems[existingItemIndex] = {\n            ...updatedItems[existingItemIndex],\n            quantity: updatedItems[existingItemIndex].quantity + quantity\n          };\n        } else {\n          updatedItems.push(cartItem);\n        }\n\n        this.storageService.setItem('cart', JSON.stringify(updatedItems));\n\n        if (isAuthenticated) {\n          return this.cartService.syncCart(updatedItems).pipe(\n            map(() => CartActions.syncCartWithServerSuccess()),\n            catchError(error => of(CartActions.syncCartWithServerFailure({ error })))\n          );\n        }\n        \n        return of(CartActions.syncCartWithServerSuccess());\n      })\n    )\n  );\n\n  removeFromCart$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.removeFromCart),\n      withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)),\n      tap(([{ productId }, currentItems, _]) => {\n        const item = currentItems.find(item => item.productId === productId);\n        if (item) {\n          this.notificationService.showInfo(`${item.name} removed from cart`);\n        }\n      }),\n      exhaustMap(([{ productId }, currentItems, isAuthenticated]) => {\n        const updatedItems = currentItems.filter(item => item.productId !== productId);\n        this.storageService.setItem('cart', JSON.stringify(updatedItems));\n\n        if (isAuthenticated) {\n          return this.cartService.syncCart(updatedItems).pipe(\n            map(() => CartActions.syncCartWithServerSuccess()),\n            catchError(error => of(CartActions.syncCartWithServerFailure({ error })))\n          );\n        }\n        \n        return of(CartActions.syncCartWithServerSuccess());\n      })\n    )\n  );\n\n  updateCartItemQuantity$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.updateCartItemQuantity),\n      withLatestFrom(this.store.select(selectCartItems), this.store.select(selectIsAuthenticated)),\n      exhaustMap(([{ productId, quantity }, currentItems, isAuthenticated]) => {\n        const updatedItems = currentItems.map(item => \n          item.productId === productId ? { ...item, quantity } : item\n        );\n        \n        this.storageService.setItem('cart', JSON.stringify(updatedItems));\n\n        if (isAuthenticated) {\n          return this.cartService.syncCart(updatedItems).pipe(\n            map(() => CartActions.syncCartWithServerSuccess()),\n            catchError(error => of(CartActions.syncCartWithServerFailure({ error })))\n          );\n        }\n        \n        return of(CartActions.syncCartWithServerSuccess());\n      })\n    )\n  );\n\n  clearCart$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(CartActions.clearCart),\n      withLatestFrom(this.store.select(selectIsAuthenticated)),\n      exhaustMap(([_, isAuthenticated]) => {\n        this.storageService.removeItem('cart');\n        \n        if (isAuthenticated) {\n          return this.cartService.clearCart().pipe(\n            map(() => CartActions.syncCartWithServerSuccess()),\n            catchError(error => of(CartActions.syncCartWithServerFailure({ error })))\n          );\n        }\n        \n        return of(CartActions.syncCartWithServerSuccess());\n      })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private cartService: CartService,\n    private storageService: StorageService,\n    private notificationService: NotificationService,\n    private store: Store<AppState>\n  ) {}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}