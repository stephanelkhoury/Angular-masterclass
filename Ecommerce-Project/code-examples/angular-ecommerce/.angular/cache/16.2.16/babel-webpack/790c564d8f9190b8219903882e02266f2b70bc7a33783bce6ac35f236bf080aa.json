{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nclass NotificationService {\n  constructor(snackBar) {\n    this.snackBar = snackBar;\n  }\n  show(message, duration = 3000) {\n    this.snackBar.open(message, 'Close', {\n      duration: duration,\n      verticalPosition: 'top',\n      horizontalPosition: 'right'\n    });\n  }\n  success(message, duration = 3000) {\n    this.snackBar.open(message, 'Close', {\n      duration: duration,\n      panelClass: ['notification-success'],\n      verticalPosition: 'top',\n      horizontalPosition: 'right'\n    });\n  }\n  error(message, duration = 5000) {\n    this.snackBar.open(message, 'Close', {\n      duration: duration,\n      panelClass: ['notification-error'],\n      verticalPosition: 'top',\n      horizontalPosition: 'right'\n    });\n  }\n  info(message, duration = 4000) {\n    this.snackBar.open(message, 'Close', {\n      duration: duration,\n      panelClass: ['notification-info'],\n      verticalPosition: 'top',\n      horizontalPosition: 'right'\n    });\n  }\n  warn(message, duration = 4000) {\n    this.snackBar.open(message, 'Close', {\n      duration: duration,\n      panelClass: ['notification-warn'],\n      verticalPosition: 'top',\n      horizontalPosition: 'right'\n    });\n  }\n  // Aliases for consistency with other parts of the app\n  showSuccess(message, duration = 3000) {\n    this.success(message, duration);\n  }\n  showError(message, duration = 5000) {\n    this.error(message, duration);\n  }\n  showInfo(message, duration = 4000) {\n    this.info(message, duration);\n  }\n  showWarning(message, duration = 4000) {\n    this.warn(message, duration);\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)(i0.ɵɵinject(i1.MatSnackBar));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { NotificationService };","map":{"version":3,"names":["NotificationService","constructor","snackBar","show","message","duration","open","verticalPosition","horizontalPosition","success","panelClass","error","info","warn","showSuccess","showError","showInfo","showWarning","i0","ɵɵinject","i1","MatSnackBar","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  \n  constructor(private snackBar: MatSnackBar) {}\n\n  show(message: string, duration: number = 3000): void {\n    this.snackBar.open(message, 'Close', {\n      duration: duration,\n      verticalPosition: 'top',\n      horizontalPosition: 'right'\n    });\n  }\n\n  success(message: string, duration: number = 3000): void {\n    this.snackBar.open(message, 'Close', {\n      duration: duration,\n      panelClass: ['notification-success'],\n      verticalPosition: 'top',\n      horizontalPosition: 'right'\n    });\n  }\n\n  error(message: string, duration: number = 5000): void {\n    this.snackBar.open(message, 'Close', {\n      duration: duration,\n      panelClass: ['notification-error'],\n      verticalPosition: 'top',\n      horizontalPosition: 'right'\n    });\n  }\n\n  info(message: string, duration: number = 4000): void {\n    this.snackBar.open(message, 'Close', {\n      duration: duration,\n      panelClass: ['notification-info'],\n      verticalPosition: 'top',\n      horizontalPosition: 'right'\n    });\n  }\n\n  warn(message: string, duration: number = 4000): void {\n    this.snackBar.open(message, 'Close', {\n      duration: duration,\n      panelClass: ['notification-warn'],\n      verticalPosition: 'top',\n      horizontalPosition: 'right'\n    });\n  }\n\n  // Aliases for consistency with other parts of the app\n  showSuccess(message: string, duration: number = 3000): void {\n    this.success(message, duration);\n  }\n\n  showError(message: string, duration: number = 5000): void {\n    this.error(message, duration);\n  }\n\n  showInfo(message: string, duration: number = 4000): void {\n    this.info(message, duration);\n  }\n\n  showWarning(message: string, duration: number = 4000): void {\n    this.warn(message, duration);\n  }\n}\n"],"mappings":";;AAGA,MAGaA,mBAAmB;EAE9BC,YAAoBC,QAAqB;IAArB,KAAAA,QAAQ,GAARA,QAAQ;EAAgB;EAE5CC,IAAIA,CAACC,OAAe,EAAEC,QAAA,GAAmB,IAAI;IAC3C,IAAI,CAACH,QAAQ,CAACI,IAAI,CAACF,OAAO,EAAE,OAAO,EAAE;MACnCC,QAAQ,EAAEA,QAAQ;MAClBE,gBAAgB,EAAE,KAAK;MACvBC,kBAAkB,EAAE;KACrB,CAAC;EACJ;EAEAC,OAAOA,CAACL,OAAe,EAAEC,QAAA,GAAmB,IAAI;IAC9C,IAAI,CAACH,QAAQ,CAACI,IAAI,CAACF,OAAO,EAAE,OAAO,EAAE;MACnCC,QAAQ,EAAEA,QAAQ;MAClBK,UAAU,EAAE,CAAC,sBAAsB,CAAC;MACpCH,gBAAgB,EAAE,KAAK;MACvBC,kBAAkB,EAAE;KACrB,CAAC;EACJ;EAEAG,KAAKA,CAACP,OAAe,EAAEC,QAAA,GAAmB,IAAI;IAC5C,IAAI,CAACH,QAAQ,CAACI,IAAI,CAACF,OAAO,EAAE,OAAO,EAAE;MACnCC,QAAQ,EAAEA,QAAQ;MAClBK,UAAU,EAAE,CAAC,oBAAoB,CAAC;MAClCH,gBAAgB,EAAE,KAAK;MACvBC,kBAAkB,EAAE;KACrB,CAAC;EACJ;EAEAI,IAAIA,CAACR,OAAe,EAAEC,QAAA,GAAmB,IAAI;IAC3C,IAAI,CAACH,QAAQ,CAACI,IAAI,CAACF,OAAO,EAAE,OAAO,EAAE;MACnCC,QAAQ,EAAEA,QAAQ;MAClBK,UAAU,EAAE,CAAC,mBAAmB,CAAC;MACjCH,gBAAgB,EAAE,KAAK;MACvBC,kBAAkB,EAAE;KACrB,CAAC;EACJ;EAEAK,IAAIA,CAACT,OAAe,EAAEC,QAAA,GAAmB,IAAI;IAC3C,IAAI,CAACH,QAAQ,CAACI,IAAI,CAACF,OAAO,EAAE,OAAO,EAAE;MACnCC,QAAQ,EAAEA,QAAQ;MAClBK,UAAU,EAAE,CAAC,mBAAmB,CAAC;MACjCH,gBAAgB,EAAE,KAAK;MACvBC,kBAAkB,EAAE;KACrB,CAAC;EACJ;EAEA;EACAM,WAAWA,CAACV,OAAe,EAAEC,QAAA,GAAmB,IAAI;IAClD,IAAI,CAACI,OAAO,CAACL,OAAO,EAAEC,QAAQ,CAAC;EACjC;EAEAU,SAASA,CAACX,OAAe,EAAEC,QAAA,GAAmB,IAAI;IAChD,IAAI,CAACM,KAAK,CAACP,OAAO,EAAEC,QAAQ,CAAC;EAC/B;EAEAW,QAAQA,CAACZ,OAAe,EAAEC,QAAA,GAAmB,IAAI;IAC/C,IAAI,CAACO,IAAI,CAACR,OAAO,EAAEC,QAAQ,CAAC;EAC9B;EAEAY,WAAWA,CAACb,OAAe,EAAEC,QAAA,GAAmB,IAAI;IAClD,IAAI,CAACQ,IAAI,CAACT,OAAO,EAAEC,QAAQ,CAAC;EAC9B;;;uBA/DWL,mBAAmB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAnBrB,mBAAmB;MAAAsB,OAAA,EAAnBtB,mBAAmB,CAAAuB,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;SAEPxB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}