{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nlet CacheInterceptor = /*#__PURE__*/(() => {\n  class CacheInterceptor {\n    constructor() {\n      this.cache = new Map();\n      this.CACHE_DURATION = 5 * 60 * 1000; // 5 minutes in milliseconds\n    }\n\n    intercept(request, next) {\n      // Only cache GET requests\n      if (request.method !== 'GET') {\n        return next.handle(request);\n      }\n      // Don't cache requests with 'no-cache' header\n      if (request.headers.get('no-cache')) {\n        return next.handle(request);\n      }\n      // Don't cache authentication requests\n      if (request.url.includes('/auth/')) {\n        return next.handle(request);\n      }\n      // Create a cache key from the request URL\n      const cacheKey = request.url;\n      // Check if we have a cached response and it's still valid\n      const cachedEntry = this.cache.get(cacheKey);\n      if (cachedEntry) {\n        const now = Date.now();\n        if (now - cachedEntry.timestamp < this.CACHE_DURATION) {\n          // Return the cached response\n          return of(cachedEntry.response);\n        } else {\n          // Cache expired, remove it\n          this.cache.delete(cacheKey);\n        }\n      }\n      // No cache hit or expired cache, forward the request\n      return next.handle(request).pipe(tap(event => {\n        if (event instanceof HttpResponse) {\n          // Cache the response\n          this.cache.set(cacheKey, {\n            response: event,\n            timestamp: Date.now()\n          });\n        }\n      }),\n      // Use shareReplay to handle multiple subscribers requesting the same API\n      shareReplay(1));\n    }\n    // Method to clear the cache\n    clearCache() {\n      this.cache.clear();\n    }\n    // Method to remove a specific entry from the cache\n    removeFromCache(url) {\n      this.cache.delete(url);\n    }\n    static {\n      this.ɵfac = function CacheInterceptor_Factory(t) {\n        return new (t || CacheInterceptor)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CacheInterceptor,\n        factory: CacheInterceptor.ɵfac\n      });\n    }\n  }\n  return CacheInterceptor;\n})();\nexport { CacheInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}