{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./notification.service\";\nlet ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http, notificationService) {\n      this.http = http;\n      this.notificationService = notificationService;\n      this.apiUrl = `${environment.apiUrl}/products`;\n      this.categoriesUrl = `${environment.apiUrl}/categories`;\n    }\n    getProducts(options = {}) {\n      let params = new HttpParams();\n      if (options.page) params = params.set('page', options.page.toString());\n      if (options.limit) params = params.set('limit', options.limit.toString());\n      if (options.sortBy) params = params.set('sortBy', options.sortBy);\n      if (options.order) params = params.set('order', options.order);\n      if (options.category) params = params.set('category', options.category);\n      if (options.minPrice) params = params.set('minPrice', options.minPrice.toString());\n      if (options.maxPrice) params = params.set('maxPrice', options.maxPrice.toString());\n      if (options.search) params = params.set('search', options.search);\n      return this.http.get(this.apiUrl, {\n        params\n      }).pipe(catchError(this.handleError('Failed to load products')));\n    }\n    getProductById(id) {\n      return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError('Failed to load product details')));\n    }\n    getCategories() {\n      return this.http.get(this.categoriesUrl).pipe(map(categories => this.buildCategoryTree(categories)), catchError(this.handleError('Failed to load categories')));\n    }\n    getProductReviews(productId, page = 1, limit = 10) {\n      const params = new HttpParams().set('page', page.toString()).set('limit', limit.toString());\n      return this.http.get(`${this.apiUrl}/${productId}/reviews`, {\n        params\n      }).pipe(catchError(this.handleError('Failed to load product reviews')));\n    }\n    addProductReview(productId, review) {\n      return this.http.post(`${this.apiUrl}/${productId}/reviews`, review).pipe(catchError(this.handleError('Failed to submit your review')));\n    }\n    getFeaturedProducts(limit = 8) {\n      const params = new HttpParams().set('limit', limit.toString()).set('featured', 'true');\n      return this.http.get(this.apiUrl, {\n        params\n      }).pipe(map(response => response.products), catchError(this.handleError('Failed to load featured products')));\n    }\n    getRelatedProducts(productId, limit = 4) {\n      const params = new HttpParams().set('limit', limit.toString());\n      return this.http.get(`${this.apiUrl}/${productId}/related`, {\n        params\n      }).pipe(catchError(this.handleError('Failed to load related products')));\n    }\n    buildCategoryTree(categories) {\n      // Create a map for faster lookup\n      const categoryMap = new Map();\n      categories.forEach(category => {\n        categoryMap.set(category.id, {\n          ...category,\n          children: []\n        });\n      });\n      // Identify top-level categories and build hierarchy\n      const rootCategories = [];\n      categoryMap.forEach(category => {\n        if (!category.parentId) {\n          rootCategories.push(category);\n        } else {\n          const parent = categoryMap.get(category.parentId);\n          if (parent) {\n            parent.children = parent.children || [];\n            parent.children.push(category);\n          }\n        }\n      });\n      return rootCategories;\n    }\n    handleError(message) {\n      return error => {\n        this.notificationService.error(message);\n        throw error;\n      };\n    }\n    // Store management methods\n    loadProducts() {\n      return this.getProducts().pipe(map(response => response.products));\n    }\n    loadCategories() {\n      return this.getCategories();\n    }\n    loadProductById(id) {\n      return this.getProductById(id);\n    }\n    static {\n      this.ɵfac = function ProductService_Factory(t) {\n        return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ProductService,\n        factory: ProductService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ProductService;\n})();\nexport { ProductService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}