{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./storage.service\";\nimport * as i3 from \"./notification.service\";\nclass AuthService {\n  constructor(http, storageService, notificationService) {\n    this.http = http;\n    this.storageService = storageService;\n    this.notificationService = notificationService;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n  }\n  signup(email, password, name) {\n    return this.http.post(`${this.apiUrl}/signup`, {\n      email,\n      password,\n      name\n    }).pipe(tap(response => this.handleAuthentication(response)), catchError(error => {\n      this.notificationService.error('Registration failed. Please try again.');\n      return throwError(() => error);\n    }));\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => this.handleAuthentication(response)), catchError(error => {\n      this.notificationService.error('Login failed. Please check your credentials and try again.');\n      return throwError(() => error);\n    }));\n  }\n  logout() {\n    this.storageService.removeItem('userData');\n    this.storageService.removeItem('token');\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n  autoLogin() {\n    const userData = this.storageService.getItem('userData');\n    if (!userData) {\n      return of(false);\n    }\n    const loadedUser = userData.user;\n    const tokenExpirationDate = new Date(userData.tokenExpirationDate);\n    if (tokenExpirationDate <= new Date()) {\n      this.logout();\n      return of(false);\n    }\n    this.setAutoLogoutTimer(tokenExpirationDate.getTime() - new Date().getTime());\n    return of(true);\n  }\n  getCurrentUser() {\n    const userData = this.storageService.getItem('userData');\n    return of(userData?.user || null);\n  }\n  isAuthenticated() {\n    const userData = this.storageService.getItem('userData');\n    if (!userData) {\n      return false;\n    }\n    const tokenExpirationDate = new Date(userData.tokenExpirationDate);\n    return tokenExpirationDate > new Date();\n  }\n  getToken() {\n    const userData = this.storageService.getItem('userData');\n    return userData?.token || null;\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  handleAuthentication(authData) {\n    const expirationDate = new Date(new Date().getTime() + authData.expiresIn * 1000);\n    const userData = {\n      user: authData.user,\n      token: authData.token,\n      tokenExpirationDate: expirationDate.toISOString()\n    };\n    this.storageService.setItem('userData', userData);\n    this.setAutoLogoutTimer(authData.expiresIn * 1000);\n  }\n  setAutoLogoutTimer(duration) {\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, duration);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService), i0.ɵɵinject(i3.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["of","throwError","catchError","tap","environment","AuthService","constructor","http","storageService","notificationService","apiUrl","signup","email","password","name","post","pipe","response","handleAuthentication","error","login","logout","removeItem","tokenExpirationTimer","clearTimeout","autoLogin","userData","getItem","loadedUser","user","tokenExpirationDate","Date","setAutoLogoutTimer","getTime","getCurrentUser","isAuthenticated","getToken","token","authData","expirationDate","expiresIn","toISOString","setItem","duration","setTimeout","i0","ɵɵinject","i1","HttpClient","i2","StorageService","i3","NotificationService","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\n\nimport { environment } from '../../../environments/environment';\nimport { StorageService } from './storage.service';\nimport { NotificationService } from './notification.service';\nimport { User, AuthResponse } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private tokenExpirationTimer: any;\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService,\n    private notificationService: NotificationService\n  ) {}\n\n  signup(email: string, password: string, name: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/signup`, { email, password, name })\n      .pipe(\n        tap(response => this.handleAuthentication(response)),\n        catchError(error => {\n          this.notificationService.error('Registration failed. Please try again.');\n          return throwError(() => error);\n        })\n      );\n  }\n\n  login(email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, { email, password })\n      .pipe(\n        tap(response => this.handleAuthentication(response)),\n        catchError(error => {\n          this.notificationService.error('Login failed. Please check your credentials and try again.');\n          return throwError(() => error);\n        })\n      );\n  }\n\n  logout(): void {\n    this.storageService.removeItem('userData');\n    this.storageService.removeItem('token');\n    \n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n\n  autoLogin(): Observable<boolean> {\n    const userData = this.storageService.getItem<{\n      user: User;\n      token: string;\n      tokenExpirationDate: string;\n    }>('userData');\n\n    if (!userData) {\n      return of(false);\n    }\n\n    const loadedUser = userData.user;\n    const tokenExpirationDate = new Date(userData.tokenExpirationDate);\n\n    if (tokenExpirationDate <= new Date()) {\n      this.logout();\n      return of(false);\n    }\n\n    this.setAutoLogoutTimer(tokenExpirationDate.getTime() - new Date().getTime());\n    return of(true);\n  }\n\n  getCurrentUser(): Observable<User> {\n    const userData = this.storageService.getItem<{\n      user: User;\n      token: string;\n      tokenExpirationDate: string;\n    }>('userData');\n    \n    return of(userData?.user || null);\n  }\n\n  isAuthenticated(): boolean {\n    const userData = this.storageService.getItem<{\n      user: User;\n      token: string;\n      tokenExpirationDate: string;\n    }>('userData');\n    \n    if (!userData) {\n      return false;\n    }\n    \n    const tokenExpirationDate = new Date(userData.tokenExpirationDate);\n    return tokenExpirationDate > new Date();\n  }\n\n  getToken(): string | null {\n    const userData = this.storageService.getItem<{\n      user: User;\n      token: string;\n      tokenExpirationDate: string;\n    }>('userData');\n    \n    return userData?.token || null;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  private handleAuthentication(authData: AuthResponse): void {\n    const expirationDate = new Date(new Date().getTime() + authData.expiresIn * 1000);\n    \n    const userData = {\n      user: authData.user,\n      token: authData.token,\n      tokenExpirationDate: expirationDate.toISOString()\n    };\n    \n    this.storageService.setItem('userData', userData);\n    this.setAutoLogoutTimer(authData.expiresIn * 1000);\n  }\n\n  private setAutoLogoutTimer(duration: number): void {\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    \n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, duration);\n  }\n}\n"],"mappings":"AAEA,SAAqBA,EAAE,EAAEC,UAAU,QAAQ,MAAM;AACjD,SAASC,UAAU,EAAEC,GAAG,QAAa,gBAAgB;AAErD,SAASC,WAAW,QAAQ,mCAAmC;;;;;AAK/D,MAGaC,WAAW;EAItBC,YACUC,IAAgB,EAChBC,cAA8B,EAC9BC,mBAAwC;IAFxC,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,cAAc,GAAdA,cAAc;IACd,KAAAC,mBAAmB,GAAnBA,mBAAmB;IANrB,KAAAC,MAAM,GAAG,GAAGN,WAAW,CAACM,MAAM,OAAO;EAO1C;EAEHC,MAAMA,CAACC,KAAa,EAAEC,QAAgB,EAAEC,IAAY;IAClD,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAe,GAAG,IAAI,CAACL,MAAM,SAAS,EAAE;MAAEE,KAAK;MAAEC,QAAQ;MAAEC;IAAI,CAAE,CAAC,CACpFE,IAAI,CACHb,GAAG,CAACc,QAAQ,IAAI,IAAI,CAACC,oBAAoB,CAACD,QAAQ,CAAC,CAAC,EACpDf,UAAU,CAACiB,KAAK,IAAG;MACjB,IAAI,CAACV,mBAAmB,CAACU,KAAK,CAAC,wCAAwC,CAAC;MACxE,OAAOlB,UAAU,CAAC,MAAMkB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACL;EAEAC,KAAKA,CAACR,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACN,IAAI,CAACQ,IAAI,CAAe,GAAG,IAAI,CAACL,MAAM,QAAQ,EAAE;MAAEE,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAC7EG,IAAI,CACHb,GAAG,CAACc,QAAQ,IAAI,IAAI,CAACC,oBAAoB,CAACD,QAAQ,CAAC,CAAC,EACpDf,UAAU,CAACiB,KAAK,IAAG;MACjB,IAAI,CAACV,mBAAmB,CAACU,KAAK,CAAC,4DAA4D,CAAC;MAC5F,OAAOlB,UAAU,CAAC,MAAMkB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACL;EAEAE,MAAMA,CAAA;IACJ,IAAI,CAACb,cAAc,CAACc,UAAU,CAAC,UAAU,CAAC;IAC1C,IAAI,CAACd,cAAc,CAACc,UAAU,CAAC,OAAO,CAAC;IAEvC,IAAI,IAAI,CAACC,oBAAoB,EAAE;MAC7BC,YAAY,CAAC,IAAI,CAACD,oBAAoB,CAAC;;IAEzC,IAAI,CAACA,oBAAoB,GAAG,IAAI;EAClC;EAEAE,SAASA,CAAA;IACP,MAAMC,QAAQ,GAAG,IAAI,CAAClB,cAAc,CAACmB,OAAO,CAIzC,UAAU,CAAC;IAEd,IAAI,CAACD,QAAQ,EAAE;MACb,OAAO1B,EAAE,CAAC,KAAK,CAAC;;IAGlB,MAAM4B,UAAU,GAAGF,QAAQ,CAACG,IAAI;IAChC,MAAMC,mBAAmB,GAAG,IAAIC,IAAI,CAACL,QAAQ,CAACI,mBAAmB,CAAC;IAElE,IAAIA,mBAAmB,IAAI,IAAIC,IAAI,EAAE,EAAE;MACrC,IAAI,CAACV,MAAM,EAAE;MACb,OAAOrB,EAAE,CAAC,KAAK,CAAC;;IAGlB,IAAI,CAACgC,kBAAkB,CAACF,mBAAmB,CAACG,OAAO,EAAE,GAAG,IAAIF,IAAI,EAAE,CAACE,OAAO,EAAE,CAAC;IAC7E,OAAOjC,EAAE,CAAC,IAAI,CAAC;EACjB;EAEAkC,cAAcA,CAAA;IACZ,MAAMR,QAAQ,GAAG,IAAI,CAAClB,cAAc,CAACmB,OAAO,CAIzC,UAAU,CAAC;IAEd,OAAO3B,EAAE,CAAC0B,QAAQ,EAAEG,IAAI,IAAI,IAAI,CAAC;EACnC;EAEAM,eAAeA,CAAA;IACb,MAAMT,QAAQ,GAAG,IAAI,CAAClB,cAAc,CAACmB,OAAO,CAIzC,UAAU,CAAC;IAEd,IAAI,CAACD,QAAQ,EAAE;MACb,OAAO,KAAK;;IAGd,MAAMI,mBAAmB,GAAG,IAAIC,IAAI,CAACL,QAAQ,CAACI,mBAAmB,CAAC;IAClE,OAAOA,mBAAmB,GAAG,IAAIC,IAAI,EAAE;EACzC;EAEAK,QAAQA,CAAA;IACN,MAAMV,QAAQ,GAAG,IAAI,CAAClB,cAAc,CAACmB,OAAO,CAIzC,UAAU,CAAC;IAEd,OAAOD,QAAQ,EAAEW,KAAK,IAAI,IAAI;EAChC;EAEAF,eAAeA,CAAA;IACb,OAAO,CAAC,CAAC,IAAI,CAACC,QAAQ,EAAE;EAC1B;EAEQlB,oBAAoBA,CAACoB,QAAsB;IACjD,MAAMC,cAAc,GAAG,IAAIR,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACE,OAAO,EAAE,GAAGK,QAAQ,CAACE,SAAS,GAAG,IAAI,CAAC;IAEjF,MAAMd,QAAQ,GAAG;MACfG,IAAI,EAAES,QAAQ,CAACT,IAAI;MACnBQ,KAAK,EAAEC,QAAQ,CAACD,KAAK;MACrBP,mBAAmB,EAAES,cAAc,CAACE,WAAW;KAChD;IAED,IAAI,CAACjC,cAAc,CAACkC,OAAO,CAAC,UAAU,EAAEhB,QAAQ,CAAC;IACjD,IAAI,CAACM,kBAAkB,CAACM,QAAQ,CAACE,SAAS,GAAG,IAAI,CAAC;EACpD;EAEQR,kBAAkBA,CAACW,QAAgB;IACzC,IAAI,IAAI,CAACpB,oBAAoB,EAAE;MAC7BC,YAAY,CAAC,IAAI,CAACD,oBAAoB,CAAC;;IAGzC,IAAI,CAACA,oBAAoB,GAAGqB,UAAU,CAAC,MAAK;MAC1C,IAAI,CAACvB,MAAM,EAAE;IACf,CAAC,EAAEsB,QAAQ,CAAC;EACd;;;uBA7HWtC,WAAW,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAAX/C,WAAW;MAAAgD,OAAA,EAAXhD,WAAW,CAAAiD,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEPlD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}