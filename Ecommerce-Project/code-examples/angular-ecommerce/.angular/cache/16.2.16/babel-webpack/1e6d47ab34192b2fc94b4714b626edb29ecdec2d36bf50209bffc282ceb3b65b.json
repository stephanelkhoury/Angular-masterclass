{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, catchError, switchMap } from 'rxjs/operators';\nimport * as ProductActions from '../actions/product.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../core/services/product.service\";\nlet ProductEffects = /*#__PURE__*/(() => {\n  class ProductEffects {\n    constructor(actions$, productService) {\n      this.actions$ = actions$;\n      this.productService = productService;\n      this.loadProducts$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.loadProducts), switchMap(({\n        params\n      }) => {\n        console.log('ProductEffects: loadProducts effect triggered with params:', params);\n        return this.productService.getProducts(params).pipe(map(paginatedResponse => {\n          console.log('ProductEffects: loadProducts success with response:', paginatedResponse);\n          return ProductActions.loadProductsSuccess({\n            paginatedResponse\n          });\n        }), catchError(error => {\n          console.error('ProductEffects: loadProducts error:', error);\n          return of(ProductActions.loadProductsFailure({\n            error\n          }));\n        }));\n      })));\n      this.loadProductById$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.loadProductById), switchMap(({\n        productId\n      }) => this.productService.getProductById(productId).pipe(map(product => ProductActions.loadProductByIdSuccess({\n        product\n      })), catchError(error => of(ProductActions.loadProductByIdFailure({\n        error\n      })))))));\n      this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.loadCategories), switchMap(() => {\n        console.log('ProductEffects: loadCategories effect triggered');\n        return this.productService.getCategories().pipe(map(categories => {\n          console.log('ProductEffects: loadCategories success with categories:', categories);\n          return ProductActions.loadCategoriesSuccess({\n            categories\n          });\n        }), catchError(error => {\n          console.error('ProductEffects: loadCategories error:', error);\n          return of(ProductActions.loadCategoriesFailure({\n            error\n          }));\n        }));\n      })));\n    }\n    static {\n      this.ɵfac = function ProductEffects_Factory(t) {\n        return new (t || ProductEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ProductEffects,\n        factory: ProductEffects.ɵfac\n      });\n    }\n  }\n  return ProductEffects;\n})();\nexport { ProductEffects };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}