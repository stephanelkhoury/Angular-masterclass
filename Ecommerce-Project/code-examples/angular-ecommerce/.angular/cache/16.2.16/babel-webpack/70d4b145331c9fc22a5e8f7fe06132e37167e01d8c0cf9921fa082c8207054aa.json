{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport { addToCart, removeFromCart, updateQuantity } from '../../store/actions/cart.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nclass CartService {\n  constructor(http, store) {\n    this.http = http;\n    this.store = store;\n    this.apiUrl = `${environment.apiUrl}/cart`;\n  }\n  loadCart() {\n    return this.http.get(this.apiUrl);\n  }\n  getCart() {\n    return this.http.get(this.apiUrl);\n  }\n  addToCart(product, quantity = 1) {\n    // Dispatch action to add to cart in store\n    this.store.dispatch(addToCart({\n      productId: product.id,\n      quantity\n    }));\n    // Also sync with server\n    const cartItem = {\n      productId: product.id,\n      quantity\n    };\n    return this.http.post(this.apiUrl, cartItem);\n  }\n  removeFromCart(id) {\n    this.store.dispatch(removeFromCart({\n      productId: id\n    }));\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  updateItemQuantity(id, quantity) {\n    this.store.dispatch(updateQuantity({\n      productId: id,\n      quantity\n    }));\n    return this.http.patch(`${this.apiUrl}/${id}`, {\n      quantity\n    });\n  }\n  clearCart() {\n    return this.http.delete(`${this.apiUrl}/clear`);\n  }\n  syncCart(items) {\n    return this.http.post(`${this.apiUrl}/sync`, {\n      items\n    });\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { CartService };","map":{"version":3,"names":["environment","addToCart","removeFromCart","updateQuantity","CartService","constructor","http","store","apiUrl","loadCart","get","getCart","product","quantity","dispatch","productId","id","cartItem","post","delete","updateItemQuantity","patch","clearCart","syncCart","items","i0","ɵɵinject","i1","HttpClient","i2","Store","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/services/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { Store } from '@ngrx/store';\n\nimport { environment } from '../../../environments/environment';\nimport { CartItem } from '../models/cart.model';\nimport { Product } from '../models/product.model';\nimport { AppState } from '../../store';\nimport { addToCart, removeFromCart, updateQuantity } from '../../store/actions/cart.actions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private apiUrl = `${environment.apiUrl}/cart`;\n\n  constructor(\n    private http: HttpClient,\n    private store: Store<AppState>\n  ) {}\n\n  loadCart(): Observable<CartItem[]> {\n    return this.http.get<CartItem[]>(this.apiUrl);\n  }\n\n  getCart(): Observable<CartItem[]> {\n    return this.http.get<CartItem[]>(this.apiUrl);\n  }\n\n  addToCart(product: Product, quantity = 1): Observable<CartItem> {\n    // Dispatch action to add to cart in store\n    this.store.dispatch(addToCart({ productId: product.id, quantity }));\n    \n    // Also sync with server\n    const cartItem: Partial<CartItem> = {\n      productId: product.id,\n      quantity\n    };\n    return this.http.post<CartItem>(this.apiUrl, cartItem);\n  }\n\n  removeFromCart(id: string): Observable<void> {\n    this.store.dispatch(removeFromCart({ productId: id }));\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n\n  updateItemQuantity(id: string, quantity: number): Observable<CartItem> {\n    this.store.dispatch(updateQuantity({ productId: id, quantity }));\n    return this.http.patch<CartItem>(`${this.apiUrl}/${id}`, { quantity });\n  }\n\n  clearCart(): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/clear`);\n  }\n\n  syncCart(items: CartItem[]): Observable<void> {\n    return this.http.post<void>(`${this.apiUrl}/sync`, { items });\n  }\n}\n"],"mappings":"AAKA,SAASA,WAAW,QAAQ,mCAAmC;AAI/D,SAASC,SAAS,EAAEC,cAAc,EAAEC,cAAc,QAAQ,kCAAkC;;;;AAE5F,MAGaC,WAAW;EAGtBC,YACUC,IAAgB,EAChBC,KAAsB;IADtB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,KAAK,GAALA,KAAK;IAJP,KAAAC,MAAM,GAAG,GAAGR,WAAW,CAACQ,MAAM,OAAO;EAK1C;EAEHC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAa,IAAI,CAACF,MAAM,CAAC;EAC/C;EAEAG,OAAOA,CAAA;IACL,OAAO,IAAI,CAACL,IAAI,CAACI,GAAG,CAAa,IAAI,CAACF,MAAM,CAAC;EAC/C;EAEAP,SAASA,CAACW,OAAgB,EAAEC,QAAQ,GAAG,CAAC;IACtC;IACA,IAAI,CAACN,KAAK,CAACO,QAAQ,CAACb,SAAS,CAAC;MAAEc,SAAS,EAAEH,OAAO,CAACI,EAAE;MAAEH;IAAQ,CAAE,CAAC,CAAC;IAEnE;IACA,MAAMI,QAAQ,GAAsB;MAClCF,SAAS,EAAEH,OAAO,CAACI,EAAE;MACrBH;KACD;IACD,OAAO,IAAI,CAACP,IAAI,CAACY,IAAI,CAAW,IAAI,CAACV,MAAM,EAAES,QAAQ,CAAC;EACxD;EAEAf,cAAcA,CAACc,EAAU;IACvB,IAAI,CAACT,KAAK,CAACO,QAAQ,CAACZ,cAAc,CAAC;MAAEa,SAAS,EAAEC;IAAE,CAAE,CAAC,CAAC;IACtD,OAAO,IAAI,CAACV,IAAI,CAACa,MAAM,CAAO,GAAG,IAAI,CAACX,MAAM,IAAIQ,EAAE,EAAE,CAAC;EACvD;EAEAI,kBAAkBA,CAACJ,EAAU,EAAEH,QAAgB;IAC7C,IAAI,CAACN,KAAK,CAACO,QAAQ,CAACX,cAAc,CAAC;MAAEY,SAAS,EAAEC,EAAE;MAAEH;IAAQ,CAAE,CAAC,CAAC;IAChE,OAAO,IAAI,CAACP,IAAI,CAACe,KAAK,CAAW,GAAG,IAAI,CAACb,MAAM,IAAIQ,EAAE,EAAE,EAAE;MAAEH;IAAQ,CAAE,CAAC;EACxE;EAEAS,SAASA,CAAA;IACP,OAAO,IAAI,CAAChB,IAAI,CAACa,MAAM,CAAO,GAAG,IAAI,CAACX,MAAM,QAAQ,CAAC;EACvD;EAEAe,QAAQA,CAACC,KAAiB;IACxB,OAAO,IAAI,CAAClB,IAAI,CAACY,IAAI,CAAO,GAAG,IAAI,CAACV,MAAM,OAAO,EAAE;MAAEgB;IAAK,CAAE,CAAC;EAC/D;;;uBA5CWpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,KAAA;IAAA;EAAA;;;aAAX1B,WAAW;MAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEP7B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}