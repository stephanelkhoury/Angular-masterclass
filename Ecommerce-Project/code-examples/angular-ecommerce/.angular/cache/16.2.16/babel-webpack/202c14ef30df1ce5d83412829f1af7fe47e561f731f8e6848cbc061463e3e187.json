{"ast":null,"code":"import { BehaviorSubject, Observable, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nlet CompareService = /*#__PURE__*/(() => {\n  class CompareService {\n    constructor(storageService) {\n      this.storageService = storageService;\n      this.COMPARE_KEY = 'ecommerce_compare';\n      this.MAX_COMPARE_ITEMS = 4;\n      this.compareSubject = new BehaviorSubject([]);\n      this.compare$ = this.compareSubject.asObservable();\n      this.compareCount$ = this.compare$.pipe(map(items => items.length));\n      this.loadCompareList();\n    }\n    loadCompareList() {\n      const savedCompare = this.storageService.getItem(this.COMPARE_KEY);\n      if (savedCompare && Array.isArray(savedCompare)) {\n        this.compareSubject.next(savedCompare);\n      }\n    }\n    saveCompareList() {\n      this.storageService.setItem(this.COMPARE_KEY, this.compareSubject.value);\n    }\n    addToCompare(product) {\n      return new Observable(observer => {\n        const currentCompare = this.compareSubject.value;\n        const existingIndex = currentCompare.findIndex(item => item.id === product.id);\n        if (existingIndex !== -1) {\n          observer.next({\n            success: false,\n            message: 'Product is already in compare list'\n          });\n          observer.complete();\n          return;\n        }\n        if (currentCompare.length >= this.MAX_COMPARE_ITEMS) {\n          observer.next({\n            success: false,\n            message: `You can only compare up to ${this.MAX_COMPARE_ITEMS} products`\n          });\n          observer.complete();\n          return;\n        }\n        const updatedCompare = [...currentCompare, product];\n        this.compareSubject.next(updatedCompare);\n        this.saveCompareList();\n        observer.next({\n          success: true,\n          message: 'Product added to compare list'\n        });\n        observer.complete();\n      });\n    }\n    removeFromCompare(productId) {\n      const currentCompare = this.compareSubject.value;\n      const updatedCompare = currentCompare.filter(item => item.id !== productId);\n      this.compareSubject.next(updatedCompare);\n      this.saveCompareList();\n    }\n    isInCompare(productId) {\n      return this.compare$.pipe(map(items => items.some(item => item.id === productId)));\n    }\n    clearCompare() {\n      this.compareSubject.next([]);\n      this.saveCompareList();\n    }\n    getCompareList() {\n      return this.compareSubject.value;\n    }\n    canAddMore() {\n      return this.compareSubject.value.length < this.MAX_COMPARE_ITEMS;\n    }\n    getMaxItems() {\n      return this.MAX_COMPARE_ITEMS;\n    }\n    static {\n      this.ɵfac = function CompareService_Factory(t) {\n        return new (t || CompareService)(i0.ɵɵinject(i1.StorageService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CompareService,\n        factory: CompareService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CompareService;\n})();\nexport { CompareService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}