{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, filter, map } from 'rxjs/operators';\nlet HeaderComponent = class HeaderComponent {\n  constructor(store, authService, cartService, router) {\n    this.store = store;\n    this.authService = authService;\n    this.cartService = cartService;\n    this.router = router;\n    // Search functionality\n    this.searchControl = new FormControl('');\n    this.searchSuggestions = [];\n    this.showSearchSuggestions = false;\n    this.mobileSearchOpen = false;\n    this.showMobileSearch = false;\n    // Mobile menu state\n    this.mobileMenuOpen = false;\n    this.showMobileMenu = false;\n    this.megaMenuOpen = false;\n    this.showMobileCategories = false;\n    // Categories for mega menu\n    this.categories = [{\n      name: 'Electronics',\n      icon: 'devices',\n      subcategories: ['Smartphones', 'Laptops', 'Tablets', 'Accessories']\n    }, {\n      name: 'Fashion',\n      icon: 'checkroom',\n      subcategories: ['Men\\'s Clothing', 'Women\\'s Clothing', 'Shoes', 'Bags']\n    }, {\n      name: 'Home & Garden',\n      icon: 'home',\n      subcategories: ['Furniture', 'Decor', 'Kitchen', 'Garden']\n    }, {\n      name: 'Sports',\n      icon: 'sports_soccer',\n      subcategories: ['Fitness', 'Outdoor', 'Team Sports', 'Equipment']\n    }];\n    // Popular categories observable\n    this.popularCategories$ = new BehaviorSubject(this.categories).asObservable();\n    // User notifications (mock data)\n    this.notificationsSubject = new BehaviorSubject([{\n      id: 1,\n      message: 'Your order has been shipped!',\n      type: 'success',\n      timestamp: new Date(),\n      createdAt: new Date(),\n      read: false\n    }, {\n      id: 2,\n      message: 'New products available in Electronics',\n      type: 'info',\n      timestamp: new Date(),\n      createdAt: new Date(),\n      read: false\n    }]);\n    // Mobile detection\n    this.isMobile = false;\n    this.isLoggedIn$ = this.store.select(state => !!state.auth.user);\n    this.currentUser$ = this.store.select(state => state.auth.user);\n    this.cartItems$ = this.store.select(state => state.cart.items);\n    this.cartItemCount$ = this.store.select(state => state.cart.items.reduce((count, item) => count + item.quantity, 0));\n    this.isAdmin$ = this.store.select(state => state.auth.user?.role === 'admin');\n    // Alias for template compatibility\n    this.isAuthenticated$ = this.isLoggedIn$;\n    // Mock observables for wishlist and notifications\n    this.wishlistCount$ = new BehaviorSubject(3).asObservable();\n    this.notifications$ = this.notificationsSubject.asObservable();\n    this.notificationCount$ = this.notificationsSubject.pipe(map(notifications => notifications.filter(n => !n.read).length));\n    this.detectMobile();\n  }\n  ngOnInit() {\n    // Load cart items when component initializes\n    this.cartService.loadCart();\n    // Setup search functionality\n    this.searchControl.valueChanges.pipe(debounceTime(300), distinctUntilChanged(), filter(term => term !== null && term.length >= 2)).subscribe(term => {\n      this.onSearch(term);\n    });\n  }\n  onResize(event) {\n    this.detectMobile();\n  }\n  onDocumentClick(event) {\n    // Close search suggestions when clicking outside\n    if (!event.target.closest('.search-container')) {\n      this.showSearchSuggestions = false;\n    }\n    // Close mega menu when clicking outside\n    if (!event.target.closest('.mega-menu-trigger') && !event.target.closest('.mega-menu')) {\n      this.megaMenuOpen = false;\n    }\n  }\n  // Search functionality - handles both with and without parameters\n  onSearch(term) {\n    const searchTerm = term !== undefined ? term || '' : this.searchControl.value || '';\n    if (!searchTerm || searchTerm.length < 2) {\n      this.searchSuggestions = [];\n      this.showSearchSuggestions = false;\n      if (term === undefined) {\n        // If called without parameter (button click), perform search anyway\n        this.performSearch(searchTerm);\n      }\n      return;\n    }\n    // Mock search suggestions\n    const mockSuggestions = ['iPhone 15 Pro', 'Samsung Galaxy S24', 'MacBook Pro', 'AirPods Pro', 'iPad Air', 'Google Pixel 8', 'Sony WH-1000XM5', 'Nintendo Switch'];\n    this.searchSuggestions = mockSuggestions.filter(suggestion => suggestion.toLowerCase().includes(searchTerm.toLowerCase())).slice(0, 5);\n    this.showSearchSuggestions = this.searchSuggestions.length > 0;\n    // If called without parameter (from button click), perform search\n    if (term === undefined) {\n      this.performSearch(searchTerm);\n    }\n  }\n  clearSearch() {\n    this.searchControl.setValue('');\n    this.searchSuggestions = [];\n    this.showSearchSuggestions = false;\n  }\n  selectSuggestion(suggestion) {\n    this.searchControl.setValue(suggestion);\n    this.showSearchSuggestions = false;\n    this.performSearch(suggestion);\n  }\n  performSearch(term) {\n    if (term) {\n      this.router.navigate(['/products'], {\n        queryParams: {\n          search: term\n        }\n      });\n      this.showSearchSuggestions = false;\n      if (this.mobileSearchOpen) {\n        this.toggleMobileSearch();\n      }\n    }\n  }\n  // Mobile search toggle\n  toggleMobileSearch() {\n    this.mobileSearchOpen = !this.mobileSearchOpen;\n    this.showMobileSearch = this.mobileSearchOpen;\n    if (this.mobileSearchOpen) {\n      // Focus search input after animation\n      setTimeout(() => {\n        const searchInput = document.querySelector('.mobile-search input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, 300);\n    }\n  }\n  // Mobile menu\n  toggleMobileMenu() {\n    this.mobileMenuOpen = !this.mobileMenuOpen;\n    this.showMobileMenu = this.mobileMenuOpen;\n    // Prevent body scroll when menu is open\n    document.body.style.overflow = this.mobileMenuOpen ? 'hidden' : '';\n  }\n  closeMobileMenu() {\n    this.mobileMenuOpen = false;\n    this.showMobileMenu = false;\n    document.body.style.overflow = '';\n  }\n  // Mobile categories toggle\n  toggleMobileCategories() {\n    this.showMobileCategories = !this.showMobileCategories;\n  }\n  // Mega menu\n  toggleMegaMenu() {\n    this.megaMenuOpen = !this.megaMenuOpen;\n  }\n  // Navigation methods\n  navigateToCategory(category) {\n    this.router.navigate(['/products'], {\n      queryParams: {\n        category: category.toLowerCase()\n      }\n    });\n    this.closeMobileMenu();\n    this.megaMenuOpen = false;\n  }\n  navigateToSubcategory(subcategory) {\n    this.router.navigate(['/products'], {\n      queryParams: {\n        subcategory: subcategory.toLowerCase()\n      }\n    });\n    this.closeMobileMenu();\n    this.megaMenuOpen = false;\n  }\n  navigateToWishlist() {\n    this.router.navigate(['/wishlist']);\n    this.closeMobileMenu();\n  }\n  navigateToCart() {\n    this.router.navigate(['/cart']);\n    this.closeMobileMenu();\n  }\n  navigateToProfile() {\n    this.router.navigate(['/profile']);\n    this.closeMobileMenu();\n  }\n  navigateToOrders() {\n    this.router.navigate(['/profile/orders']);\n    this.closeMobileMenu();\n  }\n  navigateToAdmin() {\n    this.router.navigate(['/admin']);\n    this.closeMobileMenu();\n  }\n  // Notification methods\n  markAllAsRead() {\n    const notifications = this.notificationsSubject.value;\n    const updatedNotifications = notifications.map(n => ({\n      ...n,\n      read: true\n    }));\n    this.notificationsSubject.next(updatedNotifications);\n  }\n  markAsRead(notification) {\n    const notifications = this.notificationsSubject.value;\n    const updatedNotifications = notifications.map(n => n.id === notification.id ? {\n      ...n,\n      read: true\n    } : n);\n    this.notificationsSubject.next(updatedNotifications);\n  }\n  getNotificationIcon(type) {\n    switch (type) {\n      case 'success':\n        return 'check_circle';\n      case 'warning':\n        return 'warning';\n      case 'error':\n        return 'error';\n      case 'info':\n      default:\n        return 'info';\n    }\n  }\n  // Utility methods\n  detectMobile() {\n    this.isMobile = window.innerWidth < 768;\n  }\n  logout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n    this.closeMobileMenu();\n  }\n};\n__decorate([HostListener('window:resize', ['$event'])], HeaderComponent.prototype, \"onResize\", null);\n__decorate([HostListener('document:click', ['$event'])], HeaderComponent.prototype, \"onDocumentClick\", null);\nHeaderComponent = __decorate([Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})], HeaderComponent);\nexport { HeaderComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}