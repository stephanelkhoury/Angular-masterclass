{"ast":null,"code":"import { of, throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./storage.service\";\nimport * as i3 from \"./notification.service\";\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, storageService, notificationService) {\n      this.http = http;\n      this.storageService = storageService;\n      this.notificationService = notificationService;\n      this.apiUrl = `${environment.apiUrl}/auth`;\n      this.userSubject = new BehaviorSubject(null);\n      this.user$ = this.userSubject.asObservable();\n      this.autoLogin();\n    }\n    signup(email, password, name) {\n      return this.http.post(`${this.apiUrl}/signup`, {\n        email,\n        password,\n        name\n      }).pipe(tap(response => this.handleAuthentication(response)), catchError(error => {\n        this.notificationService.error('Registration failed. Please try again.');\n        return throwError(() => error);\n      }));\n    }\n    login(email, password) {\n      return this.http.post(`${this.apiUrl}/login`, {\n        email,\n        password\n      }).pipe(tap(response => this.handleAuthentication(response)), catchError(error => {\n        this.notificationService.error('Login failed. Please check your credentials and try again.');\n        return throwError(() => error);\n      }));\n    }\n    logout() {\n      this.userSubject.next(null);\n      this.storageService.removeItem('userData');\n      this.storageService.removeItem('token');\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n      this.tokenExpirationTimer = null;\n    }\n    autoLogin() {\n      const userData = this.storageService.getItem('userData');\n      if (!userData) {\n        return of(false);\n      }\n      try {\n        const loadedUser = userData.user;\n        const tokenExpirationDate = new Date(userData.tokenExpirationDate);\n        if (tokenExpirationDate <= new Date()) {\n          this.logout();\n          return of(false);\n        }\n        this.userSubject.next(loadedUser);\n        this.setAutoLogoutTimer(tokenExpirationDate.getTime() - new Date().getTime());\n        return of(true);\n      } catch (error) {\n        console.error('Error parsing user data', error);\n        this.logout();\n        return of(false);\n      }\n    }\n    getCurrentUser() {\n      return this.user$;\n    }\n    getToken() {\n      const userData = this.storageService.getItem('userData');\n      if (!userData) {\n        return null;\n      }\n      try {\n        return userData.token;\n      } catch (error) {\n        console.error('Error parsing user data', error);\n        return null;\n      }\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    handleAuthentication(response) {\n      const {\n        user,\n        token,\n        expiresIn\n      } = response;\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const userData = {\n        user,\n        token,\n        tokenExpirationDate: expirationDate.toISOString()\n      };\n      this.storageService.setItem('userData', JSON.stringify(userData));\n      this.userSubject.next(user);\n      this.setAutoLogoutTimer(expiresIn * 1000);\n    }\n    setAutoLogoutTimer(expirationDuration) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logout();\n      }, expirationDuration);\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService), i0.ɵɵinject(i3.NotificationService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}