{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { of } from 'rxjs';\nimport { map, switchMap, tap, catchError } from 'rxjs/operators';\nlet ProductDetailComponent = class ProductDetailComponent {\n  constructor(store, route, router, productService, cartService, notificationService) {\n    this.store = store;\n    this.route = route;\n    this.router = router;\n    this.productService = productService;\n    this.cartService = cartService;\n    this.notificationService = notificationService;\n    this.error = null;\n    this.selectedImage = null;\n    this.quantity = 1;\n    this.loading$ = this.store.select(state => state.ui.loading);\n    // Get product from store based on route param\n    this.product$ = this.route.paramMap.pipe(map(params => params.get('id')), switchMap(id => {\n      if (!id) {\n        return of(null);\n      }\n      return this.store.select(state => state.products.items.find(product => product.id === id)).pipe(tap(product => {\n        if (!product) {\n          // If product not in store, load it\n          this.productService.loadProductById(id);\n        } else {\n          // Set selected image\n          this.selectedImage = product.imageUrl;\n        }\n      }));\n    }), catchError(err => {\n      this.error = 'Failed to load product details';\n      return of(null);\n    }));\n    // Get related products\n    this.relatedProducts$ = this.product$.pipe(switchMap(product => {\n      if (!product) {\n        return of([]);\n      }\n      return this.store.select(state => state.products.items.filter(p => p.category.id === product.category.id && p.id !== product.id).slice(0, 4));\n    }));\n  }\n  ngOnInit() {\n    // Ensure all products are loaded\n    this.productService.loadProducts();\n  }\n  updateSelectedImage(imageUrl) {\n    this.selectedImage = imageUrl;\n  }\n  incrementQuantity() {\n    this.quantity++;\n  }\n  decrementQuantity() {\n    if (this.quantity > 1) {\n      this.quantity--;\n    }\n  }\n  addToCart(product) {\n    this.cartService.addToCart(product, this.quantity);\n    this.notificationService.show(`${product.name} added to cart`);\n  }\n  addToWishlist(product) {\n    // This would dispatch the appropriate action for the wishlist\n    this.notificationService.show(`${product.name} added to wishlist`);\n  }\n  submitReview(product, review) {\n    this.productService.addProductReview(product.id, review);\n    this.notificationService.show('Thank you for your review!');\n  }\n  goBack() {\n    this.router.navigate(['/products']);\n  }\n};\nProductDetailComponent = __decorate([Component({\n  selector: 'app-product-detail',\n  templateUrl: './product-detail.component.html',\n  styleUrls: ['./product-detail.component.scss']\n})], ProductDetailComponent);\nexport { ProductDetailComponent };","map":{"version":3,"names":["Component","of","map","switchMap","tap","catchError","ProductDetailComponent","constructor","store","route","router","productService","cartService","notificationService","error","selectedImage","quantity","loading$","select","state","ui","loading","product$","paramMap","pipe","params","get","id","products","items","find","product","loadProductById","imageUrl","err","relatedProducts$","filter","p","category","slice","ngOnInit","loadProducts","updateSelectedImage","incrementQuantity","decrementQuantity","addToCart","show","name","addToWishlist","submitReview","review","addProductReview","goBack","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/features/products/product-detail/product-detail.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap, catchError } from 'rxjs/operators';\n\nimport { AppState } from '../../../store';\nimport { Product, Review } from '../../../core/models/product.model';\nimport { ProductService } from '../../../core/services/product.service';\nimport { CartService } from '../../../core/services/cart.service';\nimport { NotificationService } from '../../../core/services/notification.service';\n\n@Component({\n  selector: 'app-product-detail',\n  templateUrl: './product-detail.component.html',\n  styleUrls: ['./product-detail.component.scss']\n})\nexport class ProductDetailComponent implements OnInit {\n  product$: Observable<Product | null>;\n  relatedProducts$: Observable<Product[]>;\n  loading$: Observable<boolean>;\n  error: string | null = null;\n  \n  selectedImage: string | null = null;\n  quantity = 1;\n  \n  constructor(\n    private store: Store<AppState>,\n    private route: ActivatedRoute,\n    private router: Router,\n    private productService: ProductService,\n    private cartService: CartService,\n    private notificationService: NotificationService\n  ) {\n    this.loading$ = this.store.select(state => state.ui.loading);\n    \n    // Get product from store based on route param\n    this.product$ = this.route.paramMap.pipe(\n      map(params => params.get('id')),\n      switchMap(id => {\n        if (!id) {\n          return of(null);\n        }\n        \n        return this.store.select(state => \n          state.products.items.find(product => product.id === id)\n        ).pipe(\n          tap(product => {\n            if (!product) {\n              // If product not in store, load it\n              this.productService.loadProductById(id);\n            } else {\n              // Set selected image\n              this.selectedImage = product.imageUrl;\n            }\n          })\n        );\n      }),\n      catchError(err => {\n        this.error = 'Failed to load product details';\n        return of(null);\n      })\n    );\n    \n    // Get related products\n    this.relatedProducts$ = this.product$.pipe(\n      switchMap(product => {\n        if (!product) {\n          return of([]);\n        }\n        \n        return this.store.select(state => \n          state.products.items\n            .filter(p => p.category.id === product.category.id && p.id !== product.id)\n            .slice(0, 4)\n        );\n      })\n    );\n  }\n  \n  ngOnInit(): void {\n    // Ensure all products are loaded\n    this.productService.loadProducts();\n  }\n  \n  updateSelectedImage(imageUrl: string): void {\n    this.selectedImage = imageUrl;\n  }\n  \n  incrementQuantity(): void {\n    this.quantity++;\n  }\n  \n  decrementQuantity(): void {\n    if (this.quantity > 1) {\n      this.quantity--;\n    }\n  }\n  \n  addToCart(product: Product): void {\n    this.cartService.addToCart(product, this.quantity);\n    this.notificationService.show(`${product.name} added to cart`);\n  }\n  \n  addToWishlist(product: Product): void {\n    // This would dispatch the appropriate action for the wishlist\n    this.notificationService.show(`${product.name} added to wishlist`);\n  }\n  \n  submitReview(product: Product, review: Review): void {\n    this.productService.addProductReview(product.id, review);\n    this.notificationService.show('Thank you for your review!');\n  }\n  \n  goBack(): void {\n    this.router.navigate(['/products']);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}