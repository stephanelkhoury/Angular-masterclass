{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport { selectCurrentUser } from '../../store/selectors/auth.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/notification.service\";\nclass AdminGuard {\n  constructor(store, router, notificationService) {\n    this.store = store;\n    this.router = router;\n    this.notificationService = notificationService;\n  }\n  canActivate(route, state) {\n    return this.store.select(selectCurrentUser).pipe(take(1), map(user => {\n      if (user?.isAdmin) {\n        return true;\n      }\n      this.notificationService.error('You do not have permission to access this area');\n      return this.router.createUrlTree(['/']);\n    }));\n  }\n  static {\n    this.ɵfac = function AdminGuard_Factory(t) {\n      return new (t || AdminGuard)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminGuard,\n      factory: AdminGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AdminGuard };","map":{"version":3,"names":["map","take","selectCurrentUser","AdminGuard","constructor","store","router","notificationService","canActivate","route","state","select","pipe","user","isAdmin","error","createUrlTree","i0","ɵɵinject","i1","Store","i2","Router","i3","NotificationService","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/25-Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/guards/admin.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\n\nimport { AppState } from '../../store';\nimport { selectCurrentUser } from '../../store/selectors/auth.selectors';\nimport { NotificationService } from '../services/notification.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminGuard implements CanActivate {\n  \n  constructor(\n    private store: Store<AppState>,\n    private router: Router,\n    private notificationService: NotificationService\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    \n    return this.store.select(selectCurrentUser).pipe(\n      take(1),\n      map(user => {\n        if (user?.isAdmin) {\n          return true;\n        }\n        \n        this.notificationService.error('You do not have permission to access this area');\n        return this.router.createUrlTree(['/']);\n      })\n    );\n  }\n}\n"],"mappings":"AAGA,SAASA,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;AAI1C,SAASC,iBAAiB,QAAQ,sCAAsC;;;;;AAGxE,MAGaC,UAAU;EAErBC,YACUC,KAAsB,EACtBC,MAAc,EACdC,mBAAwC;IAFxC,KAAAF,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,mBAAmB,GAAnBA,mBAAmB;EAC1B;EAEHC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAG1B,OAAO,IAAI,CAACL,KAAK,CAACM,MAAM,CAACT,iBAAiB,CAAC,CAACU,IAAI,CAC9CX,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAACa,IAAI,IAAG;MACT,IAAIA,IAAI,EAAEC,OAAO,EAAE;QACjB,OAAO,IAAI;;MAGb,IAAI,CAACP,mBAAmB,CAACQ,KAAK,CAAC,gDAAgD,CAAC;MAChF,OAAO,IAAI,CAACT,MAAM,CAACU,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC,CAAC,CACH;EACH;;;uBAxBWb,UAAU,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,KAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,mBAAA;IAAA;EAAA;;;aAAVrB,UAAU;MAAAsB,OAAA,EAAVtB,UAAU,CAAAuB,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA;;SAEPxB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}