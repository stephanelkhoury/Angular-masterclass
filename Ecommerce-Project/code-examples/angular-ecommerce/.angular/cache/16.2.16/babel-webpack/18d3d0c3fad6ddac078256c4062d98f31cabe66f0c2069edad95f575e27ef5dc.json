{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nclass JwtInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    // Don't add authorization header to external APIs like Fake Store API\n    if (request.url.includes('fakestoreapi.com')) {\n      console.log('JWT Interceptor: Skipping auth header for Fake Store API:', request.url);\n      return next.handle(request);\n    }\n    console.log('JWT Interceptor: Processing request:', request.url);\n    // Get the token\n    const token = this.authService.getToken();\n    if (token) {\n      console.log('JWT Interceptor: Adding auth header');\n      // Clone the request and add the authorization header\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    } else {\n      console.log('JWT Interceptor: No token found');\n    }\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function JwtInterceptor_Factory(t) {\n      return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JwtInterceptor,\n      factory: JwtInterceptor.ɵfac\n    });\n  }\n}\nexport { JwtInterceptor };","map":{"version":3,"names":["JwtInterceptor","constructor","authService","intercept","request","next","url","includes","console","log","handle","token","getToken","clone","setHeaders","Authorization","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/Ecommerce-Project/code-examples/angular-ecommerce/src/app/core/interceptors/jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  \n  constructor(private authService: AuthService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    // Don't add authorization header to external APIs like Fake Store API\n    if (request.url.includes('fakestoreapi.com')) {\n      console.log('JWT Interceptor: Skipping auth header for Fake Store API:', request.url);\n      return next.handle(request);\n    }\n    \n    console.log('JWT Interceptor: Processing request:', request.url);\n    \n    // Get the token\n    const token = this.authService.getToken();\n    \n    if (token) {\n      console.log('JWT Interceptor: Adding auth header');\n      // Clone the request and add the authorization header\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    } else {\n      console.log('JWT Interceptor: No token found');\n    }\n    \n    return next.handle(request);\n  }\n}\n"],"mappings":";;AAKA,MACaA,cAAc;EAEzBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,IAAID,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC5CC,OAAO,CAACC,GAAG,CAAC,2DAA2D,EAAEL,OAAO,CAACE,GAAG,CAAC;MACrF,OAAOD,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;;IAG7BI,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEL,OAAO,CAACE,GAAG,CAAC;IAEhE;IACA,MAAMK,KAAK,GAAG,IAAI,CAACT,WAAW,CAACU,QAAQ,EAAE;IAEzC,IAAID,KAAK,EAAE;MACTH,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClD;MACAL,OAAO,GAAGA,OAAO,CAACS,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUJ,KAAK;;OAEjC,CAAC;KACH,MAAM;MACLH,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;IAGhD,OAAOJ,IAAI,CAACK,MAAM,CAACN,OAAO,CAAC;EAC7B;;;uBA7BWJ,cAAc,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAdnB,cAAc;MAAAoB,OAAA,EAAdpB,cAAc,CAAAqB;IAAA;EAAA;;SAAdrB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}