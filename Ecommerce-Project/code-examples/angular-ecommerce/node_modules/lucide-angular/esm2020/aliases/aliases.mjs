// AlarmClockCheck aliases
export { default as AlarmCheck } from '../icons/alarm-clock-check';
// AlarmClockMinus aliases
export { default as AlarmMinus } from '../icons/alarm-clock-minus';
// AlarmClockPlus aliases
export { default as AlarmPlus } from '../icons/alarm-clock-plus';
// ArrowDownAZ aliases
export { default as ArrowDownAz } from '../icons/arrow-down-a-z';
// ArrowDownWideNarrow aliases
export { default as SortDesc } from '../icons/arrow-down-wide-narrow';
// ArrowDownZA aliases
export { default as ArrowDownZa } from '../icons/arrow-down-z-a';
// ArrowUpAZ aliases
export { default as ArrowUpAz } from '../icons/arrow-up-a-z';
// ArrowUpNarrowWide aliases
export { default as SortAsc } from '../icons/arrow-up-narrow-wide';
// ArrowUpZA aliases
export { default as ArrowUpZa } from '../icons/arrow-up-z-a';
// Axis3d aliases
export { default as Axis3D } from '../icons/axis-3d';
// BadgeCheck aliases
export { default as Verified } from '../icons/badge-check';
// BetweenHorizontalEnd aliases
export { 
/** @deprecated Renamed because of typo, use {@link BetweenHorizontalEnd} instead. This alias will be removed in v1.0 */
default as BetweenHorizonalEnd } from '../icons/between-horizontal-end';
// BetweenHorizontalStart aliases
export { 
/** @deprecated Renamed because of typo, use {@link BetweenHorizontalStart} instead. This alias will be removed in v1.0 */
default as BetweenHorizonalStart } from '../icons/between-horizontal-start';
// BookDashed aliases
export { default as BookTemplate } from '../icons/book-dashed';
// Braces aliases
export { default as CurlyBraces } from '../icons/braces';
// Captions aliases
export { default as Subtitles } from '../icons/captions';
// ChartArea aliases
export { 
/** @deprecated  */
default as AreaChart } from '../icons/chart-area';
// ChartBarBig aliases
export { 
/** @deprecated  */
default as BarChartHorizontalBig } from '../icons/chart-bar-big';
// ChartBar aliases
export { 
/** @deprecated  */
default as BarChartHorizontal } from '../icons/chart-bar';
// ChartCandlestick aliases
export { 
/** @deprecated  */
default as CandlestickChart } from '../icons/chart-candlestick';
// ChartColumnBig aliases
export { 
/** @deprecated  */
default as BarChartBig } from '../icons/chart-column-big';
// ChartColumnIncreasing aliases
export { 
/** @deprecated  */
default as BarChart4 } from '../icons/chart-column-increasing';
// ChartColumn aliases
export { 
/** @deprecated  */
default as BarChart3 } from '../icons/chart-column';
// ChartLine aliases
export { 
/** @deprecated  */
default as LineChart } from '../icons/chart-line';
// ChartNoAxesColumnIncreasing aliases
export { 
/** @deprecated  */
default as BarChart } from '../icons/chart-no-axes-column-increasing';
// ChartNoAxesColumn aliases
export { 
/** @deprecated  */
default as BarChart2 } from '../icons/chart-no-axes-column';
// ChartNoAxesGantt aliases
export { 
/** @deprecated  */
default as GanttChart } from '../icons/chart-no-axes-gantt';
// ChartPie aliases
export { 
/** @deprecated  */
default as PieChart } from '../icons/chart-pie';
// ChartScatter aliases
export { 
/** @deprecated  */
default as ScatterChart } from '../icons/chart-scatter';
// CircleAlert aliases
export { default as AlertCircle } from '../icons/circle-alert';
// CircleArrowDown aliases
export { default as ArrowDownCircle } from '../icons/circle-arrow-down';
// CircleArrowLeft aliases
export { default as ArrowLeftCircle } from '../icons/circle-arrow-left';
// CircleArrowOutDownLeft aliases
export { default as ArrowDownLeftFromCircle } from '../icons/circle-arrow-out-down-left';
// CircleArrowOutDownRight aliases
export { default as ArrowDownRightFromCircle } from '../icons/circle-arrow-out-down-right';
// CircleArrowOutUpLeft aliases
export { default as ArrowUpLeftFromCircle } from '../icons/circle-arrow-out-up-left';
// CircleArrowOutUpRight aliases
export { default as ArrowUpRightFromCircle } from '../icons/circle-arrow-out-up-right';
// CircleArrowRight aliases
export { default as ArrowRightCircle } from '../icons/circle-arrow-right';
// CircleArrowUp aliases
export { default as ArrowUpCircle } from '../icons/circle-arrow-up';
// CircleCheckBig aliases
export { default as CheckCircle } from '../icons/circle-check-big';
// CircleCheck aliases
export { default as CheckCircle2 } from '../icons/circle-check';
// CircleChevronDown aliases
export { default as ChevronDownCircle } from '../icons/circle-chevron-down';
// CircleChevronLeft aliases
export { default as ChevronLeftCircle } from '../icons/circle-chevron-left';
// CircleChevronRight aliases
export { default as ChevronRightCircle } from '../icons/circle-chevron-right';
// CircleChevronUp aliases
export { default as ChevronUpCircle } from '../icons/circle-chevron-up';
// CircleDivide aliases
export { default as DivideCircle } from '../icons/circle-divide';
// CircleGauge aliases
export { default as GaugeCircle } from '../icons/circle-gauge';
// CircleHelp aliases
export { default as HelpCircle } from '../icons/circle-help';
// CircleMinus aliases
export { default as MinusCircle } from '../icons/circle-minus';
// CircleParkingOff aliases
export { default as ParkingCircleOff } from '../icons/circle-parking-off';
// CircleParking aliases
export { default as ParkingCircle } from '../icons/circle-parking';
// CirclePause aliases
export { default as PauseCircle } from '../icons/circle-pause';
// CirclePercent aliases
export { default as PercentCircle } from '../icons/circle-percent';
// CirclePlay aliases
export { default as PlayCircle } from '../icons/circle-play';
// CirclePower aliases
export { default as PowerCircle } from '../icons/circle-power';
// CirclePlus aliases
export { default as PlusCircle } from '../icons/circle-plus';
// CircleSlash2 aliases
export { default as CircleSlashed } from '../icons/circle-slash-2';
// CircleStop aliases
export { default as StopCircle } from '../icons/circle-stop';
// CircleUserRound aliases
export { 
/** @deprecated  */
default as UserCircle2 } from '../icons/circle-user-round';
// CircleUser aliases
export { default as UserCircle } from '../icons/circle-user';
// CircleX aliases
export { default as XCircle } from '../icons/circle-x';
// ClipboardPenLine aliases
export { default as ClipboardSignature } from '../icons/clipboard-pen-line';
// ClipboardPen aliases
export { default as ClipboardEdit } from '../icons/clipboard-pen';
// CloudDownload aliases
export { default as DownloadCloud } from '../icons/cloud-download';
// CloudUpload aliases
export { default as UploadCloud } from '../icons/cloud-upload';
// CodeXml aliases
export { 
/** @deprecated  */
default as Code2 } from '../icons/code-xml';
// Columns2 aliases
export { default as Columns } from '../icons/columns-2';
// Columns3Cog aliases
export { default as ColumnsSettings } from '../icons/columns-3-cog';
// Columns3Cog aliases
export { default as TableConfig } from '../icons/columns-3-cog';
// Columns3 aliases
export { default as PanelsLeftRight } from '../icons/columns-3';
// ContactRound aliases
export { 
/** @deprecated  */
default as Contact2 } from '../icons/contact-round';
// DiamondPercent aliases
export { default as PercentDiamond } from '../icons/diamond-percent';
// Earth aliases
export { 
/** @deprecated  */
default as Globe2 } from '../icons/earth';
// EllipsisVertical aliases
export { default as MoreVertical } from '../icons/ellipsis-vertical';
// Ellipsis aliases
export { default as MoreHorizontal } from '../icons/ellipsis';
// FileAxis3d aliases
export { default as FileAxis3D } from '../icons/file-axis-3d';
// FileChartColumnIncreasing aliases
export { 
/** @deprecated  */
default as FileBarChart } from '../icons/file-chart-column-increasing';
// FileChartColumn aliases
export { 
/** @deprecated  */
default as FileBarChart2 } from '../icons/file-chart-column';
// FileChartLine aliases
export { 
/** @deprecated  */
default as FileLineChart } from '../icons/file-chart-line';
// FileChartPie aliases
export { 
/** @deprecated  */
default as FilePieChart } from '../icons/file-chart-pie';
// FileCog aliases
export { 
/** @deprecated  */
default as FileCog2 } from '../icons/file-cog';
// FilePenLine aliases
export { default as FileSignature } from '../icons/file-pen-line';
// FilePen aliases
export { default as FileEdit } from '../icons/file-pen';
// FolderCog aliases
export { 
/** @deprecated  */
default as FolderCog2 } from '../icons/folder-cog';
// FolderPen aliases
export { default as FolderEdit } from '../icons/folder-pen';
// FunnelX aliases
export { 
/** @deprecated  */
default as FilterX } from '../icons/funnel-x';
// Funnel aliases
export { 
/** @deprecated  */
default as Filter } from '../icons/funnel';
// GitCommitHorizontal aliases
export { default as GitCommit } from '../icons/git-commit-horizontal';
// Grid2x2Check aliases
export { default as Grid2X2Check } from '../icons/grid-2x2-check';
// Grid2x2Plus aliases
export { default as Grid2X2Plus } from '../icons/grid-2x2-plus';
// Grid2x2X aliases
export { default as Grid2X2X } from '../icons/grid-2x2-x';
// Grid2x2 aliases
export { default as Grid2X2 } from '../icons/grid-2x2';
// Grid3x3 aliases
export { default as Grid } from '../icons/grid-3x3';
// Grid3x3 aliases
export { default as Grid3X3 } from '../icons/grid-3x3';
// HandHelping aliases
export { default as HelpingHand } from '../icons/hand-helping';
// House aliases
export { default as Home } from '../icons/house';
// IceCreamBowl aliases
export { 
/** @deprecated  */
default as IceCream2 } from '../icons/ice-cream-bowl';
// IceCreamCone aliases
export { default as IceCream } from '../icons/ice-cream-cone';
// IndentDecrease aliases
export { default as Outdent } from '../icons/indent-decrease';
// IndentIncrease aliases
export { default as Indent } from '../icons/indent-increase';
// LaptopMinimal aliases
export { 
/** @deprecated  */
default as Laptop2 } from '../icons/laptop-minimal';
// Layers aliases
export { default as Layers3 } from '../icons/layers';
// LoaderCircle aliases
export { default as Loader2 } from '../icons/loader-circle';
// LockKeyholeOpen aliases
export { default as UnlockKeyhole } from '../icons/lock-keyhole-open';
// LockOpen aliases
export { default as Unlock } from '../icons/lock-open';
// MicVocal aliases
export { 
/** @deprecated  */
default as Mic2 } from '../icons/mic-vocal';
// Move3d aliases
export { default as Move3D } from '../icons/move-3d';
// OctagonAlert aliases
export { default as AlertOctagon } from '../icons/octagon-alert';
// OctagonPause aliases
export { default as PauseOctagon } from '../icons/octagon-pause';
// OctagonX aliases
export { default as XOctagon } from '../icons/octagon-x';
// PaintbrushVertical aliases
export { default as Paintbrush2 } from '../icons/paintbrush-vertical';
// PanelBottomDashed aliases
export { default as PanelBottomInactive } from '../icons/panel-bottom-dashed';
// PanelLeftClose aliases
export { default as SidebarClose } from '../icons/panel-left-close';
// PanelLeftDashed aliases
export { default as PanelLeftInactive } from '../icons/panel-left-dashed';
// PanelLeftOpen aliases
export { default as SidebarOpen } from '../icons/panel-left-open';
// PanelLeft aliases
export { default as Sidebar } from '../icons/panel-left';
// PanelRightDashed aliases
export { default as PanelRightInactive } from '../icons/panel-right-dashed';
// PanelTopDashed aliases
export { default as PanelTopInactive } from '../icons/panel-top-dashed';
// PenLine aliases
export { 
/** @deprecated  */
default as Edit3 } from '../icons/pen-line';
// PanelsTopLeft aliases
export { default as Layout } from '../icons/panels-top-left';
// Pen aliases
export { 
/** @deprecated  */
default as Edit2 } from '../icons/pen';
// RectangleEllipsis aliases
export { default as FormInput } from '../icons/rectangle-ellipsis';
// Rotate3d aliases
export { default as Rotate3D } from '../icons/rotate-3d';
// PlugZap aliases
export { default as PlugZap2 } from '../icons/plug-zap';
// Rows2 aliases
export { default as Rows } from '../icons/rows-2';
// Rows3 aliases
export { default as PanelsTopBottom } from '../icons/rows-3';
// Scale3d aliases
export { default as Scale3D } from '../icons/scale-3d';
// SendHorizontal aliases
export { 
/** @deprecated Renamed because of typo, use {@link SendHorizontal} instead. This alias will be removed in v1.0 */
default as SendHorizonal } from '../icons/send-horizontal';
// ShieldX aliases
export { default as ShieldClose } from '../icons/shield-x';
// SlidersVertical aliases
export { default as Sliders } from '../icons/sliders-vertical';
// Sparkles aliases
export { default as Stars } from '../icons/sparkles';
// SquareActivity aliases
export { default as ActivitySquare } from '../icons/square-activity';
// SquareArrowDownLeft aliases
export { default as ArrowDownLeftSquare } from '../icons/square-arrow-down-left';
// SquareArrowDownRight aliases
export { default as ArrowDownRightSquare } from '../icons/square-arrow-down-right';
// SquareArrowDown aliases
export { default as ArrowDownSquare } from '../icons/square-arrow-down';
// SquareArrowLeft aliases
export { default as ArrowLeftSquare } from '../icons/square-arrow-left';
// SquareArrowOutDownLeft aliases
export { default as ArrowDownLeftFromSquare } from '../icons/square-arrow-out-down-left';
// SquareArrowOutDownRight aliases
export { default as ArrowDownRightFromSquare } from '../icons/square-arrow-out-down-right';
// SquareArrowOutUpLeft aliases
export { default as ArrowUpLeftFromSquare } from '../icons/square-arrow-out-up-left';
// SquareArrowOutUpRight aliases
export { default as ArrowUpRightFromSquare } from '../icons/square-arrow-out-up-right';
// SquareArrowRight aliases
export { default as ArrowRightSquare } from '../icons/square-arrow-right';
// SquareArrowUpLeft aliases
export { default as ArrowUpLeftSquare } from '../icons/square-arrow-up-left';
// SquareArrowUpRight aliases
export { default as ArrowUpRightSquare } from '../icons/square-arrow-up-right';
// SquareArrowUp aliases
export { default as ArrowUpSquare } from '../icons/square-arrow-up';
// SquareBottomDashedScissors aliases
export { default as ScissorsSquareDashedBottom } from '../icons/square-bottom-dashed-scissors';
// SquareAsterisk aliases
export { default as AsteriskSquare } from '../icons/square-asterisk';
// SquareChartGantt aliases
export { default as GanttChartSquare } from '../icons/square-chart-gantt';
// SquareChartGantt aliases
export { default as SquareGanttChart } from '../icons/square-chart-gantt';
// SquareCheckBig aliases
export { default as CheckSquare } from '../icons/square-check-big';
// SquareCheck aliases
export { default as CheckSquare2 } from '../icons/square-check';
// SquareChevronDown aliases
export { default as ChevronDownSquare } from '../icons/square-chevron-down';
// SquareChevronLeft aliases
export { default as ChevronLeftSquare } from '../icons/square-chevron-left';
// SquareChevronRight aliases
export { default as ChevronRightSquare } from '../icons/square-chevron-right';
// SquareCode aliases
export { default as CodeSquare } from '../icons/square-code';
// SquareDashedKanban aliases
export { default as KanbanSquareDashed } from '../icons/square-dashed-kanban';
// SquareChevronUp aliases
export { default as ChevronUpSquare } from '../icons/square-chevron-up';
// SquareDashedMousePointer aliases
export { default as MousePointerSquareDashed } from '../icons/square-dashed-mouse-pointer';
// SquareDashed aliases
export { default as BoxSelect } from '../icons/square-dashed';
// SquareDivide aliases
export { default as DivideSquare } from '../icons/square-divide';
// SquareDot aliases
export { default as DotSquare } from '../icons/square-dot';
// SquareEqual aliases
export { default as EqualSquare } from '../icons/square-equal';
// SquareFunction aliases
export { default as FunctionSquare } from '../icons/square-function';
// SquareKanban aliases
export { default as KanbanSquare } from '../icons/square-kanban';
// SquareLibrary aliases
export { default as LibrarySquare } from '../icons/square-library';
// SquareM aliases
export { default as MSquare } from '../icons/square-m';
// SquareMenu aliases
export { default as MenuSquare } from '../icons/square-menu';
// SquareMinus aliases
export { default as MinusSquare } from '../icons/square-minus';
// SquareMousePointer aliases
export { default as Inspect } from '../icons/square-mouse-pointer';
// SquareParkingOff aliases
export { default as ParkingSquareOff } from '../icons/square-parking-off';
// SquareParking aliases
export { default as ParkingSquare } from '../icons/square-parking';
// SquarePen aliases
export { default as PenBox } from '../icons/square-pen';
// SquarePen aliases
export { default as Edit } from '../icons/square-pen';
// SquarePen aliases
export { default as PenSquare } from '../icons/square-pen';
// SquarePercent aliases
export { default as PercentSquare } from '../icons/square-percent';
// SquarePi aliases
export { default as PiSquare } from '../icons/square-pi';
// SquarePilcrow aliases
export { default as PilcrowSquare } from '../icons/square-pilcrow';
// SquarePlay aliases
export { default as PlaySquare } from '../icons/square-play';
// SquarePlus aliases
export { default as PlusSquare } from '../icons/square-plus';
// SquarePower aliases
export { default as PowerSquare } from '../icons/square-power';
// SquareScissors aliases
export { default as ScissorsSquare } from '../icons/square-scissors';
// SquareSigma aliases
export { default as SigmaSquare } from '../icons/square-sigma';
// SquareSlash aliases
export { default as SlashSquare } from '../icons/square-slash';
// SquareSplitHorizontal aliases
export { default as SplitSquareHorizontal } from '../icons/square-split-horizontal';
// SquareSplitVertical aliases
export { default as SplitSquareVertical } from '../icons/square-split-vertical';
// SquareTerminal aliases
export { default as TerminalSquare } from '../icons/square-terminal';
// SquareUserRound aliases
export { 
/** @deprecated  */
default as UserSquare2 } from '../icons/square-user-round';
// SquareUser aliases
export { default as UserSquare } from '../icons/square-user';
// SquareX aliases
export { default as XSquare } from '../icons/square-x';
// TestTubeDiagonal aliases
export { default as TestTube2 } from '../icons/test-tube-diagonal';
// TextSelect aliases
export { default as TextSelection } from '../icons/text-select';
// TramFront aliases
export { default as Train } from '../icons/tram-front';
// TreePalm aliases
export { default as Palmtree } from '../icons/tree-palm';
// TriangleAlert aliases
export { default as AlertTriangle } from '../icons/triangle-alert';
// TvMinimal aliases
export { 
/** @deprecated  */
default as Tv2 } from '../icons/tv-minimal';
// University aliases
export { 
/** @deprecated  */
default as School2 } from '../icons/university';
// UserRoundCheck aliases
export { 
/** @deprecated  */
default as UserCheck2 } from '../icons/user-round-check';
// UserRoundCog aliases
export { 
/** @deprecated  */
default as UserCog2 } from '../icons/user-round-cog';
// UserRoundMinus aliases
export { 
/** @deprecated  */
default as UserMinus2 } from '../icons/user-round-minus';
// UserRoundPlus aliases
export { 
/** @deprecated  */
default as UserPlus2 } from '../icons/user-round-plus';
// UserRoundX aliases
export { 
/** @deprecated  */
default as UserX2 } from '../icons/user-round-x';
// UserRound aliases
export { 
/** @deprecated  */
default as User2 } from '../icons/user-round';
// UsersRound aliases
export { 
/** @deprecated  */
default as Users2 } from '../icons/users-round';
// UtensilsCrossed aliases
export { default as ForkKnifeCrossed } from '../icons/utensils-crossed';
// Utensils aliases
export { default as ForkKnife } from '../icons/utensils';
// WalletMinimal aliases
export { 
/** @deprecated  */
default as Wallet2 } from '../icons/wallet-minimal';
// WandSparkles aliases
export { 
/** @deprecated  */
default as Wand2 } from '../icons/wand-sparkles';
//# sourceMappingURL=data:application/json;base64,