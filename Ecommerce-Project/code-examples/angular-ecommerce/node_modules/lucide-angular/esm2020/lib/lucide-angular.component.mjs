import { ChangeDetectorRef, Component, ElementRef, Inject, Input, Renderer2, } from '@angular/core';
import defaultAttributes from '../icons/constants/default-attributes';
import { LUCIDE_ICONS } from './lucide-icon.provider';
import { LucideIconConfig } from './lucide-icon.config';
import * as i0 from "@angular/core";
import * as i1 from "./lucide-icon.config";
export function formatFixed(number, decimals = 3) {
    return parseFloat(number.toFixed(decimals)).toString(10);
}
export class LucideAngularComponent {
    constructor(elem, renderer, changeDetector, iconProviders, iconConfig) {
        this.elem = elem;
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.iconProviders = iconProviders;
        this.iconConfig = iconConfig;
        this.absoluteStrokeWidth = false;
        this.defaultSize = defaultAttributes.height;
    }
    get size() {
        return this._size ?? this.iconConfig.size;
    }
    set size(value) {
        if (value) {
            this._size = this.parseNumber(value);
        }
        else {
            delete this._size;
        }
    }
    get strokeWidth() {
        return this._strokeWidth ?? this.iconConfig.strokeWidth;
    }
    set strokeWidth(value) {
        if (value) {
            this._strokeWidth = this.parseNumber(value);
        }
        else {
            delete this._strokeWidth;
        }
    }
    ngOnChanges(changes) {
        if (changes.name ||
            changes.img ||
            changes.color ||
            changes.size ||
            changes.absoluteStrokeWidth ||
            changes.strokeWidth ||
            changes.class) {
            this.color = this.color ?? this.iconConfig.color;
            this.size = this.parseNumber(this.size ?? this.iconConfig.size);
            this.strokeWidth = this.parseNumber(this.strokeWidth ?? this.iconConfig.strokeWidth);
            this.absoluteStrokeWidth = this.absoluteStrokeWidth ?? this.iconConfig.absoluteStrokeWidth;
            const nameOrIcon = this.img ?? this.name;
            if (typeof nameOrIcon === 'string') {
                const icoOfName = this.getIcon(this.toPascalCase(nameOrIcon));
                if (icoOfName) {
                    this.replaceElement(icoOfName);
                }
                else {
                    throw new Error(`The "${nameOrIcon}" icon has not been provided by any available icon providers.`);
                }
            }
            else if (Array.isArray(nameOrIcon)) {
                this.replaceElement(nameOrIcon);
            }
            else {
                throw new Error(`No icon name or image has been provided.`);
            }
        }
        this.changeDetector.markForCheck();
    }
    replaceElement(img) {
        const attributes = {
            ...defaultAttributes,
            width: this.size,
            height: this.size,
            stroke: this.color ?? this.iconConfig.color,
            'stroke-width': this.absoluteStrokeWidth
                ? formatFixed(this.strokeWidth / (this.size / this.defaultSize))
                : this.strokeWidth.toString(10),
        };
        const icoElement = this.createElement(['svg', attributes, img]);
        icoElement.classList.add('lucide');
        if (typeof this.name === 'string') {
            icoElement.classList.add(`lucide-${this.name.replace('_', '-')}`);
        }
        if (this.class) {
            icoElement.classList.add(...this.class
                .split(/ /)
                .map((a) => a.trim())
                .filter((a) => a.length > 0));
        }
        const childElements = this.elem.nativeElement.childNodes;
        for (const child of childElements) {
            this.renderer.removeChild(this.elem.nativeElement, child);
        }
        this.renderer.appendChild(this.elem.nativeElement, icoElement);
    }
    toPascalCase(str) {
        return str.replace(/(\w)([a-z0-9]*)(_|-|\s*)/g, (g0, g1, g2) => g1.toUpperCase() + g2.toLowerCase());
    }
    parseNumber(value) {
        if (typeof value === 'string') {
            const parsedValue = parseInt(value, 10);
            if (isNaN(parsedValue)) {
                throw new Error(`${value} is not numeric.`);
            }
            return parsedValue;
        }
        return value;
    }
    getIcon(name) {
        for (const iconProvider of Array.isArray(this.iconProviders)
            ? this.iconProviders
            : [this.iconProviders]) {
            if (iconProvider.hasIcon(name)) {
                return iconProvider.getIcon(name);
            }
        }
        return null;
    }
    createElement([tag, attrs, children = []]) {
        const element = this.renderer.createElement(tag, 'http://www.w3.org/2000/svg');
        Object.keys(attrs).forEach((name) => {
            const attrValue = typeof attrs[name] === 'string' ? attrs[name] : attrs[name].toString(10);
            this.renderer.setAttribute(element, name, attrValue);
        });
        if (children.length) {
            children.forEach((child) => {
                const childElement = this.createElement(child);
                this.renderer.appendChild(element, childElement);
            });
        }
        return element;
    }
}
LucideAngularComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: LucideAngularComponent, deps: [{ token: ElementRef }, { token: Renderer2 }, { token: ChangeDetectorRef }, { token: LUCIDE_ICONS }, { token: LucideIconConfig }], target: i0.ɵɵFactoryTarget.Component });
LucideAngularComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.12", type: LucideAngularComponent, selector: "lucide-angular, lucide-icon, i-lucide, span-lucide", inputs: { class: "class", name: "name", img: "img", color: "color", absoluteStrokeWidth: "absoluteStrokeWidth", size: "size", strokeWidth: "strokeWidth" }, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.12", ngImport: i0, type: LucideAngularComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lucide-angular, lucide-icon, i-lucide, span-lucide',
                    template: '<ng-content></ng-content>',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LUCIDE_ICONS]
                }] }, { type: i1.LucideIconConfig, decorators: [{
                    type: Inject,
                    args: [LucideIconConfig]
                }] }]; }, propDecorators: { class: [{
                type: Input
            }], name: [{
                type: Input
            }], img: [{
                type: Input
            }], color: [{
                type: Input
            }], absoluteStrokeWidth: [{
                type: Input
            }], size: [{
                type: Input
            }], strokeWidth: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,