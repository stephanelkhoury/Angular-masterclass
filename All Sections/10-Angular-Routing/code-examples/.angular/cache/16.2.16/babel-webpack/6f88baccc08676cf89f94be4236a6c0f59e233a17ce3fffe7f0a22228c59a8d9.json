{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ProductService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.example.com/products'; // Replace with real API URL in production\n    // Mock products for demo\n    this.mockProducts = [{\n      id: '1',\n      name: 'Smartphone X',\n      description: 'Latest generation smartphone with high-resolution camera',\n      price: 799.99,\n      imageUrl: 'https://via.placeholder.com/300',\n      category: 'electronics'\n    }, {\n      id: '2',\n      name: 'Laptop Pro',\n      description: 'Powerful laptop for professionals',\n      price: 1299.99,\n      imageUrl: 'https://via.placeholder.com/300',\n      category: 'electronics'\n    }, {\n      id: '3',\n      name: 'Wireless Headphones',\n      description: 'Premium sound quality with noise cancellation',\n      price: 199.99,\n      imageUrl: 'https://via.placeholder.com/300',\n      category: 'electronics'\n    }, {\n      id: '4',\n      name: 'Smart Watch',\n      description: 'Track your fitness and stay connected',\n      price: 249.99,\n      imageUrl: 'https://via.placeholder.com/300',\n      category: 'wearables'\n    }, {\n      id: '5',\n      name: 'Tablet Ultra',\n      description: 'Lightweight tablet with stunning display',\n      price: 499.99,\n      imageUrl: 'https://via.placeholder.com/300',\n      category: 'electronics'\n    }];\n  }\n  getProducts(category) {\n    // In a real app, this would call the API with params\n    // return this.http.get<Product[]>(this.apiUrl)\n    // For the demo, we'll use mock data\n    if (category) {\n      return of(this.mockProducts.filter(p => p.category === category));\n    }\n    return of(this.mockProducts);\n  }\n  getProduct(id) {\n    // In a real app, this would call the API with the ID\n    // return this.http.get<Product>(`${this.apiUrl}/${id}`)\n    // For the demo, we'll use mock data\n    const product = this.mockProducts.find(p => p.id === id);\n    if (!product) {\n      return of({});\n    }\n    return of(product);\n  }\n  addProduct(product) {\n    // In a real app, this would call the API to add the product\n    // return this.http.post<Product>(this.apiUrl, product)\n    // For the demo, we'll simulate adding to mock data\n    const newProduct = {\n      ...product,\n      id: (this.mockProducts.length + 1).toString()\n    };\n    this.mockProducts.push(newProduct);\n    return of(newProduct);\n  }\n  updateProduct(id, product) {\n    // In a real app, this would call the API to update the product\n    // return this.http.put<Product>(`${this.apiUrl}/${id}`, product)\n    // For the demo, we'll simulate updating mock data\n    const index = this.mockProducts.findIndex(p => p.id === id);\n    if (index > -1) {\n      this.mockProducts[index] = {\n        ...product,\n        id\n      };\n      return of(this.mockProducts[index]);\n    }\n    return of({});\n  }\n  deleteProduct(id) {\n    // In a real app, this would call the API to delete the product\n    // return this.http.delete(`${this.apiUrl}/${id}`).pipe(map(() => true))\n    // For the demo, we'll simulate deleting from mock data\n    const index = this.mockProducts.findIndex(p => p.id === id);\n    if (index > -1) {\n      this.mockProducts.splice(index, 1);\n      return of(true);\n    }\n    return of(false);\n  }\n  static {\n    this.ɵfac = function ProductService_Factory(t) {\n      return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { ProductService };","map":{"version":3,"names":["of","ProductService","constructor","http","apiUrl","mockProducts","id","name","description","price","imageUrl","category","getProducts","filter","p","getProduct","product","find","addProduct","newProduct","length","toString","push","updateProduct","index","findIndex","deleteProduct","splice","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/10-Angular-Routing/code-examples/src/app/services/product.service.ts"],"sourcesContent":["// services/product.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Product } from '../models/product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  private apiUrl = 'https://api.example.com/products'; // Replace with real API URL in production\n  \n  // Mock products for demo\n  private mockProducts: Product[] = [\n    {\n      id: '1',\n      name: 'Smartphone X',\n      description: 'Latest generation smartphone with high-resolution camera',\n      price: 799.99,\n      imageUrl: 'https://via.placeholder.com/300',\n      category: 'electronics'\n    },\n    {\n      id: '2',\n      name: 'Laptop Pro',\n      description: 'Powerful laptop for professionals',\n      price: 1299.99,\n      imageUrl: 'https://via.placeholder.com/300',\n      category: 'electronics'\n    },\n    {\n      id: '3',\n      name: 'Wireless Headphones',\n      description: 'Premium sound quality with noise cancellation',\n      price: 199.99,\n      imageUrl: 'https://via.placeholder.com/300',\n      category: 'electronics'\n    },\n    {\n      id: '4',\n      name: 'Smart Watch',\n      description: 'Track your fitness and stay connected',\n      price: 249.99,\n      imageUrl: 'https://via.placeholder.com/300',\n      category: 'wearables'\n    },\n    {\n      id: '5',\n      name: 'Tablet Ultra',\n      description: 'Lightweight tablet with stunning display',\n      price: 499.99,\n      imageUrl: 'https://via.placeholder.com/300',\n      category: 'electronics'\n    }\n  ];\n\n  constructor(private http: HttpClient) { }\n\n  getProducts(category?: string): Observable<Product[]> {\n    // In a real app, this would call the API with params\n    // return this.http.get<Product[]>(this.apiUrl)\n    \n    // For the demo, we'll use mock data\n    if (category) {\n      return of(this.mockProducts.filter(p => p.category === category));\n    }\n    return of(this.mockProducts);\n  }\n\n  getProduct(id: string): Observable<Product> {\n    // In a real app, this would call the API with the ID\n    // return this.http.get<Product>(`${this.apiUrl}/${id}`)\n    \n    // For the demo, we'll use mock data\n    const product = this.mockProducts.find(p => p.id === id);\n    \n    if (!product) {\n      return of({} as Product);\n    }\n    \n    return of(product);\n  }\n\n  addProduct(product: Product): Observable<Product> {\n    // In a real app, this would call the API to add the product\n    // return this.http.post<Product>(this.apiUrl, product)\n    \n    // For the demo, we'll simulate adding to mock data\n    const newProduct = {\n      ...product,\n      id: (this.mockProducts.length + 1).toString()\n    };\n    this.mockProducts.push(newProduct);\n    \n    return of(newProduct);\n  }\n\n  updateProduct(id: string, product: Product): Observable<Product> {\n    // In a real app, this would call the API to update the product\n    // return this.http.put<Product>(`${this.apiUrl}/${id}`, product)\n    \n    // For the demo, we'll simulate updating mock data\n    const index = this.mockProducts.findIndex(p => p.id === id);\n    \n    if (index > -1) {\n      this.mockProducts[index] = { ...product, id };\n      return of(this.mockProducts[index]);\n    }\n    \n    return of({} as Product);\n  }\n\n  deleteProduct(id: string): Observable<boolean> {\n    // In a real app, this would call the API to delete the product\n    // return this.http.delete(`${this.apiUrl}/${id}`).pipe(map(() => true))\n    \n    // For the demo, we'll simulate deleting from mock data\n    const index = this.mockProducts.findIndex(p => p.id === id);\n    \n    if (index > -1) {\n      this.mockProducts.splice(index, 1);\n      return of(true);\n    }\n    \n    return of(false);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}