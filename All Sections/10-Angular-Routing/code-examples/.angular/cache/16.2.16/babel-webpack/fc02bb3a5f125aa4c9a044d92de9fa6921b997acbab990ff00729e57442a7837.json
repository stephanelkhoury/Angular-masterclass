{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated()) {\n      // Check if a specific role is required for this route\n      const requiredRole = route.data?.['requiredRole'];\n      if (requiredRole && !this.authService.hasRole(requiredRole)) {\n        // User doesn't have required role, navigate to home\n        this.router.navigate(['/']);\n        return false;\n      }\n      return true;\n    }\n    // Store the attempted URL for redirecting after login\n    this.authService.redirectUrl = state.url;\n    // Navigate to login page\n    this.router.navigate(['/login']);\n    return false;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthGuard };","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","requiredRole","data","hasRole","navigate","redirectUrl","url","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/10-Angular-Routing/code-examples/src/app/guards/auth.guard.ts"],"sourcesContent":["// guards/auth.guard.ts\n\nimport { Injectable } from '@angular/core';\nimport { \n  CanActivate, \n  ActivatedRouteSnapshot, \n  RouterStateSnapshot, \n  Router \n} from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  \n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n  \n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (this.authService.isAuthenticated()) {\n      // Check if a specific role is required for this route\n      const requiredRole = route.data?.['requiredRole'];\n      \n      if (requiredRole && !this.authService.hasRole(requiredRole)) {\n        // User doesn't have required role, navigate to home\n        this.router.navigate(['/']);\n        return false;\n      }\n      \n      return true;\n    }\n    \n    // Store the attempted URL for redirecting after login\n    this.authService.redirectUrl = state.url;\n    \n    // Navigate to login page\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n"],"mappings":";;;AAWA,MAGaA,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,EAAE;MACtC;MACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,IAAI,GAAG,cAAc,CAAC;MAEjD,IAAID,YAAY,IAAI,CAAC,IAAI,CAACN,WAAW,CAACQ,OAAO,CAACF,YAAY,CAAC,EAAE;QAC3D;QACA,IAAI,CAACL,MAAM,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,OAAO,KAAK;;MAGd,OAAO,IAAI;;IAGb;IACA,IAAI,CAACT,WAAW,CAACU,WAAW,GAAGN,KAAK,CAACO,GAAG;IAExC;IACA,IAAI,CAACV,MAAM,CAACQ,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;;;uBA9BWX,SAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATnB,SAAS;MAAAoB,OAAA,EAATpB,SAAS,CAAAqB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA;;SAEPtB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}