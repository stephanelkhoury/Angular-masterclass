{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/product.service\";\nclass ProductResolver {\n  constructor(productService) {\n    this.productService = productService;\n  }\n  resolve(route, state) {\n    const id = route.paramMap.get('id');\n    if (!id) {\n      return {}; // Return empty product if no id provided\n    }\n    return this.productService.getProduct(id).pipe(catchError(error => {\n      console.error('Error retrieving product data', error);\n      return of({}); // Return empty product on error\n    }));\n  }\n  static {\n    this.ɵfac = function ProductResolver_Factory(t) {\n      return new (t || ProductResolver)(i0.ɵɵinject(i1.ProductService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductResolver,\n      factory: ProductResolver.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { ProductResolver };","map":{"version":3,"names":["of","catchError","ProductResolver","constructor","productService","resolve","route","state","id","paramMap","get","getProduct","pipe","error","console","i0","ɵɵinject","i1","ProductService","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/10-Angular-Routing/code-examples/src/app/resolvers/product.resolver.ts"],"sourcesContent":["// resolvers/product.resolver.ts\n\nimport { Injectable } from '@angular/core';\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Product } from '../models/product.model';\nimport { ProductService } from '../services/product.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductResolver implements Resolve<Product> {\n  \n  constructor(private productService: ProductService) {}\n  \n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<Product> | Promise<Product> | Product {\n    const id = route.paramMap.get('id');\n    \n    if (!id) {\n      return {} as Product; // Return empty product if no id provided\n    }\n    \n    return this.productService.getProduct(id).pipe(\n      catchError(error => {\n        console.error('Error retrieving product data', error);\n        return of({} as Product); // Return empty product on error\n      })\n    );\n  }\n}\n"],"mappings":"AAIA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAQ,gBAAgB;;;AAI3C,MAGaC,eAAe;EAE1BC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAmB;EAErDC,OAAOA,CACLC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,EAAE,GAAGF,KAAK,CAACG,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IAEnC,IAAI,CAACF,EAAE,EAAE;MACP,OAAO,EAAa,CAAC,CAAC;;IAGxB,OAAO,IAAI,CAACJ,cAAc,CAACO,UAAU,CAACH,EAAE,CAAC,CAACI,IAAI,CAC5CX,UAAU,CAACY,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAOb,EAAE,CAAC,EAAa,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,CACH;EACH;;;uBApBWE,eAAe,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;IAAA;EAAA;;;aAAfhB,eAAe;MAAAiB,OAAA,EAAfjB,eAAe,CAAAkB,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;SAEPnB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}