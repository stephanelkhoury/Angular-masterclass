{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nclass AuthService {\n  constructor(router) {\n    this.router = router;\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.redirectUrl = null;\n    // Check if user is logged in from localStorage\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      this.currentUserSubject.next(user);\n      this.isAuthenticatedSubject.next(true);\n    }\n  }\n  login(email, password) {\n    // In a real app, this would make an HTTP request to authenticate\n    // For demo purposes, we'll simulate a successful login with hardcoded values\n    if (email === 'admin@example.com' && password === 'password') {\n      const user = {\n        id: '1',\n        name: 'Admin User',\n        email: email,\n        role: 'admin'\n      };\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n      this.isAuthenticatedSubject.next(true);\n      return true;\n    }\n    return false;\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.isAuthenticatedSubject.next(false);\n    this.redirectUrl = null;\n  }\n  isAuthenticated() {\n    return this.isAuthenticatedSubject.value;\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  hasRole(role) {\n    const user = this.getCurrentUser();\n    return !!user && user.role === role;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","AuthService","constructor","router","isAuthenticatedSubject","currentUserSubject","redirectUrl","storedUser","localStorage","getItem","user","JSON","parse","next","login","email","password","id","name","role","setItem","stringify","logout","removeItem","isAuthenticated","value","getCurrentUser","hasRole","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["/Users/stephanelkhoury/Documents/GitHub/Angular-masterclass/10-Angular-Routing/code-examples/src/app/services/auth.service.ts"],"sourcesContent":["// services/auth.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public redirectUrl: string | null = null;\n\n  constructor(private router: Router) {\n    // Check if user is logged in from localStorage\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      const user = JSON.parse(storedUser);\n      this.currentUserSubject.next(user);\n      this.isAuthenticatedSubject.next(true);\n    }\n  }\n\n  login(email: string, password: string): boolean {\n    // In a real app, this would make an HTTP request to authenticate\n    // For demo purposes, we'll simulate a successful login with hardcoded values\n    if (email === 'admin@example.com' && password === 'password') {\n      const user: User = {\n        id: '1',\n        name: 'Admin User',\n        email: email,\n        role: 'admin'\n      };\n      \n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n      this.isAuthenticatedSubject.next(true);\n      \n      return true;\n    }\n    \n    return false;\n  }\n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.isAuthenticatedSubject.next(false);\n    this.redirectUrl = null;\n  }\n\n  isAuthenticated(): boolean {\n    return this.isAuthenticatedSubject.value;\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  hasRole(role: string): boolean {\n    const user = this.getCurrentUser();\n    return !!user && user.role === role;\n  }\n}\n"],"mappings":"AAIA,SAASA,eAAe,QAAQ,MAAM;;;AAGtC,MAGaC,WAAW;EAKtBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAJlB,KAAAC,sBAAsB,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;IAC5D,KAAAK,kBAAkB,GAAG,IAAIL,eAAe,CAAc,IAAI,CAAC;IAC5D,KAAAM,WAAW,GAAkB,IAAI;IAGtC;IACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAIF,UAAU,EAAE;MACd,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;MACnC,IAAI,CAACF,kBAAkB,CAACQ,IAAI,CAACH,IAAI,CAAC;MAClC,IAAI,CAACN,sBAAsB,CAACS,IAAI,CAAC,IAAI,CAAC;;EAE1C;EAEAC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC;IACA;IACA,IAAID,KAAK,KAAK,mBAAmB,IAAIC,QAAQ,KAAK,UAAU,EAAE;MAC5D,MAAMN,IAAI,GAAS;QACjBO,EAAE,EAAE,GAAG;QACPC,IAAI,EAAE,YAAY;QAClBH,KAAK,EAAEA,KAAK;QACZI,IAAI,EAAE;OACP;MAEDX,YAAY,CAACY,OAAO,CAAC,aAAa,EAAET,IAAI,CAACU,SAAS,CAACX,IAAI,CAAC,CAAC;MACzD,IAAI,CAACL,kBAAkB,CAACQ,IAAI,CAACH,IAAI,CAAC;MAClC,IAAI,CAACN,sBAAsB,CAACS,IAAI,CAAC,IAAI,CAAC;MAEtC,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;EAEAS,MAAMA,CAAA;IACJd,YAAY,CAACe,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAAClB,kBAAkB,CAACQ,IAAI,CAAC,IAAI,CAAC;IAClC,IAAI,CAACT,sBAAsB,CAACS,IAAI,CAAC,KAAK,CAAC;IACvC,IAAI,CAACP,WAAW,GAAG,IAAI;EACzB;EAEAkB,eAAeA,CAAA;IACb,OAAO,IAAI,CAACpB,sBAAsB,CAACqB,KAAK;EAC1C;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACrB,kBAAkB,CAACoB,KAAK;EACtC;EAEAE,OAAOA,CAACR,IAAY;IAClB,MAAMT,IAAI,GAAG,IAAI,CAACgB,cAAc,EAAE;IAClC,OAAO,CAAC,CAAChB,IAAI,IAAIA,IAAI,CAACS,IAAI,KAAKA,IAAI;EACrC;;;uBAtDWlB,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAX9B,WAAW;MAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEPjC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}